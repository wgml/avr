
BUZZER_CPP.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001730  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001e  00800060  00001730  000017a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         0000447c  00000000  00000000  000017c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00002383  00000000  00000000  00005c40  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  00007fc3  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
       0:	29 c0       	rjmp	.+82     	; 0x54 <__ctors_end>
       2:	00 00       	nop
       4:	43 c0       	rjmp	.+134    	; 0x8c <__bad_interrupt>
       6:	00 00       	nop
       8:	41 c0       	rjmp	.+130    	; 0x8c <__bad_interrupt>
       a:	00 00       	nop
       c:	3f c0       	rjmp	.+126    	; 0x8c <__bad_interrupt>
       e:	00 00       	nop
      10:	3d c0       	rjmp	.+122    	; 0x8c <__bad_interrupt>
      12:	00 00       	nop
      14:	3b c0       	rjmp	.+118    	; 0x8c <__bad_interrupt>
      16:	00 00       	nop
      18:	39 c0       	rjmp	.+114    	; 0x8c <__bad_interrupt>
      1a:	00 00       	nop
      1c:	37 c0       	rjmp	.+110    	; 0x8c <__bad_interrupt>
      1e:	00 00       	nop
      20:	35 c0       	rjmp	.+106    	; 0x8c <__bad_interrupt>
      22:	00 00       	nop
      24:	33 c0       	rjmp	.+102    	; 0x8c <__bad_interrupt>
      26:	00 00       	nop
      28:	31 c0       	rjmp	.+98     	; 0x8c <__bad_interrupt>
      2a:	00 00       	nop
      2c:	2f c0       	rjmp	.+94     	; 0x8c <__bad_interrupt>
      2e:	00 00       	nop
      30:	2d c0       	rjmp	.+90     	; 0x8c <__bad_interrupt>
      32:	00 00       	nop
      34:	2b c0       	rjmp	.+86     	; 0x8c <__bad_interrupt>
      36:	00 00       	nop
      38:	29 c0       	rjmp	.+82     	; 0x8c <__bad_interrupt>
      3a:	00 00       	nop
      3c:	27 c0       	rjmp	.+78     	; 0x8c <__bad_interrupt>
      3e:	00 00       	nop
      40:	25 c0       	rjmp	.+74     	; 0x8c <__bad_interrupt>
      42:	00 00       	nop
      44:	23 c0       	rjmp	.+70     	; 0x8c <__bad_interrupt>
      46:	00 00       	nop
      48:	21 c0       	rjmp	.+66     	; 0x8c <__bad_interrupt>
      4a:	00 00       	nop
      4c:	1f c0       	rjmp	.+62     	; 0x8c <__bad_interrupt>
      4e:	00 00       	nop
      50:	1d c0       	rjmp	.+58     	; 0x8c <__bad_interrupt>
	...

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e3       	ldi	r30, 0x30	; 48
      68:	f7 e1       	ldi	r31, 0x17	; 23
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	ae 37       	cpi	r26, 0x7E	; 126
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ae e7       	ldi	r26, 0x7E	; 126
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 37       	cpi	r26, 0x7E	; 126
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	ef d7       	rcall	.+4062   	; 0x1066 <main>
      88:	0c 94 96 0b 	jmp	0x172c	; 0x172c <_exit>

0000008c <__bad_interrupt>:
      8c:	b9 cf       	rjmp	.-142    	; 0x0 <__vectors>

0000008e <_ZN3LCD6Cursor4iterEv>:
	struct Cursor
	{
	 	 uint8_t 	x, y;
	 	 bool 		visible;
	 	 bool		blinking;
	 	 void iter()
      8e:	cf 93       	push	r28
      90:	df 93       	push	r29
      92:	00 d0       	rcall	.+0      	; 0x94 <_ZN3LCD6Cursor4iterEv+0x6>
      94:	cd b7       	in	r28, 0x3d	; 61
      96:	de b7       	in	r29, 0x3e	; 62
      98:	9a 83       	std	Y+2, r25	; 0x02
      9a:	89 83       	std	Y+1, r24	; 0x01
	 	 {
	 		 if(this->x <39)
      9c:	89 81       	ldd	r24, Y+1	; 0x01
      9e:	9a 81       	ldd	r25, Y+2	; 0x02
      a0:	fc 01       	movw	r30, r24
      a2:	80 81       	ld	r24, Z
      a4:	87 32       	cpi	r24, 0x27	; 39
      a6:	58 f4       	brcc	.+22     	; 0xbe <_ZN3LCD6Cursor4iterEv+0x30>
	 			 this->x++;
      a8:	89 81       	ldd	r24, Y+1	; 0x01
      aa:	9a 81       	ldd	r25, Y+2	; 0x02
      ac:	fc 01       	movw	r30, r24
      ae:	80 81       	ld	r24, Z
      b0:	21 e0       	ldi	r18, 0x01	; 1
      b2:	28 0f       	add	r18, r24
      b4:	89 81       	ldd	r24, Y+1	; 0x01
      b6:	9a 81       	ldd	r25, Y+2	; 0x02
      b8:	fc 01       	movw	r30, r24
      ba:	20 83       	st	Z, r18
      bc:	18 c0       	rjmp	.+48     	; 0xee <_ZN3LCD6Cursor4iterEv+0x60>
	 		 else
	 		 {
	 			 this->x = 0;
      be:	89 81       	ldd	r24, Y+1	; 0x01
      c0:	9a 81       	ldd	r25, Y+2	; 0x02
      c2:	fc 01       	movw	r30, r24
      c4:	10 82       	st	Z, r1
	 			 this->y = (this->y + 1) % 2;
      c6:	89 81       	ldd	r24, Y+1	; 0x01
      c8:	9a 81       	ldd	r25, Y+2	; 0x02
      ca:	fc 01       	movw	r30, r24
      cc:	81 81       	ldd	r24, Z+1	; 0x01
      ce:	88 2f       	mov	r24, r24
      d0:	90 e0       	ldi	r25, 0x00	; 0
      d2:	01 96       	adiw	r24, 0x01	; 1
      d4:	81 70       	andi	r24, 0x01	; 1
      d6:	90 78       	andi	r25, 0x80	; 128
      d8:	99 23       	and	r25, r25
      da:	24 f4       	brge	.+8      	; 0xe4 <_ZN3LCD6Cursor4iterEv+0x56>
      dc:	01 97       	sbiw	r24, 0x01	; 1
      de:	8e 6f       	ori	r24, 0xFE	; 254
      e0:	9f 6f       	ori	r25, 0xFF	; 255
      e2:	01 96       	adiw	r24, 0x01	; 1
      e4:	28 2f       	mov	r18, r24
      e6:	89 81       	ldd	r24, Y+1	; 0x01
      e8:	9a 81       	ldd	r25, Y+2	; 0x02
      ea:	fc 01       	movw	r30, r24
      ec:	21 83       	std	Z+1, r18	; 0x01
	 		 }
	 	 }
      ee:	0f 90       	pop	r0
      f0:	0f 90       	pop	r0
      f2:	df 91       	pop	r29
      f4:	cf 91       	pop	r28
      f6:	08 95       	ret

000000f8 <_ZL17hd44780_outnibblehh>:
/*
 * Send one nibble out to the LCD controller.
 */
static void
hd44780_outnibble(uint8_t n, uint8_t rs)
{
      f8:	cf 93       	push	r28
      fa:	df 93       	push	r29
      fc:	cd b7       	in	r28, 0x3d	; 61
      fe:	de b7       	in	r29, 0x3e	; 62
     100:	6c 97       	sbiw	r28, 0x1c	; 28
     102:	0f b6       	in	r0, 0x3f	; 63
     104:	f8 94       	cli
     106:	de bf       	out	0x3e, r29	; 62
     108:	0f be       	out	0x3f, r0	; 63
     10a:	cd bf       	out	0x3d, r28	; 61
     10c:	8b 8f       	std	Y+27, r24	; 0x1b
     10e:	6c 8f       	std	Y+28, r22	; 0x1c
  CLR(PORT, HD44780_RW);
     110:	88 e3       	ldi	r24, 0x38	; 56
     112:	90 e0       	ldi	r25, 0x00	; 0
     114:	28 e3       	ldi	r18, 0x38	; 56
     116:	30 e0       	ldi	r19, 0x00	; 0
     118:	f9 01       	movw	r30, r18
     11a:	20 81       	ld	r18, Z
     11c:	2d 7f       	andi	r18, 0xFD	; 253
     11e:	fc 01       	movw	r30, r24
     120:	20 83       	st	Z, r18
  if (rs)
     122:	8c 8d       	ldd	r24, Y+28	; 0x1c
     124:	88 23       	and	r24, r24
     126:	51 f0       	breq	.+20     	; 0x13c <_ZL17hd44780_outnibblehh+0x44>
    SET(PORT, HD44780_RS);
     128:	88 e3       	ldi	r24, 0x38	; 56
     12a:	90 e0       	ldi	r25, 0x00	; 0
     12c:	28 e3       	ldi	r18, 0x38	; 56
     12e:	30 e0       	ldi	r19, 0x00	; 0
     130:	f9 01       	movw	r30, r18
     132:	20 81       	ld	r18, Z
     134:	21 60       	ori	r18, 0x01	; 1
     136:	fc 01       	movw	r30, r24
     138:	20 83       	st	Z, r18
     13a:	09 c0       	rjmp	.+18     	; 0x14e <_ZL17hd44780_outnibblehh+0x56>
  else
    CLR(PORT, HD44780_RS);
     13c:	88 e3       	ldi	r24, 0x38	; 56
     13e:	90 e0       	ldi	r25, 0x00	; 0
     140:	28 e3       	ldi	r18, 0x38	; 56
     142:	30 e0       	ldi	r19, 0x00	; 0
     144:	f9 01       	movw	r30, r18
     146:	20 81       	ld	r18, Z
     148:	2e 7f       	andi	r18, 0xFE	; 254
     14a:	fc 01       	movw	r30, r24
     14c:	20 83       	st	Z, r18
  ASSIGN(PORT, HD44780_D4, n);
     14e:	8b e3       	ldi	r24, 0x3B	; 59
     150:	90 e0       	ldi	r25, 0x00	; 0
     152:	2b e3       	ldi	r18, 0x3B	; 59
     154:	30 e0       	ldi	r19, 0x00	; 0
     156:	f9 01       	movw	r30, r18
     158:	20 81       	ld	r18, Z
     15a:	32 2f       	mov	r19, r18
     15c:	30 7f       	andi	r19, 0xF0	; 240
     15e:	2b 8d       	ldd	r18, Y+27	; 0x1b
     160:	23 2b       	or	r18, r19
     162:	fc 01       	movw	r30, r24
     164:	20 83       	st	Z, r18
     166:	19 82       	std	Y+1, r1	; 0x01
static inline uint8_t
hd44780_pulse_e(bool readback)
{
  uint8_t x;

  SET(PORT, HD44780_E);
     168:	88 e3       	ldi	r24, 0x38	; 56
     16a:	90 e0       	ldi	r25, 0x00	; 0
     16c:	28 e3       	ldi	r18, 0x38	; 56
     16e:	30 e0       	ldi	r19, 0x00	; 0
     170:	f9 01       	movw	r30, r18
     172:	20 81       	ld	r18, Z
     174:	24 60       	ori	r18, 0x04	; 4
     176:	fc 01       	movw	r30, r24
     178:	20 83       	st	Z, r18
     17a:	80 e0       	ldi	r24, 0x00	; 0
     17c:	90 e0       	ldi	r25, 0x00	; 0
     17e:	a0 e0       	ldi	r26, 0x00	; 0
     180:	bf e3       	ldi	r27, 0x3F	; 63
     182:	8a 83       	std	Y+2, r24	; 0x02
     184:	9b 83       	std	Y+3, r25	; 0x03
     186:	ac 83       	std	Y+4, r26	; 0x04
     188:	bd 83       	std	Y+5, r27	; 0x05
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 3e6) * __us;
     18a:	2b ea       	ldi	r18, 0xAB	; 171
     18c:	3a ea       	ldi	r19, 0xAA	; 170
     18e:	4a e2       	ldi	r20, 0x2A	; 42
     190:	50 e4       	ldi	r21, 0x40	; 64
     192:	6a 81       	ldd	r22, Y+2	; 0x02
     194:	7b 81       	ldd	r23, Y+3	; 0x03
     196:	8c 81       	ldd	r24, Y+4	; 0x04
     198:	9d 81       	ldd	r25, Y+5	; 0x05
     19a:	0e 94 33 0b 	call	0x1666	; 0x1666 <__mulsf3>
     19e:	dc 01       	movw	r26, r24
     1a0:	cb 01       	movw	r24, r22
     1a2:	8e 83       	std	Y+6, r24	; 0x06
     1a4:	9f 83       	std	Y+7, r25	; 0x07
     1a6:	a8 87       	std	Y+8, r26	; 0x08
     1a8:	b9 87       	std	Y+9, r27	; 0x09
	if (__tmp < 1.0)
     1aa:	20 e0       	ldi	r18, 0x00	; 0
     1ac:	30 e0       	ldi	r19, 0x00	; 0
     1ae:	40 e8       	ldi	r20, 0x80	; 128
     1b0:	5f e3       	ldi	r21, 0x3F	; 63
     1b2:	6e 81       	ldd	r22, Y+6	; 0x06
     1b4:	7f 81       	ldd	r23, Y+7	; 0x07
     1b6:	88 85       	ldd	r24, Y+8	; 0x08
     1b8:	99 85       	ldd	r25, Y+9	; 0x09
     1ba:	0e 94 22 0a 	call	0x1444	; 0x1444 <__cmpsf2>
     1be:	88 23       	and	r24, r24
     1c0:	1c f4       	brge	.+6      	; 0x1c8 <_ZL17hd44780_outnibblehh+0xd0>
		__ticks = 1;
     1c2:	81 e0       	ldi	r24, 0x01	; 1
     1c4:	8a 87       	std	Y+10, r24	; 0x0a
     1c6:	91 c0       	rjmp	.+290    	; 0x2ea <_ZL17hd44780_outnibblehh+0x1f2>
	else if (__tmp > 255)
     1c8:	20 e0       	ldi	r18, 0x00	; 0
     1ca:	30 e0       	ldi	r19, 0x00	; 0
     1cc:	4f e7       	ldi	r20, 0x7F	; 127
     1ce:	53 e4       	ldi	r21, 0x43	; 67
     1d0:	6e 81       	ldd	r22, Y+6	; 0x06
     1d2:	7f 81       	ldd	r23, Y+7	; 0x07
     1d4:	88 85       	ldd	r24, Y+8	; 0x08
     1d6:	99 85       	ldd	r25, Y+9	; 0x09
     1d8:	0e 94 2f 0b 	call	0x165e	; 0x165e <__gesf2>
     1dc:	18 16       	cp	r1, r24
     1de:	0c f0       	brlt	.+2      	; 0x1e2 <_ZL17hd44780_outnibblehh+0xea>
     1e0:	7b c0       	rjmp	.+246    	; 0x2d8 <_ZL17hd44780_outnibblehh+0x1e0>
	{
		_delay_ms(__us / 1000.0);
     1e2:	20 e0       	ldi	r18, 0x00	; 0
     1e4:	30 e0       	ldi	r19, 0x00	; 0
     1e6:	4a e7       	ldi	r20, 0x7A	; 122
     1e8:	54 e4       	ldi	r21, 0x44	; 68
     1ea:	6a 81       	ldd	r22, Y+2	; 0x02
     1ec:	7b 81       	ldd	r23, Y+3	; 0x03
     1ee:	8c 81       	ldd	r24, Y+4	; 0x04
     1f0:	9d 81       	ldd	r25, Y+5	; 0x05
     1f2:	0e 94 26 0a 	call	0x144c	; 0x144c <__divsf3>
     1f6:	dc 01       	movw	r26, r24
     1f8:	cb 01       	movw	r24, r22
     1fa:	8b 87       	std	Y+11, r24	; 0x0b
     1fc:	9c 87       	std	Y+12, r25	; 0x0c
     1fe:	ad 87       	std	Y+13, r26	; 0x0d
     200:	be 87       	std	Y+14, r27	; 0x0e
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     202:	20 e0       	ldi	r18, 0x00	; 0
     204:	30 e0       	ldi	r19, 0x00	; 0
     206:	4a ef       	ldi	r20, 0xFA	; 250
     208:	54 e4       	ldi	r21, 0x44	; 68
     20a:	6b 85       	ldd	r22, Y+11	; 0x0b
     20c:	7c 85       	ldd	r23, Y+12	; 0x0c
     20e:	8d 85       	ldd	r24, Y+13	; 0x0d
     210:	9e 85       	ldd	r25, Y+14	; 0x0e
     212:	0e 94 33 0b 	call	0x1666	; 0x1666 <__mulsf3>
     216:	dc 01       	movw	r26, r24
     218:	cb 01       	movw	r24, r22
     21a:	8f 87       	std	Y+15, r24	; 0x0f
     21c:	98 8b       	std	Y+16, r25	; 0x10
     21e:	a9 8b       	std	Y+17, r26	; 0x11
     220:	ba 8b       	std	Y+18, r27	; 0x12
	if (__tmp < 1.0)
     222:	20 e0       	ldi	r18, 0x00	; 0
     224:	30 e0       	ldi	r19, 0x00	; 0
     226:	40 e8       	ldi	r20, 0x80	; 128
     228:	5f e3       	ldi	r21, 0x3F	; 63
     22a:	6f 85       	ldd	r22, Y+15	; 0x0f
     22c:	78 89       	ldd	r23, Y+16	; 0x10
     22e:	89 89       	ldd	r24, Y+17	; 0x11
     230:	9a 89       	ldd	r25, Y+18	; 0x12
     232:	0e 94 22 0a 	call	0x1444	; 0x1444 <__cmpsf2>
     236:	88 23       	and	r24, r24
     238:	2c f4       	brge	.+10     	; 0x244 <_ZL17hd44780_outnibblehh+0x14c>
		__ticks = 1;
     23a:	81 e0       	ldi	r24, 0x01	; 1
     23c:	90 e0       	ldi	r25, 0x00	; 0
     23e:	9c 8b       	std	Y+20, r25	; 0x14
     240:	8b 8b       	std	Y+19, r24	; 0x13
     242:	3f c0       	rjmp	.+126    	; 0x2c2 <_ZL17hd44780_outnibblehh+0x1ca>
	else if (__tmp > 65535)
     244:	20 e0       	ldi	r18, 0x00	; 0
     246:	3f ef       	ldi	r19, 0xFF	; 255
     248:	4f e7       	ldi	r20, 0x7F	; 127
     24a:	57 e4       	ldi	r21, 0x47	; 71
     24c:	6f 85       	ldd	r22, Y+15	; 0x0f
     24e:	78 89       	ldd	r23, Y+16	; 0x10
     250:	89 89       	ldd	r24, Y+17	; 0x11
     252:	9a 89       	ldd	r25, Y+18	; 0x12
     254:	0e 94 2f 0b 	call	0x165e	; 0x165e <__gesf2>
     258:	18 16       	cp	r1, r24
     25a:	4c f5       	brge	.+82     	; 0x2ae <_ZL17hd44780_outnibblehh+0x1b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     25c:	20 e0       	ldi	r18, 0x00	; 0
     25e:	30 e0       	ldi	r19, 0x00	; 0
     260:	40 e2       	ldi	r20, 0x20	; 32
     262:	51 e4       	ldi	r21, 0x41	; 65
     264:	6b 85       	ldd	r22, Y+11	; 0x0b
     266:	7c 85       	ldd	r23, Y+12	; 0x0c
     268:	8d 85       	ldd	r24, Y+13	; 0x0d
     26a:	9e 85       	ldd	r25, Y+14	; 0x0e
     26c:	0e 94 33 0b 	call	0x1666	; 0x1666 <__mulsf3>
     270:	dc 01       	movw	r26, r24
     272:	cb 01       	movw	r24, r22
     274:	bc 01       	movw	r22, r24
     276:	cd 01       	movw	r24, r26
     278:	0e 94 8e 0a 	call	0x151c	; 0x151c <__fixunssfsi>
     27c:	dc 01       	movw	r26, r24
     27e:	cb 01       	movw	r24, r22
     280:	9c 8b       	std	Y+20, r25	; 0x14
     282:	8b 8b       	std	Y+19, r24	; 0x13
     284:	0f c0       	rjmp	.+30     	; 0x2a4 <_ZL17hd44780_outnibblehh+0x1ac>
     286:	88 ec       	ldi	r24, 0xC8	; 200
     288:	90 e0       	ldi	r25, 0x00	; 0
     28a:	9e 8b       	std	Y+22, r25	; 0x16
     28c:	8d 8b       	std	Y+21, r24	; 0x15
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
     28e:	8d 89       	ldd	r24, Y+21	; 0x15
     290:	9e 89       	ldd	r25, Y+22	; 0x16
     292:	01 97       	sbiw	r24, 0x01	; 1
     294:	f1 f7       	brne	.-4      	; 0x292 <_ZL17hd44780_outnibblehh+0x19a>
     296:	9e 8b       	std	Y+22, r25	; 0x16
     298:	8d 8b       	std	Y+21, r24	; 0x15
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     29a:	8b 89       	ldd	r24, Y+19	; 0x13
     29c:	9c 89       	ldd	r25, Y+20	; 0x14
     29e:	01 97       	sbiw	r24, 0x01	; 1
     2a0:	9c 8b       	std	Y+20, r25	; 0x14
     2a2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     2a4:	8b 89       	ldd	r24, Y+19	; 0x13
     2a6:	9c 89       	ldd	r25, Y+20	; 0x14
     2a8:	00 97       	sbiw	r24, 0x00	; 0
     2aa:	69 f7       	brne	.-38     	; 0x286 <_ZL17hd44780_outnibblehh+0x18e>
     2ac:	24 c0       	rjmp	.+72     	; 0x2f6 <_ZL17hd44780_outnibblehh+0x1fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     2ae:	6f 85       	ldd	r22, Y+15	; 0x0f
     2b0:	78 89       	ldd	r23, Y+16	; 0x10
     2b2:	89 89       	ldd	r24, Y+17	; 0x11
     2b4:	9a 89       	ldd	r25, Y+18	; 0x12
     2b6:	0e 94 8e 0a 	call	0x151c	; 0x151c <__fixunssfsi>
     2ba:	dc 01       	movw	r26, r24
     2bc:	cb 01       	movw	r24, r22
     2be:	9c 8b       	std	Y+20, r25	; 0x14
     2c0:	8b 8b       	std	Y+19, r24	; 0x13
     2c2:	8b 89       	ldd	r24, Y+19	; 0x13
     2c4:	9c 89       	ldd	r25, Y+20	; 0x14
     2c6:	98 8f       	std	Y+24, r25	; 0x18
     2c8:	8f 8b       	std	Y+23, r24	; 0x17
     2ca:	8f 89       	ldd	r24, Y+23	; 0x17
     2cc:	98 8d       	ldd	r25, Y+24	; 0x18
     2ce:	01 97       	sbiw	r24, 0x01	; 1
     2d0:	f1 f7       	brne	.-4      	; 0x2ce <_ZL17hd44780_outnibblehh+0x1d6>
     2d2:	98 8f       	std	Y+24, r25	; 0x18
     2d4:	8f 8b       	std	Y+23, r24	; 0x17
     2d6:	0f c0       	rjmp	.+30     	; 0x2f6 <_ZL17hd44780_outnibblehh+0x1fe>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     2d8:	6e 81       	ldd	r22, Y+6	; 0x06
     2da:	7f 81       	ldd	r23, Y+7	; 0x07
     2dc:	88 85       	ldd	r24, Y+8	; 0x08
     2de:	99 85       	ldd	r25, Y+9	; 0x09
     2e0:	0e 94 8e 0a 	call	0x151c	; 0x151c <__fixunssfsi>
     2e4:	dc 01       	movw	r26, r24
     2e6:	cb 01       	movw	r24, r22
     2e8:	8a 87       	std	Y+10, r24	; 0x0a
     2ea:	8a 85       	ldd	r24, Y+10	; 0x0a
     2ec:	89 8f       	std	Y+25, r24	; 0x19
	__asm__ volatile (
		"1: dec %0" "\n\t"
		"brne 1b"
		: "=r" (__count)
		: "0" (__count)
	);
     2ee:	89 8d       	ldd	r24, Y+25	; 0x19
     2f0:	8a 95       	dec	r24
     2f2:	f1 f7       	brne	.-4      	; 0x2f0 <_ZL17hd44780_outnibblehh+0x1f8>
     2f4:	89 8f       	std	Y+25, r24	; 0x19
  __asm__ volatile("nop");
  __asm__ volatile("nop");
#    endif /* F_CPU > 2000000UL */
#  endif /* F_CPU > 1000000UL */
#endif
  if (readback)
     2f6:	89 81       	ldd	r24, Y+1	; 0x01
     2f8:	88 23       	and	r24, r24
     2fa:	39 f0       	breq	.+14     	; 0x30a <_ZL17hd44780_outnibblehh+0x212>
    x = READ(PIN, HD44780_D4);
     2fc:	89 e3       	ldi	r24, 0x39	; 57
     2fe:	90 e0       	ldi	r25, 0x00	; 0
     300:	fc 01       	movw	r30, r24
     302:	80 81       	ld	r24, Z
     304:	8f 70       	andi	r24, 0x0F	; 15
     306:	8a 8f       	std	Y+26, r24	; 0x1a
     308:	01 c0       	rjmp	.+2      	; 0x30c <_ZL17hd44780_outnibblehh+0x214>
  else
    x = 0;
     30a:	1a 8e       	std	Y+26, r1	; 0x1a
  CLR(PORT, HD44780_E);
     30c:	88 e3       	ldi	r24, 0x38	; 56
     30e:	90 e0       	ldi	r25, 0x00	; 0
     310:	28 e3       	ldi	r18, 0x38	; 56
     312:	30 e0       	ldi	r19, 0x00	; 0
     314:	f9 01       	movw	r30, r18
     316:	20 81       	ld	r18, Z
     318:	2b 7f       	andi	r18, 0xFB	; 251
     31a:	fc 01       	movw	r30, r24
     31c:	20 83       	st	Z, r18
    SET(PORT, HD44780_RS);
  else
    CLR(PORT, HD44780_RS);
  ASSIGN(PORT, HD44780_D4, n);
  (void)hd44780_pulse_e(false);
}
     31e:	6c 96       	adiw	r28, 0x1c	; 28
     320:	0f b6       	in	r0, 0x3f	; 63
     322:	f8 94       	cli
     324:	de bf       	out	0x3e, r29	; 62
     326:	0f be       	out	0x3f, r0	; 63
     328:	cd bf       	out	0x3d, r28	; 61
     32a:	df 91       	pop	r29
     32c:	cf 91       	pop	r28
     32e:	08 95       	ret

00000330 <_Z15hd44780_outbytehh>:
 * Send one byte to the LCD controller.  As we are in 4-bit mode, we
 * have to send two nibbles.
 */
void
hd44780_outbyte(uint8_t b, uint8_t rs)
{
     330:	cf 93       	push	r28
     332:	df 93       	push	r29
     334:	00 d0       	rcall	.+0      	; 0x336 <_Z15hd44780_outbytehh+0x6>
     336:	cd b7       	in	r28, 0x3d	; 61
     338:	de b7       	in	r29, 0x3e	; 62
     33a:	89 83       	std	Y+1, r24	; 0x01
     33c:	6a 83       	std	Y+2, r22	; 0x02
  hd44780_outnibble(b >> 4, rs);
     33e:	89 81       	ldd	r24, Y+1	; 0x01
     340:	88 2f       	mov	r24, r24
     342:	90 e0       	ldi	r25, 0x00	; 0
     344:	95 95       	asr	r25
     346:	87 95       	ror	r24
     348:	95 95       	asr	r25
     34a:	87 95       	ror	r24
     34c:	95 95       	asr	r25
     34e:	87 95       	ror	r24
     350:	95 95       	asr	r25
     352:	87 95       	ror	r24
     354:	6a 81       	ldd	r22, Y+2	; 0x02
     356:	d0 de       	rcall	.-608    	; 0xf8 <_ZL17hd44780_outnibblehh>
     358:	89 81       	ldd	r24, Y+1	; 0x01
  hd44780_outnibble(b & 0xf, rs);
     35a:	8f 70       	andi	r24, 0x0F	; 15
     35c:	6a 81       	ldd	r22, Y+2	; 0x02
     35e:	cc de       	rcall	.-616    	; 0xf8 <_ZL17hd44780_outnibblehh>
     360:	0f 90       	pop	r0
     362:	0f 90       	pop	r0
}
     364:	df 91       	pop	r29
     366:	cf 91       	pop	r28
     368:	08 95       	ret

0000036a <_ZL16hd44780_innibbleh>:
/*
 * Read one nibble from the LCD controller.
 */
static uint8_t
hd44780_innibble(uint8_t rs)
{
     36a:	cf 93       	push	r28
     36c:	df 93       	push	r29
     36e:	cd b7       	in	r28, 0x3d	; 61
     370:	de b7       	in	r29, 0x3e	; 62
     372:	6c 97       	sbiw	r28, 0x1c	; 28
     374:	0f b6       	in	r0, 0x3f	; 63
     376:	f8 94       	cli
     378:	de bf       	out	0x3e, r29	; 62
     37a:	0f be       	out	0x3f, r0	; 63
     37c:	cd bf       	out	0x3d, r28	; 61
     37e:	8c 8f       	std	Y+28, r24	; 0x1c
  uint8_t x;

  SET(PORT, HD44780_RW);
     380:	88 e3       	ldi	r24, 0x38	; 56
     382:	90 e0       	ldi	r25, 0x00	; 0
     384:	28 e3       	ldi	r18, 0x38	; 56
     386:	30 e0       	ldi	r19, 0x00	; 0
     388:	f9 01       	movw	r30, r18
     38a:	20 81       	ld	r18, Z
     38c:	22 60       	ori	r18, 0x02	; 2
     38e:	fc 01       	movw	r30, r24
     390:	20 83       	st	Z, r18
  ASSIGN(DDR, HD44780_D4, 0x00);
     392:	8a e3       	ldi	r24, 0x3A	; 58
     394:	90 e0       	ldi	r25, 0x00	; 0
     396:	2a e3       	ldi	r18, 0x3A	; 58
     398:	30 e0       	ldi	r19, 0x00	; 0
     39a:	f9 01       	movw	r30, r18
     39c:	20 81       	ld	r18, Z
     39e:	20 7f       	andi	r18, 0xF0	; 240
     3a0:	fc 01       	movw	r30, r24
     3a2:	20 83       	st	Z, r18
  if (rs)
     3a4:	8c 8d       	ldd	r24, Y+28	; 0x1c
     3a6:	88 23       	and	r24, r24
     3a8:	51 f0       	breq	.+20     	; 0x3be <_ZL16hd44780_innibbleh+0x54>
    SET(PORT, HD44780_RS);
     3aa:	88 e3       	ldi	r24, 0x38	; 56
     3ac:	90 e0       	ldi	r25, 0x00	; 0
     3ae:	28 e3       	ldi	r18, 0x38	; 56
     3b0:	30 e0       	ldi	r19, 0x00	; 0
     3b2:	f9 01       	movw	r30, r18
     3b4:	20 81       	ld	r18, Z
     3b6:	21 60       	ori	r18, 0x01	; 1
     3b8:	fc 01       	movw	r30, r24
     3ba:	20 83       	st	Z, r18
     3bc:	09 c0       	rjmp	.+18     	; 0x3d0 <_ZL16hd44780_innibbleh+0x66>
  else
    CLR(PORT, HD44780_RS);
     3be:	88 e3       	ldi	r24, 0x38	; 56
     3c0:	90 e0       	ldi	r25, 0x00	; 0
     3c2:	28 e3       	ldi	r18, 0x38	; 56
     3c4:	30 e0       	ldi	r19, 0x00	; 0
     3c6:	f9 01       	movw	r30, r18
     3c8:	20 81       	ld	r18, Z
     3ca:	2e 7f       	andi	r18, 0xFE	; 254
     3cc:	fc 01       	movw	r30, r24
     3ce:	20 83       	st	Z, r18
     3d0:	81 e0       	ldi	r24, 0x01	; 1
     3d2:	8a 83       	std	Y+2, r24	; 0x02
static inline uint8_t
hd44780_pulse_e(bool readback)
{
  uint8_t x;

  SET(PORT, HD44780_E);
     3d4:	88 e3       	ldi	r24, 0x38	; 56
     3d6:	90 e0       	ldi	r25, 0x00	; 0
     3d8:	28 e3       	ldi	r18, 0x38	; 56
     3da:	30 e0       	ldi	r19, 0x00	; 0
     3dc:	f9 01       	movw	r30, r18
     3de:	20 81       	ld	r18, Z
     3e0:	24 60       	ori	r18, 0x04	; 4
     3e2:	fc 01       	movw	r30, r24
     3e4:	20 83       	st	Z, r18
     3e6:	80 e0       	ldi	r24, 0x00	; 0
     3e8:	90 e0       	ldi	r25, 0x00	; 0
     3ea:	a0 e0       	ldi	r26, 0x00	; 0
     3ec:	bf e3       	ldi	r27, 0x3F	; 63
     3ee:	8b 83       	std	Y+3, r24	; 0x03
     3f0:	9c 83       	std	Y+4, r25	; 0x04
     3f2:	ad 83       	std	Y+5, r26	; 0x05
     3f4:	be 83       	std	Y+6, r27	; 0x06
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 3e6) * __us;
     3f6:	2b ea       	ldi	r18, 0xAB	; 171
     3f8:	3a ea       	ldi	r19, 0xAA	; 170
     3fa:	4a e2       	ldi	r20, 0x2A	; 42
     3fc:	50 e4       	ldi	r21, 0x40	; 64
     3fe:	6b 81       	ldd	r22, Y+3	; 0x03
     400:	7c 81       	ldd	r23, Y+4	; 0x04
     402:	8d 81       	ldd	r24, Y+5	; 0x05
     404:	9e 81       	ldd	r25, Y+6	; 0x06
     406:	0e 94 33 0b 	call	0x1666	; 0x1666 <__mulsf3>
     40a:	dc 01       	movw	r26, r24
     40c:	cb 01       	movw	r24, r22
     40e:	8f 83       	std	Y+7, r24	; 0x07
     410:	98 87       	std	Y+8, r25	; 0x08
     412:	a9 87       	std	Y+9, r26	; 0x09
     414:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     416:	20 e0       	ldi	r18, 0x00	; 0
     418:	30 e0       	ldi	r19, 0x00	; 0
     41a:	40 e8       	ldi	r20, 0x80	; 128
     41c:	5f e3       	ldi	r21, 0x3F	; 63
     41e:	6f 81       	ldd	r22, Y+7	; 0x07
     420:	78 85       	ldd	r23, Y+8	; 0x08
     422:	89 85       	ldd	r24, Y+9	; 0x09
     424:	9a 85       	ldd	r25, Y+10	; 0x0a
     426:	0e 94 22 0a 	call	0x1444	; 0x1444 <__cmpsf2>
     42a:	88 23       	and	r24, r24
     42c:	1c f4       	brge	.+6      	; 0x434 <_ZL16hd44780_innibbleh+0xca>
		__ticks = 1;
     42e:	81 e0       	ldi	r24, 0x01	; 1
     430:	8b 87       	std	Y+11, r24	; 0x0b
     432:	8d c0       	rjmp	.+282    	; 0x54e <__stack+0xef>
	else if (__tmp > 255)
     434:	20 e0       	ldi	r18, 0x00	; 0
     436:	30 e0       	ldi	r19, 0x00	; 0
     438:	4f e7       	ldi	r20, 0x7F	; 127
     43a:	53 e4       	ldi	r21, 0x43	; 67
     43c:	6f 81       	ldd	r22, Y+7	; 0x07
     43e:	78 85       	ldd	r23, Y+8	; 0x08
     440:	89 85       	ldd	r24, Y+9	; 0x09
     442:	9a 85       	ldd	r25, Y+10	; 0x0a
     444:	0e 94 2f 0b 	call	0x165e	; 0x165e <__gesf2>
     448:	18 16       	cp	r1, r24
     44a:	0c f0       	brlt	.+2      	; 0x44e <_ZL16hd44780_innibbleh+0xe4>
     44c:	78 c0       	rjmp	.+240    	; 0x53e <__stack+0xdf>
	{
		_delay_ms(__us / 1000.0);
     44e:	20 e0       	ldi	r18, 0x00	; 0
     450:	30 e0       	ldi	r19, 0x00	; 0
     452:	4a e7       	ldi	r20, 0x7A	; 122
     454:	54 e4       	ldi	r21, 0x44	; 68
     456:	6b 81       	ldd	r22, Y+3	; 0x03
     458:	7c 81       	ldd	r23, Y+4	; 0x04
     45a:	8d 81       	ldd	r24, Y+5	; 0x05
     45c:	9e 81       	ldd	r25, Y+6	; 0x06
     45e:	f6 d7       	rcall	.+4076   	; 0x144c <__divsf3>
     460:	dc 01       	movw	r26, r24
     462:	cb 01       	movw	r24, r22
     464:	8c 87       	std	Y+12, r24	; 0x0c
     466:	9d 87       	std	Y+13, r25	; 0x0d
     468:	ae 87       	std	Y+14, r26	; 0x0e
     46a:	bf 87       	std	Y+15, r27	; 0x0f
     46c:	20 e0       	ldi	r18, 0x00	; 0
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     46e:	30 e0       	ldi	r19, 0x00	; 0
     470:	4a ef       	ldi	r20, 0xFA	; 250
     472:	54 e4       	ldi	r21, 0x44	; 68
     474:	6c 85       	ldd	r22, Y+12	; 0x0c
     476:	7d 85       	ldd	r23, Y+13	; 0x0d
     478:	8e 85       	ldd	r24, Y+14	; 0x0e
     47a:	9f 85       	ldd	r25, Y+15	; 0x0f
     47c:	0e 94 33 0b 	call	0x1666	; 0x1666 <__mulsf3>
     480:	dc 01       	movw	r26, r24
     482:	cb 01       	movw	r24, r22
     484:	88 8b       	std	Y+16, r24	; 0x10
     486:	99 8b       	std	Y+17, r25	; 0x11
     488:	aa 8b       	std	Y+18, r26	; 0x12
     48a:	bb 8b       	std	Y+19, r27	; 0x13
     48c:	20 e0       	ldi	r18, 0x00	; 0
	if (__tmp < 1.0)
     48e:	30 e0       	ldi	r19, 0x00	; 0
     490:	40 e8       	ldi	r20, 0x80	; 128
     492:	5f e3       	ldi	r21, 0x3F	; 63
     494:	68 89       	ldd	r22, Y+16	; 0x10
     496:	79 89       	ldd	r23, Y+17	; 0x11
     498:	8a 89       	ldd	r24, Y+18	; 0x12
     49a:	9b 89       	ldd	r25, Y+19	; 0x13
     49c:	d3 d7       	rcall	.+4006   	; 0x1444 <__cmpsf2>
     49e:	88 23       	and	r24, r24
     4a0:	2c f4       	brge	.+10     	; 0x4ac <__stack+0x4d>
     4a2:	81 e0       	ldi	r24, 0x01	; 1
     4a4:	90 e0       	ldi	r25, 0x00	; 0
		__ticks = 1;
     4a6:	9d 8b       	std	Y+21, r25	; 0x15
     4a8:	8c 8b       	std	Y+20, r24	; 0x14
     4aa:	3e c0       	rjmp	.+124    	; 0x528 <__stack+0xc9>
     4ac:	20 e0       	ldi	r18, 0x00	; 0
     4ae:	3f ef       	ldi	r19, 0xFF	; 255
	else if (__tmp > 65535)
     4b0:	4f e7       	ldi	r20, 0x7F	; 127
     4b2:	57 e4       	ldi	r21, 0x47	; 71
     4b4:	68 89       	ldd	r22, Y+16	; 0x10
     4b6:	79 89       	ldd	r23, Y+17	; 0x11
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	9b 89       	ldd	r25, Y+19	; 0x13
     4bc:	0e 94 2f 0b 	call	0x165e	; 0x165e <__gesf2>
     4c0:	18 16       	cp	r1, r24
     4c2:	4c f5       	brge	.+82     	; 0x516 <__stack+0xb7>
     4c4:	20 e0       	ldi	r18, 0x00	; 0
     4c6:	30 e0       	ldi	r19, 0x00	; 0
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     4c8:	40 e2       	ldi	r20, 0x20	; 32
     4ca:	51 e4       	ldi	r21, 0x41	; 65
     4cc:	6c 85       	ldd	r22, Y+12	; 0x0c
     4ce:	7d 85       	ldd	r23, Y+13	; 0x0d
     4d0:	8e 85       	ldd	r24, Y+14	; 0x0e
     4d2:	9f 85       	ldd	r25, Y+15	; 0x0f
     4d4:	0e 94 33 0b 	call	0x1666	; 0x1666 <__mulsf3>
     4d8:	dc 01       	movw	r26, r24
     4da:	cb 01       	movw	r24, r22
     4dc:	bc 01       	movw	r22, r24
     4de:	cd 01       	movw	r24, r26
     4e0:	0e 94 8e 0a 	call	0x151c	; 0x151c <__fixunssfsi>
     4e4:	dc 01       	movw	r26, r24
     4e6:	cb 01       	movw	r24, r22
     4e8:	9d 8b       	std	Y+21, r25	; 0x15
     4ea:	8c 8b       	std	Y+20, r24	; 0x14
     4ec:	0f c0       	rjmp	.+30     	; 0x50c <__stack+0xad>
     4ee:	88 ec       	ldi	r24, 0xC8	; 200
     4f0:	90 e0       	ldi	r25, 0x00	; 0
     4f2:	9f 8b       	std	Y+23, r25	; 0x17
     4f4:	8e 8b       	std	Y+22, r24	; 0x16
     4f6:	8e 89       	ldd	r24, Y+22	; 0x16
     4f8:	9f 89       	ldd	r25, Y+23	; 0x17
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
     4fa:	01 97       	sbiw	r24, 0x01	; 1
     4fc:	f1 f7       	brne	.-4      	; 0x4fa <__stack+0x9b>
     4fe:	9f 8b       	std	Y+23, r25	; 0x17
     500:	8e 8b       	std	Y+22, r24	; 0x16
     502:	8c 89       	ldd	r24, Y+20	; 0x14
     504:	9d 89       	ldd	r25, Y+21	; 0x15
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     506:	01 97       	sbiw	r24, 0x01	; 1
     508:	9d 8b       	std	Y+21, r25	; 0x15
     50a:	8c 8b       	std	Y+20, r24	; 0x14
     50c:	8c 89       	ldd	r24, Y+20	; 0x14
     50e:	9d 89       	ldd	r25, Y+21	; 0x15
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     510:	00 97       	sbiw	r24, 0x00	; 0
     512:	69 f7       	brne	.-38     	; 0x4ee <__stack+0x8f>
     514:	22 c0       	rjmp	.+68     	; 0x55a <__stack+0xfb>
     516:	68 89       	ldd	r22, Y+16	; 0x10
     518:	79 89       	ldd	r23, Y+17	; 0x11
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     51a:	8a 89       	ldd	r24, Y+18	; 0x12
     51c:	9b 89       	ldd	r25, Y+19	; 0x13
     51e:	fe d7       	rcall	.+4092   	; 0x151c <__fixunssfsi>
     520:	dc 01       	movw	r26, r24
     522:	cb 01       	movw	r24, r22
     524:	9d 8b       	std	Y+21, r25	; 0x15
     526:	8c 8b       	std	Y+20, r24	; 0x14
     528:	8c 89       	ldd	r24, Y+20	; 0x14
     52a:	9d 89       	ldd	r25, Y+21	; 0x15
     52c:	99 8f       	std	Y+25, r25	; 0x19
     52e:	88 8f       	std	Y+24, r24	; 0x18
     530:	88 8d       	ldd	r24, Y+24	; 0x18
     532:	99 8d       	ldd	r25, Y+25	; 0x19
     534:	01 97       	sbiw	r24, 0x01	; 1
     536:	f1 f7       	brne	.-4      	; 0x534 <__stack+0xd5>
     538:	99 8f       	std	Y+25, r25	; 0x19
     53a:	88 8f       	std	Y+24, r24	; 0x18
     53c:	0e c0       	rjmp	.+28     	; 0x55a <__stack+0xfb>
     53e:	6f 81       	ldd	r22, Y+7	; 0x07
     540:	78 85       	ldd	r23, Y+8	; 0x08
     542:	89 85       	ldd	r24, Y+9	; 0x09
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     544:	9a 85       	ldd	r25, Y+10	; 0x0a
     546:	ea d7       	rcall	.+4052   	; 0x151c <__fixunssfsi>
     548:	dc 01       	movw	r26, r24
     54a:	cb 01       	movw	r24, r22
     54c:	8b 87       	std	Y+11, r24	; 0x0b
     54e:	8b 85       	ldd	r24, Y+11	; 0x0b
     550:	8a 8f       	std	Y+26, r24	; 0x1a
     552:	8a 8d       	ldd	r24, Y+26	; 0x1a
     554:	8a 95       	dec	r24
     556:	f1 f7       	brne	.-4      	; 0x554 <__stack+0xf5>
     558:	8a 8f       	std	Y+26, r24	; 0x1a
     55a:	8a 81       	ldd	r24, Y+2	; 0x02
     55c:	88 23       	and	r24, r24
     55e:	39 f0       	breq	.+14     	; 0x56e <__stack+0x10f>
     560:	89 e3       	ldi	r24, 0x39	; 57
  __asm__ volatile("nop");
  __asm__ volatile("nop");
#    endif /* F_CPU > 2000000UL */
#  endif /* F_CPU > 1000000UL */
#endif
  if (readback)
     562:	90 e0       	ldi	r25, 0x00	; 0
     564:	fc 01       	movw	r30, r24
     566:	80 81       	ld	r24, Z
    x = READ(PIN, HD44780_D4);
     568:	8f 70       	andi	r24, 0x0F	; 15
     56a:	8b 8f       	std	Y+27, r24	; 0x1b
     56c:	01 c0       	rjmp	.+2      	; 0x570 <__stack+0x111>
     56e:	1b 8e       	std	Y+27, r1	; 0x1b
     570:	88 e3       	ldi	r24, 0x38	; 56
     572:	90 e0       	ldi	r25, 0x00	; 0
     574:	28 e3       	ldi	r18, 0x38	; 56
  else
    x = 0;
     576:	30 e0       	ldi	r19, 0x00	; 0
  CLR(PORT, HD44780_E);
     578:	f9 01       	movw	r30, r18
     57a:	20 81       	ld	r18, Z
     57c:	2b 7f       	andi	r18, 0xFB	; 251
     57e:	fc 01       	movw	r30, r24
     580:	20 83       	st	Z, r18
     582:	8b 8d       	ldd	r24, Y+27	; 0x1b
     584:	89 83       	std	Y+1, r24	; 0x01
     586:	8a e3       	ldi	r24, 0x3A	; 58
     588:	90 e0       	ldi	r25, 0x00	; 0

  return x;
     58a:	2a e3       	ldi	r18, 0x3A	; 58
  ASSIGN(DDR, HD44780_D4, 0x00);
  if (rs)
    SET(PORT, HD44780_RS);
  else
    CLR(PORT, HD44780_RS);
  x = hd44780_pulse_e(true);
     58c:	30 e0       	ldi	r19, 0x00	; 0
  ASSIGN(DDR, HD44780_D4, 0x0F);
     58e:	f9 01       	movw	r30, r18
     590:	20 81       	ld	r18, Z
     592:	2f 60       	ori	r18, 0x0F	; 15
     594:	fc 01       	movw	r30, r24
     596:	20 83       	st	Z, r18
     598:	88 e3       	ldi	r24, 0x38	; 56
     59a:	90 e0       	ldi	r25, 0x00	; 0
     59c:	28 e3       	ldi	r18, 0x38	; 56
     59e:	30 e0       	ldi	r19, 0x00	; 0
  CLR(PORT, HD44780_RW);
     5a0:	f9 01       	movw	r30, r18
     5a2:	20 81       	ld	r18, Z
     5a4:	2d 7f       	andi	r18, 0xFD	; 253
     5a6:	fc 01       	movw	r30, r24
     5a8:	20 83       	st	Z, r18
     5aa:	89 81       	ldd	r24, Y+1	; 0x01
     5ac:	6c 96       	adiw	r28, 0x1c	; 28
     5ae:	0f b6       	in	r0, 0x3f	; 63
     5b0:	f8 94       	cli

  return x;
     5b2:	de bf       	out	0x3e, r29	; 62
}
     5b4:	0f be       	out	0x3f, r0	; 63
     5b6:	cd bf       	out	0x3d, r28	; 61
     5b8:	df 91       	pop	r29
     5ba:	cf 91       	pop	r28
     5bc:	08 95       	ret

000005be <_Z14hd44780_inbyteh>:
/*
 * Read one byte (i.e. two nibbles) from the LCD controller.
 */
uint8_t
hd44780_inbyte(uint8_t rs)
{
     5be:	cf 93       	push	r28
     5c0:	df 93       	push	r29
     5c2:	00 d0       	rcall	.+0      	; 0x5c4 <_Z14hd44780_inbyteh+0x6>
     5c4:	cd b7       	in	r28, 0x3d	; 61
     5c6:	de b7       	in	r29, 0x3e	; 62
     5c8:	8a 83       	std	Y+2, r24	; 0x02
  uint8_t x;

  x = hd44780_innibble(rs) << 4;
     5ca:	8a 81       	ldd	r24, Y+2	; 0x02
     5cc:	ce de       	rcall	.-612    	; 0x36a <_ZL16hd44780_innibbleh>
     5ce:	82 95       	swap	r24
     5d0:	80 7f       	andi	r24, 0xF0	; 240
     5d2:	89 83       	std	Y+1, r24	; 0x01
     5d4:	8a 81       	ldd	r24, Y+2	; 0x02
  x |= hd44780_innibble(rs);
     5d6:	c9 de       	rcall	.-622    	; 0x36a <_ZL16hd44780_innibbleh>
     5d8:	99 81       	ldd	r25, Y+1	; 0x01
     5da:	89 2b       	or	r24, r25
     5dc:	89 83       	std	Y+1, r24	; 0x01
     5de:	89 81       	ldd	r24, Y+1	; 0x01
     5e0:	0f 90       	pop	r0

  return x;
     5e2:	0f 90       	pop	r0
}
     5e4:	df 91       	pop	r29
     5e6:	cf 91       	pop	r28
     5e8:	08 95       	ret

000005ea <_Z18hd44780_wait_readyb>:
/*
 * Wait until the busy flag is cleared.
 */
void
hd44780_wait_ready(bool longwait)
{
     5ea:	cf 93       	push	r28
     5ec:	df 93       	push	r29
     5ee:	1f 92       	push	r1
     5f0:	cd b7       	in	r28, 0x3d	; 61
     5f2:	de b7       	in	r29, 0x3e	; 62
     5f4:	89 83       	std	Y+1, r24	; 0x01
#if USE_BUSY_BIT
  while (hd44780_incmd() & HD44780_BUSYFLAG) ;
     5f6:	00 00       	nop
     5f8:	80 e0       	ldi	r24, 0x00	; 0
     5fa:	e1 df       	rcall	.-62     	; 0x5be <_Z14hd44780_inbyteh>
     5fc:	88 1f       	adc	r24, r24
     5fe:	88 27       	eor	r24, r24
     600:	88 1f       	adc	r24, r24
     602:	88 23       	and	r24, r24
     604:	c9 f7       	brne	.-14     	; 0x5f8 <_Z18hd44780_wait_readyb+0xe>
     606:	0f 90       	pop	r0
  if (longwait)
    _delay_ms(1.52);
  else
    _delay_us(37);
#endif
}
     608:	df 91       	pop	r29
     60a:	cf 91       	pop	r28
     60c:	08 95       	ret

0000060e <_Z12hd44780_initv>:
 * This is the only area where timed waits are really needed as
 * the busy flag cannot be probed initially.
 */
void
hd44780_init(void)
{
     60e:	cf 93       	push	r28
     610:	df 93       	push	r29
     612:	cd b7       	in	r28, 0x3d	; 61
     614:	de b7       	in	r29, 0x3e	; 62
     616:	c2 54       	subi	r28, 0x42	; 66
     618:	d1 09       	sbc	r29, r1
     61a:	0f b6       	in	r0, 0x3f	; 63
     61c:	f8 94       	cli
     61e:	de bf       	out	0x3e, r29	; 62
     620:	0f be       	out	0x3f, r0	; 63
     622:	cd bf       	out	0x3d, r28	; 61
  SET(DDR, HD44780_RS);
     624:	87 e3       	ldi	r24, 0x37	; 55
     626:	90 e0       	ldi	r25, 0x00	; 0
     628:	27 e3       	ldi	r18, 0x37	; 55
     62a:	30 e0       	ldi	r19, 0x00	; 0
     62c:	f9 01       	movw	r30, r18
     62e:	20 81       	ld	r18, Z
     630:	21 60       	ori	r18, 0x01	; 1
     632:	fc 01       	movw	r30, r24
     634:	20 83       	st	Z, r18
  SET(DDR, HD44780_RW);
     636:	87 e3       	ldi	r24, 0x37	; 55
     638:	90 e0       	ldi	r25, 0x00	; 0
     63a:	27 e3       	ldi	r18, 0x37	; 55
     63c:	30 e0       	ldi	r19, 0x00	; 0
     63e:	f9 01       	movw	r30, r18
     640:	20 81       	ld	r18, Z
     642:	22 60       	ori	r18, 0x02	; 2
     644:	fc 01       	movw	r30, r24
     646:	20 83       	st	Z, r18
  SET(DDR, HD44780_E);
     648:	87 e3       	ldi	r24, 0x37	; 55
     64a:	90 e0       	ldi	r25, 0x00	; 0
     64c:	27 e3       	ldi	r18, 0x37	; 55
     64e:	30 e0       	ldi	r19, 0x00	; 0
     650:	f9 01       	movw	r30, r18
     652:	20 81       	ld	r18, Z
     654:	24 60       	ori	r18, 0x04	; 4
     656:	fc 01       	movw	r30, r24
     658:	20 83       	st	Z, r18
  ASSIGN(DDR, HD44780_D4, 0x0F);
     65a:	8a e3       	ldi	r24, 0x3A	; 58
     65c:	90 e0       	ldi	r25, 0x00	; 0
     65e:	2a e3       	ldi	r18, 0x3A	; 58
     660:	30 e0       	ldi	r19, 0x00	; 0
     662:	f9 01       	movw	r30, r18
     664:	20 81       	ld	r18, Z
     666:	2f 60       	ori	r18, 0x0F	; 15
     668:	fc 01       	movw	r30, r24
     66a:	20 83       	st	Z, r18
     66c:	80 e0       	ldi	r24, 0x00	; 0
     66e:	90 e0       	ldi	r25, 0x00	; 0
     670:	a0 e7       	ldi	r26, 0x70	; 112
     672:	b1 e4       	ldi	r27, 0x41	; 65
     674:	89 83       	std	Y+1, r24	; 0x01
     676:	9a 83       	std	Y+2, r25	; 0x02
     678:	ab 83       	std	Y+3, r26	; 0x03
     67a:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     67c:	20 e0       	ldi	r18, 0x00	; 0
     67e:	30 e0       	ldi	r19, 0x00	; 0
     680:	4a ef       	ldi	r20, 0xFA	; 250
     682:	54 e4       	ldi	r21, 0x44	; 68
     684:	69 81       	ldd	r22, Y+1	; 0x01
     686:	7a 81       	ldd	r23, Y+2	; 0x02
     688:	8b 81       	ldd	r24, Y+3	; 0x03
     68a:	9c 81       	ldd	r25, Y+4	; 0x04
     68c:	ec d7       	rcall	.+4056   	; 0x1666 <__mulsf3>
     68e:	dc 01       	movw	r26, r24
     690:	cb 01       	movw	r24, r22
     692:	8d 83       	std	Y+5, r24	; 0x05
     694:	9e 83       	std	Y+6, r25	; 0x06
     696:	af 83       	std	Y+7, r26	; 0x07
     698:	b8 87       	std	Y+8, r27	; 0x08
     69a:	20 e0       	ldi	r18, 0x00	; 0
	if (__tmp < 1.0)
     69c:	30 e0       	ldi	r19, 0x00	; 0
     69e:	40 e8       	ldi	r20, 0x80	; 128
     6a0:	5f e3       	ldi	r21, 0x3F	; 63
     6a2:	6d 81       	ldd	r22, Y+5	; 0x05
     6a4:	7e 81       	ldd	r23, Y+6	; 0x06
     6a6:	8f 81       	ldd	r24, Y+7	; 0x07
     6a8:	98 85       	ldd	r25, Y+8	; 0x08
     6aa:	cc d6       	rcall	.+3480   	; 0x1444 <__cmpsf2>
     6ac:	88 23       	and	r24, r24
     6ae:	2c f4       	brge	.+10     	; 0x6ba <_Z12hd44780_initv+0xac>
     6b0:	81 e0       	ldi	r24, 0x01	; 1
     6b2:	90 e0       	ldi	r25, 0x00	; 0
		__ticks = 1;
     6b4:	9a 87       	std	Y+10, r25	; 0x0a
     6b6:	89 87       	std	Y+9, r24	; 0x09
     6b8:	3b c0       	rjmp	.+118    	; 0x730 <_Z12hd44780_initv+0x122>
     6ba:	20 e0       	ldi	r18, 0x00	; 0
     6bc:	3f ef       	ldi	r19, 0xFF	; 255
	else if (__tmp > 65535)
     6be:	4f e7       	ldi	r20, 0x7F	; 127
     6c0:	57 e4       	ldi	r21, 0x47	; 71
     6c2:	6d 81       	ldd	r22, Y+5	; 0x05
     6c4:	7e 81       	ldd	r23, Y+6	; 0x06
     6c6:	8f 81       	ldd	r24, Y+7	; 0x07
     6c8:	98 85       	ldd	r25, Y+8	; 0x08
     6ca:	c9 d7       	rcall	.+3986   	; 0x165e <__gesf2>
     6cc:	18 16       	cp	r1, r24
     6ce:	3c f5       	brge	.+78     	; 0x71e <_Z12hd44780_initv+0x110>
     6d0:	20 e0       	ldi	r18, 0x00	; 0
     6d2:	30 e0       	ldi	r19, 0x00	; 0
     6d4:	40 e2       	ldi	r20, 0x20	; 32
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     6d6:	51 e4       	ldi	r21, 0x41	; 65
     6d8:	69 81       	ldd	r22, Y+1	; 0x01
     6da:	7a 81       	ldd	r23, Y+2	; 0x02
     6dc:	8b 81       	ldd	r24, Y+3	; 0x03
     6de:	9c 81       	ldd	r25, Y+4	; 0x04
     6e0:	c2 d7       	rcall	.+3972   	; 0x1666 <__mulsf3>
     6e2:	dc 01       	movw	r26, r24
     6e4:	cb 01       	movw	r24, r22
     6e6:	bc 01       	movw	r22, r24
     6e8:	cd 01       	movw	r24, r26
     6ea:	18 d7       	rcall	.+3632   	; 0x151c <__fixunssfsi>
     6ec:	dc 01       	movw	r26, r24
     6ee:	cb 01       	movw	r24, r22
     6f0:	9a 87       	std	Y+10, r25	; 0x0a
     6f2:	89 87       	std	Y+9, r24	; 0x09
     6f4:	0f c0       	rjmp	.+30     	; 0x714 <_Z12hd44780_initv+0x106>
     6f6:	88 ec       	ldi	r24, 0xC8	; 200
     6f8:	90 e0       	ldi	r25, 0x00	; 0
     6fa:	9c 87       	std	Y+12, r25	; 0x0c
     6fc:	8b 87       	std	Y+11, r24	; 0x0b
     6fe:	8b 85       	ldd	r24, Y+11	; 0x0b
     700:	9c 85       	ldd	r25, Y+12	; 0x0c
     702:	01 97       	sbiw	r24, 0x01	; 1
     704:	f1 f7       	brne	.-4      	; 0x702 <_Z12hd44780_initv+0xf4>
     706:	9c 87       	std	Y+12, r25	; 0x0c
     708:	8b 87       	std	Y+11, r24	; 0x0b
     70a:	89 85       	ldd	r24, Y+9	; 0x09
     70c:	9a 85       	ldd	r25, Y+10	; 0x0a
     70e:	01 97       	sbiw	r24, 0x01	; 1
     710:	9a 87       	std	Y+10, r25	; 0x0a
     712:	89 87       	std	Y+9, r24	; 0x09
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     714:	89 85       	ldd	r24, Y+9	; 0x09
     716:	9a 85       	ldd	r25, Y+10	; 0x0a
     718:	00 97       	sbiw	r24, 0x00	; 0
     71a:	69 f7       	brne	.-38     	; 0x6f6 <_Z12hd44780_initv+0xe8>
     71c:	13 c0       	rjmp	.+38     	; 0x744 <_Z12hd44780_initv+0x136>
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     71e:	6d 81       	ldd	r22, Y+5	; 0x05
     720:	7e 81       	ldd	r23, Y+6	; 0x06
     722:	8f 81       	ldd	r24, Y+7	; 0x07
     724:	98 85       	ldd	r25, Y+8	; 0x08
     726:	fa d6       	rcall	.+3572   	; 0x151c <__fixunssfsi>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     728:	dc 01       	movw	r26, r24
     72a:	cb 01       	movw	r24, r22
     72c:	9a 87       	std	Y+10, r25	; 0x0a
     72e:	89 87       	std	Y+9, r24	; 0x09
     730:	89 85       	ldd	r24, Y+9	; 0x09
     732:	9a 85       	ldd	r25, Y+10	; 0x0a
     734:	9e 87       	std	Y+14, r25	; 0x0e
     736:	8d 87       	std	Y+13, r24	; 0x0d
     738:	8d 85       	ldd	r24, Y+13	; 0x0d
     73a:	9e 85       	ldd	r25, Y+14	; 0x0e
     73c:	01 97       	sbiw	r24, 0x01	; 1
     73e:	f1 f7       	brne	.-4      	; 0x73c <_Z12hd44780_initv+0x12e>
     740:	9e 87       	std	Y+14, r25	; 0x0e
     742:	8d 87       	std	Y+13, r24	; 0x0d
     744:	60 e0       	ldi	r22, 0x00	; 0
     746:	83 e0       	ldi	r24, 0x03	; 3
     748:	d7 dc       	rcall	.-1618   	; 0xf8 <_ZL17hd44780_outnibblehh>
     74a:	83 e3       	ldi	r24, 0x33	; 51
     74c:	93 e3       	ldi	r25, 0x33	; 51
     74e:	a3 e8       	ldi	r26, 0x83	; 131

  _delay_ms(15);		/* 40 ms needed for Vcc = 2.7 V */
  hd44780_outnibble(HD44780_FNSET(1, 0, 0) >> 4, 0);
     750:	b0 e4       	ldi	r27, 0x40	; 64
     752:	8f 87       	std	Y+15, r24	; 0x0f
     754:	98 8b       	std	Y+16, r25	; 0x10
     756:	a9 8b       	std	Y+17, r26	; 0x11
     758:	ba 8b       	std	Y+18, r27	; 0x12
     75a:	20 e0       	ldi	r18, 0x00	; 0
     75c:	30 e0       	ldi	r19, 0x00	; 0
     75e:	4a ef       	ldi	r20, 0xFA	; 250
     760:	54 e4       	ldi	r21, 0x44	; 68
     762:	6f 85       	ldd	r22, Y+15	; 0x0f
     764:	78 89       	ldd	r23, Y+16	; 0x10
     766:	89 89       	ldd	r24, Y+17	; 0x11
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     768:	9a 89       	ldd	r25, Y+18	; 0x12
     76a:	7d d7       	rcall	.+3834   	; 0x1666 <__mulsf3>
     76c:	dc 01       	movw	r26, r24
     76e:	cb 01       	movw	r24, r22
     770:	8b 8b       	std	Y+19, r24	; 0x13
     772:	9c 8b       	std	Y+20, r25	; 0x14
     774:	ad 8b       	std	Y+21, r26	; 0x15
     776:	be 8b       	std	Y+22, r27	; 0x16
     778:	20 e0       	ldi	r18, 0x00	; 0
     77a:	30 e0       	ldi	r19, 0x00	; 0
     77c:	40 e8       	ldi	r20, 0x80	; 128
     77e:	5f e3       	ldi	r21, 0x3F	; 63
     780:	6b 89       	ldd	r22, Y+19	; 0x13
     782:	7c 89       	ldd	r23, Y+20	; 0x14
     784:	8d 89       	ldd	r24, Y+21	; 0x15
     786:	9e 89       	ldd	r25, Y+22	; 0x16
	if (__tmp < 1.0)
     788:	5d d6       	rcall	.+3258   	; 0x1444 <__cmpsf2>
     78a:	88 23       	and	r24, r24
     78c:	2c f4       	brge	.+10     	; 0x798 <_Z12hd44780_initv+0x18a>
     78e:	81 e0       	ldi	r24, 0x01	; 1
     790:	90 e0       	ldi	r25, 0x00	; 0
     792:	98 8f       	std	Y+24, r25	; 0x18
     794:	8f 8b       	std	Y+23, r24	; 0x17
     796:	3b c0       	rjmp	.+118    	; 0x80e <_Z12hd44780_initv+0x200>
     798:	20 e0       	ldi	r18, 0x00	; 0
     79a:	3f ef       	ldi	r19, 0xFF	; 255
     79c:	4f e7       	ldi	r20, 0x7F	; 127
     79e:	57 e4       	ldi	r21, 0x47	; 71
		__ticks = 1;
     7a0:	6b 89       	ldd	r22, Y+19	; 0x13
     7a2:	7c 89       	ldd	r23, Y+20	; 0x14
     7a4:	8d 89       	ldd	r24, Y+21	; 0x15
     7a6:	9e 89       	ldd	r25, Y+22	; 0x16
     7a8:	5a d7       	rcall	.+3764   	; 0x165e <__gesf2>
	else if (__tmp > 65535)
     7aa:	18 16       	cp	r1, r24
     7ac:	3c f5       	brge	.+78     	; 0x7fc <_Z12hd44780_initv+0x1ee>
     7ae:	20 e0       	ldi	r18, 0x00	; 0
     7b0:	30 e0       	ldi	r19, 0x00	; 0
     7b2:	40 e2       	ldi	r20, 0x20	; 32
     7b4:	51 e4       	ldi	r21, 0x41	; 65
     7b6:	6f 85       	ldd	r22, Y+15	; 0x0f
     7b8:	78 89       	ldd	r23, Y+16	; 0x10
     7ba:	89 89       	ldd	r24, Y+17	; 0x11
     7bc:	9a 89       	ldd	r25, Y+18	; 0x12
     7be:	53 d7       	rcall	.+3750   	; 0x1666 <__mulsf3>
     7c0:	dc 01       	movw	r26, r24
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     7c2:	cb 01       	movw	r24, r22
     7c4:	bc 01       	movw	r22, r24
     7c6:	cd 01       	movw	r24, r26
     7c8:	a9 d6       	rcall	.+3410   	; 0x151c <__fixunssfsi>
     7ca:	dc 01       	movw	r26, r24
     7cc:	cb 01       	movw	r24, r22
     7ce:	98 8f       	std	Y+24, r25	; 0x18
     7d0:	8f 8b       	std	Y+23, r24	; 0x17
     7d2:	0f c0       	rjmp	.+30     	; 0x7f2 <_Z12hd44780_initv+0x1e4>
     7d4:	88 ec       	ldi	r24, 0xC8	; 200
     7d6:	90 e0       	ldi	r25, 0x00	; 0
     7d8:	9a 8f       	std	Y+26, r25	; 0x1a
     7da:	89 8f       	std	Y+25, r24	; 0x19
     7dc:	89 8d       	ldd	r24, Y+25	; 0x19
     7de:	9a 8d       	ldd	r25, Y+26	; 0x1a
     7e0:	01 97       	sbiw	r24, 0x01	; 1
     7e2:	f1 f7       	brne	.-4      	; 0x7e0 <_Z12hd44780_initv+0x1d2>
     7e4:	9a 8f       	std	Y+26, r25	; 0x1a
     7e6:	89 8f       	std	Y+25, r24	; 0x19
     7e8:	8f 89       	ldd	r24, Y+23	; 0x17
     7ea:	98 8d       	ldd	r25, Y+24	; 0x18
     7ec:	01 97       	sbiw	r24, 0x01	; 1
     7ee:	98 8f       	std	Y+24, r25	; 0x18
     7f0:	8f 8b       	std	Y+23, r24	; 0x17
     7f2:	8f 89       	ldd	r24, Y+23	; 0x17
     7f4:	98 8d       	ldd	r25, Y+24	; 0x18
     7f6:	00 97       	sbiw	r24, 0x00	; 0
     7f8:	69 f7       	brne	.-38     	; 0x7d4 <_Z12hd44780_initv+0x1c6>
     7fa:	13 c0       	rjmp	.+38     	; 0x822 <_Z12hd44780_initv+0x214>
     7fc:	6b 89       	ldd	r22, Y+19	; 0x13
     7fe:	7c 89       	ldd	r23, Y+20	; 0x14
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     800:	8d 89       	ldd	r24, Y+21	; 0x15
     802:	9e 89       	ldd	r25, Y+22	; 0x16
     804:	8b d6       	rcall	.+3350   	; 0x151c <__fixunssfsi>
     806:	dc 01       	movw	r26, r24
     808:	cb 01       	movw	r24, r22
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     80a:	98 8f       	std	Y+24, r25	; 0x18
     80c:	8f 8b       	std	Y+23, r24	; 0x17
     80e:	8f 89       	ldd	r24, Y+23	; 0x17
     810:	98 8d       	ldd	r25, Y+24	; 0x18
     812:	9c 8f       	std	Y+28, r25	; 0x1c
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     814:	8b 8f       	std	Y+27, r24	; 0x1b
     816:	8b 8d       	ldd	r24, Y+27	; 0x1b
     818:	9c 8d       	ldd	r25, Y+28	; 0x1c
     81a:	01 97       	sbiw	r24, 0x01	; 1
     81c:	f1 f7       	brne	.-4      	; 0x81a <_Z12hd44780_initv+0x20c>
     81e:	9c 8f       	std	Y+28, r25	; 0x1c
     820:	8b 8f       	std	Y+27, r24	; 0x1b
     822:	60 e0       	ldi	r22, 0x00	; 0
     824:	83 e0       	ldi	r24, 0x03	; 3
     826:	68 dc       	rcall	.-1840   	; 0xf8 <_ZL17hd44780_outnibblehh>
     828:	8d ec       	ldi	r24, 0xCD	; 205
     82a:	9c ec       	ldi	r25, 0xCC	; 204
     82c:	ac ec       	ldi	r26, 0xCC	; 204
     82e:	bd e3       	ldi	r27, 0x3D	; 61
     830:	8d 8f       	std	Y+29, r24	; 0x1d
     832:	9e 8f       	std	Y+30, r25	; 0x1e
     834:	af 8f       	std	Y+31, r26	; 0x1f
     836:	b8 a3       	std	Y+32, r27	; 0x20
     838:	20 e0       	ldi	r18, 0x00	; 0
     83a:	30 e0       	ldi	r19, 0x00	; 0
     83c:	4a ef       	ldi	r20, 0xFA	; 250
     83e:	54 e4       	ldi	r21, 0x44	; 68
     840:	6d 8d       	ldd	r22, Y+29	; 0x1d
     842:	7e 8d       	ldd	r23, Y+30	; 0x1e
     844:	8f 8d       	ldd	r24, Y+31	; 0x1f
     846:	98 a1       	ldd	r25, Y+32	; 0x20
     848:	0e d7       	rcall	.+3612   	; 0x1666 <__mulsf3>
     84a:	dc 01       	movw	r26, r24
     84c:	cb 01       	movw	r24, r22
     84e:	89 a3       	std	Y+33, r24	; 0x21
     850:	9a a3       	std	Y+34, r25	; 0x22
     852:	ab a3       	std	Y+35, r26	; 0x23
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     854:	bc a3       	std	Y+36, r27	; 0x24
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e8       	ldi	r20, 0x80	; 128
     85c:	5f e3       	ldi	r21, 0x3F	; 63
     85e:	69 a1       	ldd	r22, Y+33	; 0x21
     860:	7a a1       	ldd	r23, Y+34	; 0x22
     862:	8b a1       	ldd	r24, Y+35	; 0x23
     864:	9c a1       	ldd	r25, Y+36	; 0x24
     866:	ee d5       	rcall	.+3036   	; 0x1444 <__cmpsf2>
     868:	88 23       	and	r24, r24
     86a:	2c f4       	brge	.+10     	; 0x876 <_Z12hd44780_initv+0x268>
     86c:	81 e0       	ldi	r24, 0x01	; 1
     86e:	90 e0       	ldi	r25, 0x00	; 0
     870:	9e a3       	std	Y+38, r25	; 0x26
     872:	8d a3       	std	Y+37, r24	; 0x25
	if (__tmp < 1.0)
     874:	3b c0       	rjmp	.+118    	; 0x8ec <_Z12hd44780_initv+0x2de>
     876:	20 e0       	ldi	r18, 0x00	; 0
     878:	3f ef       	ldi	r19, 0xFF	; 255
     87a:	4f e7       	ldi	r20, 0x7F	; 127
     87c:	57 e4       	ldi	r21, 0x47	; 71
     87e:	69 a1       	ldd	r22, Y+33	; 0x21
     880:	7a a1       	ldd	r23, Y+34	; 0x22
     882:	8b a1       	ldd	r24, Y+35	; 0x23
     884:	9c a1       	ldd	r25, Y+36	; 0x24
     886:	eb d6       	rcall	.+3542   	; 0x165e <__gesf2>
     888:	18 16       	cp	r1, r24
     88a:	3c f5       	brge	.+78     	; 0x8da <_Z12hd44780_initv+0x2cc>
		__ticks = 1;
     88c:	20 e0       	ldi	r18, 0x00	; 0
     88e:	30 e0       	ldi	r19, 0x00	; 0
     890:	40 e2       	ldi	r20, 0x20	; 32
     892:	51 e4       	ldi	r21, 0x41	; 65
     894:	6d 8d       	ldd	r22, Y+29	; 0x1d
	else if (__tmp > 65535)
     896:	7e 8d       	ldd	r23, Y+30	; 0x1e
     898:	8f 8d       	ldd	r24, Y+31	; 0x1f
     89a:	98 a1       	ldd	r25, Y+32	; 0x20
     89c:	e4 d6       	rcall	.+3528   	; 0x1666 <__mulsf3>
     89e:	dc 01       	movw	r26, r24
     8a0:	cb 01       	movw	r24, r22
     8a2:	bc 01       	movw	r22, r24
     8a4:	cd 01       	movw	r24, r26
     8a6:	3a d6       	rcall	.+3188   	; 0x151c <__fixunssfsi>
     8a8:	dc 01       	movw	r26, r24
     8aa:	cb 01       	movw	r24, r22
     8ac:	9e a3       	std	Y+38, r25	; 0x26
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     8ae:	8d a3       	std	Y+37, r24	; 0x25
     8b0:	0f c0       	rjmp	.+30     	; 0x8d0 <_Z12hd44780_initv+0x2c2>
     8b2:	88 ec       	ldi	r24, 0xC8	; 200
     8b4:	90 e0       	ldi	r25, 0x00	; 0
     8b6:	98 a7       	std	Y+40, r25	; 0x28
     8b8:	8f a3       	std	Y+39, r24	; 0x27
     8ba:	8f a1       	ldd	r24, Y+39	; 0x27
     8bc:	98 a5       	ldd	r25, Y+40	; 0x28
     8be:	01 97       	sbiw	r24, 0x01	; 1
     8c0:	f1 f7       	brne	.-4      	; 0x8be <_Z12hd44780_initv+0x2b0>
     8c2:	98 a7       	std	Y+40, r25	; 0x28
     8c4:	8f a3       	std	Y+39, r24	; 0x27
     8c6:	8d a1       	ldd	r24, Y+37	; 0x25
     8c8:	9e a1       	ldd	r25, Y+38	; 0x26
     8ca:	01 97       	sbiw	r24, 0x01	; 1
     8cc:	9e a3       	std	Y+38, r25	; 0x26
     8ce:	8d a3       	std	Y+37, r24	; 0x25
     8d0:	8d a1       	ldd	r24, Y+37	; 0x25
     8d2:	9e a1       	ldd	r25, Y+38	; 0x26
     8d4:	00 97       	sbiw	r24, 0x00	; 0
     8d6:	69 f7       	brne	.-38     	; 0x8b2 <_Z12hd44780_initv+0x2a4>
     8d8:	13 c0       	rjmp	.+38     	; 0x900 <_Z12hd44780_initv+0x2f2>
     8da:	69 a1       	ldd	r22, Y+33	; 0x21
     8dc:	7a a1       	ldd	r23, Y+34	; 0x22
     8de:	8b a1       	ldd	r24, Y+35	; 0x23
     8e0:	9c a1       	ldd	r25, Y+36	; 0x24
     8e2:	1c d6       	rcall	.+3128   	; 0x151c <__fixunssfsi>
     8e4:	dc 01       	movw	r26, r24
     8e6:	cb 01       	movw	r24, r22
     8e8:	9e a3       	std	Y+38, r25	; 0x26
     8ea:	8d a3       	std	Y+37, r24	; 0x25
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     8ec:	8d a1       	ldd	r24, Y+37	; 0x25
     8ee:	9e a1       	ldd	r25, Y+38	; 0x26
     8f0:	9a a7       	std	Y+42, r25	; 0x2a
     8f2:	89 a7       	std	Y+41, r24	; 0x29
     8f4:	89 a5       	ldd	r24, Y+41	; 0x29
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     8f6:	9a a5       	ldd	r25, Y+42	; 0x2a
     8f8:	01 97       	sbiw	r24, 0x01	; 1
     8fa:	f1 f7       	brne	.-4      	; 0x8f8 <_Z12hd44780_initv+0x2ea>
     8fc:	9a a7       	std	Y+42, r25	; 0x2a
     8fe:	89 a7       	std	Y+41, r24	; 0x29
     900:	60 e0       	ldi	r22, 0x00	; 0
     902:	83 e0       	ldi	r24, 0x03	; 3
     904:	f9 db       	rcall	.-2062   	; 0xf8 <_ZL17hd44780_outnibblehh>
     906:	80 e0       	ldi	r24, 0x00	; 0
     908:	90 e0       	ldi	r25, 0x00	; 0
     90a:	a4 e1       	ldi	r26, 0x14	; 20
     90c:	b2 e4       	ldi	r27, 0x42	; 66
     90e:	8b a7       	std	Y+43, r24	; 0x2b
     910:	9c a7       	std	Y+44, r25	; 0x2c
     912:	ad a7       	std	Y+45, r26	; 0x2d
     914:	be a7       	std	Y+46, r27	; 0x2e
     916:	2b ea       	ldi	r18, 0xAB	; 171
     918:	3a ea       	ldi	r19, 0xAA	; 170
     91a:	4a e2       	ldi	r20, 0x2A	; 42
     91c:	50 e4       	ldi	r21, 0x40	; 64
     91e:	6b a5       	ldd	r22, Y+43	; 0x2b
     920:	7c a5       	ldd	r23, Y+44	; 0x2c
     922:	8d a5       	ldd	r24, Y+45	; 0x2d
     924:	9e a5       	ldd	r25, Y+46	; 0x2e
     926:	9f d6       	rcall	.+3390   	; 0x1666 <__mulsf3>
     928:	dc 01       	movw	r26, r24
     92a:	cb 01       	movw	r24, r22
     92c:	8f a7       	std	Y+47, r24	; 0x2f
     92e:	98 ab       	std	Y+48, r25	; 0x30
     930:	a9 ab       	std	Y+49, r26	; 0x31
     932:	ba ab       	std	Y+50, r27	; 0x32
     934:	20 e0       	ldi	r18, 0x00	; 0
     936:	30 e0       	ldi	r19, 0x00	; 0
     938:	40 e8       	ldi	r20, 0x80	; 128
     93a:	5f e3       	ldi	r21, 0x3F	; 63
     93c:	6f a5       	ldd	r22, Y+47	; 0x2f
     93e:	78 a9       	ldd	r23, Y+48	; 0x30
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 3e6) * __us;
     940:	89 a9       	ldd	r24, Y+49	; 0x31
     942:	9a a9       	ldd	r25, Y+50	; 0x32
     944:	7f d5       	rcall	.+2814   	; 0x1444 <__cmpsf2>
     946:	88 23       	and	r24, r24
     948:	1c f4       	brge	.+6      	; 0x950 <_Z12hd44780_initv+0x342>
     94a:	81 e0       	ldi	r24, 0x01	; 1
     94c:	8b ab       	std	Y+51, r24	; 0x33
     94e:	94 c0       	rjmp	.+296    	; 0xa78 <_Z12hd44780_initv+0x46a>
     950:	20 e0       	ldi	r18, 0x00	; 0
     952:	30 e0       	ldi	r19, 0x00	; 0
     954:	4f e7       	ldi	r20, 0x7F	; 127
     956:	53 e4       	ldi	r21, 0x43	; 67
     958:	6f a5       	ldd	r22, Y+47	; 0x2f
     95a:	78 a9       	ldd	r23, Y+48	; 0x30
     95c:	89 a9       	ldd	r24, Y+49	; 0x31
     95e:	9a a9       	ldd	r25, Y+50	; 0x32
	if (__tmp < 1.0)
     960:	7e d6       	rcall	.+3324   	; 0x165e <__gesf2>
     962:	18 16       	cp	r1, r24
     964:	0c f0       	brlt	.+2      	; 0x968 <_Z12hd44780_initv+0x35a>
     966:	80 c0       	rjmp	.+256    	; 0xa68 <_Z12hd44780_initv+0x45a>
     968:	20 e0       	ldi	r18, 0x00	; 0
     96a:	30 e0       	ldi	r19, 0x00	; 0
     96c:	4a e7       	ldi	r20, 0x7A	; 122
     96e:	54 e4       	ldi	r21, 0x44	; 68
     970:	6b a5       	ldd	r22, Y+43	; 0x2b
     972:	7c a5       	ldd	r23, Y+44	; 0x2c
     974:	8d a5       	ldd	r24, Y+45	; 0x2d
     976:	9e a5       	ldd	r25, Y+46	; 0x2e
		__ticks = 1;
     978:	69 d5       	rcall	.+2770   	; 0x144c <__divsf3>
     97a:	dc 01       	movw	r26, r24
     97c:	cb 01       	movw	r24, r22
	else if (__tmp > 255)
     97e:	8c ab       	std	Y+52, r24	; 0x34
     980:	9d ab       	std	Y+53, r25	; 0x35
     982:	ae ab       	std	Y+54, r26	; 0x36
     984:	bf ab       	std	Y+55, r27	; 0x37
     986:	20 e0       	ldi	r18, 0x00	; 0
     988:	30 e0       	ldi	r19, 0x00	; 0
     98a:	4a ef       	ldi	r20, 0xFA	; 250
     98c:	54 e4       	ldi	r21, 0x44	; 68
     98e:	6c a9       	ldd	r22, Y+52	; 0x34
     990:	7d a9       	ldd	r23, Y+53	; 0x35
     992:	8e a9       	ldd	r24, Y+54	; 0x36
     994:	9f a9       	ldd	r25, Y+55	; 0x37
     996:	67 d6       	rcall	.+3278   	; 0x1666 <__mulsf3>
	{
		_delay_ms(__us / 1000.0);
     998:	dc 01       	movw	r26, r24
     99a:	cb 01       	movw	r24, r22
     99c:	88 af       	std	Y+56, r24	; 0x38
     99e:	99 af       	std	Y+57, r25	; 0x39
     9a0:	aa af       	std	Y+58, r26	; 0x3a
     9a2:	bb af       	std	Y+59, r27	; 0x3b
     9a4:	20 e0       	ldi	r18, 0x00	; 0
     9a6:	30 e0       	ldi	r19, 0x00	; 0
     9a8:	40 e8       	ldi	r20, 0x80	; 128
     9aa:	5f e3       	ldi	r21, 0x3F	; 63
     9ac:	68 ad       	ldd	r22, Y+56	; 0x38
     9ae:	79 ad       	ldd	r23, Y+57	; 0x39
     9b0:	8a ad       	ldd	r24, Y+58	; 0x3a
     9b2:	9b ad       	ldd	r25, Y+59	; 0x3b
     9b4:	47 d5       	rcall	.+2702   	; 0x1444 <__cmpsf2>
     9b6:	88 23       	and	r24, r24
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     9b8:	2c f4       	brge	.+10     	; 0x9c4 <_Z12hd44780_initv+0x3b6>
     9ba:	81 e0       	ldi	r24, 0x01	; 1
     9bc:	90 e0       	ldi	r25, 0x00	; 0
     9be:	9d af       	std	Y+61, r25	; 0x3d
     9c0:	8c af       	std	Y+60, r24	; 0x3c
     9c2:	3b c0       	rjmp	.+118    	; 0xa3a <_Z12hd44780_initv+0x42c>
     9c4:	20 e0       	ldi	r18, 0x00	; 0
     9c6:	3f ef       	ldi	r19, 0xFF	; 255
     9c8:	4f e7       	ldi	r20, 0x7F	; 127
     9ca:	57 e4       	ldi	r21, 0x47	; 71
     9cc:	68 ad       	ldd	r22, Y+56	; 0x38
     9ce:	79 ad       	ldd	r23, Y+57	; 0x39
     9d0:	8a ad       	ldd	r24, Y+58	; 0x3a
     9d2:	9b ad       	ldd	r25, Y+59	; 0x3b
     9d4:	44 d6       	rcall	.+3208   	; 0x165e <__gesf2>
     9d6:	18 16       	cp	r1, r24
	if (__tmp < 1.0)
     9d8:	3c f5       	brge	.+78     	; 0xa28 <_Z12hd44780_initv+0x41a>
     9da:	20 e0       	ldi	r18, 0x00	; 0
     9dc:	30 e0       	ldi	r19, 0x00	; 0
     9de:	40 e2       	ldi	r20, 0x20	; 32
     9e0:	51 e4       	ldi	r21, 0x41	; 65
     9e2:	6c a9       	ldd	r22, Y+52	; 0x34
     9e4:	7d a9       	ldd	r23, Y+53	; 0x35
     9e6:	8e a9       	ldd	r24, Y+54	; 0x36
     9e8:	9f a9       	ldd	r25, Y+55	; 0x37
     9ea:	3d d6       	rcall	.+3194   	; 0x1666 <__mulsf3>
     9ec:	dc 01       	movw	r26, r24
     9ee:	cb 01       	movw	r24, r22
		__ticks = 1;
     9f0:	bc 01       	movw	r22, r24
     9f2:	cd 01       	movw	r24, r26
     9f4:	93 d5       	rcall	.+2854   	; 0x151c <__fixunssfsi>
     9f6:	dc 01       	movw	r26, r24
     9f8:	cb 01       	movw	r24, r22
	else if (__tmp > 65535)
     9fa:	9d af       	std	Y+61, r25	; 0x3d
     9fc:	8c af       	std	Y+60, r24	; 0x3c
     9fe:	0f c0       	rjmp	.+30     	; 0xa1e <_Z12hd44780_initv+0x410>
     a00:	88 ec       	ldi	r24, 0xC8	; 200
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	9f af       	std	Y+63, r25	; 0x3f
     a06:	8e af       	std	Y+62, r24	; 0x3e
     a08:	8e ad       	ldd	r24, Y+62	; 0x3e
     a0a:	9f ad       	ldd	r25, Y+63	; 0x3f
     a0c:	01 97       	sbiw	r24, 0x01	; 1
     a0e:	f1 f7       	brne	.-4      	; 0xa0c <_Z12hd44780_initv+0x3fe>
     a10:	9f af       	std	Y+63, r25	; 0x3f
     a12:	8e af       	std	Y+62, r24	; 0x3e
     a14:	8c ad       	ldd	r24, Y+60	; 0x3c
     a16:	9d ad       	ldd	r25, Y+61	; 0x3d
     a18:	01 97       	sbiw	r24, 0x01	; 1
     a1a:	9d af       	std	Y+61, r25	; 0x3d
     a1c:	8c af       	std	Y+60, r24	; 0x3c
     a1e:	8c ad       	ldd	r24, Y+60	; 0x3c
     a20:	9d ad       	ldd	r25, Y+61	; 0x3d
     a22:	00 97       	sbiw	r24, 0x00	; 0
     a24:	69 f7       	brne	.-38     	; 0xa00 <_Z12hd44780_initv+0x3f2>
     a26:	3b c0       	rjmp	.+118    	; 0xa9e <_Z12hd44780_initv+0x490>
     a28:	68 ad       	ldd	r22, Y+56	; 0x38
     a2a:	79 ad       	ldd	r23, Y+57	; 0x39
     a2c:	8a ad       	ldd	r24, Y+58	; 0x3a
     a2e:	9b ad       	ldd	r25, Y+59	; 0x3b
     a30:	75 d5       	rcall	.+2794   	; 0x151c <__fixunssfsi>
     a32:	dc 01       	movw	r26, r24
     a34:	cb 01       	movw	r24, r22
     a36:	9d af       	std	Y+61, r25	; 0x3d
     a38:	8c af       	std	Y+60, r24	; 0x3c
     a3a:	ce 01       	movw	r24, r28
     a3c:	80 5c       	subi	r24, 0xC0	; 192
     a3e:	9f 4f       	sbci	r25, 0xFF	; 255
     a40:	2c ad       	ldd	r18, Y+60	; 0x3c
     a42:	3d ad       	ldd	r19, Y+61	; 0x3d
     a44:	fc 01       	movw	r30, r24
     a46:	31 83       	std	Z+1, r19	; 0x01
     a48:	20 83       	st	Z, r18
     a4a:	ce 01       	movw	r24, r28
     a4c:	80 5c       	subi	r24, 0xC0	; 192
     a4e:	9f 4f       	sbci	r25, 0xFF	; 255
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     a50:	fc 01       	movw	r30, r24
     a52:	80 81       	ld	r24, Z
     a54:	91 81       	ldd	r25, Z+1	; 0x01
     a56:	01 97       	sbiw	r24, 0x01	; 1
     a58:	f1 f7       	brne	.-4      	; 0xa56 <_Z12hd44780_initv+0x448>
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     a5a:	9e 01       	movw	r18, r28
     a5c:	20 5c       	subi	r18, 0xC0	; 192
     a5e:	3f 4f       	sbci	r19, 0xFF	; 255
     a60:	f9 01       	movw	r30, r18
     a62:	91 83       	std	Z+1, r25	; 0x01
     a64:	80 83       	st	Z, r24
     a66:	1b c0       	rjmp	.+54     	; 0xa9e <_Z12hd44780_initv+0x490>
     a68:	6f a5       	ldd	r22, Y+47	; 0x2f
     a6a:	78 a9       	ldd	r23, Y+48	; 0x30
     a6c:	89 a9       	ldd	r24, Y+49	; 0x31
     a6e:	9a a9       	ldd	r25, Y+50	; 0x32
     a70:	55 d5       	rcall	.+2730   	; 0x151c <__fixunssfsi>
     a72:	dc 01       	movw	r26, r24
     a74:	cb 01       	movw	r24, r22
     a76:	8b ab       	std	Y+51, r24	; 0x33
     a78:	ce 01       	movw	r24, r28
     a7a:	8e 5b       	subi	r24, 0xBE	; 190
     a7c:	9f 4f       	sbci	r25, 0xFF	; 255
     a7e:	2b a9       	ldd	r18, Y+51	; 0x33
     a80:	fc 01       	movw	r30, r24
     a82:	20 83       	st	Z, r18
     a84:	ce 01       	movw	r24, r28
     a86:	8e 5b       	subi	r24, 0xBE	; 190
     a88:	9f 4f       	sbci	r25, 0xFF	; 255
     a8a:	fc 01       	movw	r30, r24
     a8c:	80 81       	ld	r24, Z
     a8e:	28 2f       	mov	r18, r24
     a90:	2a 95       	dec	r18
     a92:	f1 f7       	brne	.-4      	; 0xa90 <_Z12hd44780_initv+0x482>
     a94:	ce 01       	movw	r24, r28
     a96:	8e 5b       	subi	r24, 0xBE	; 190
     a98:	9f 4f       	sbci	r25, 0xFF	; 255
     a9a:	fc 01       	movw	r30, r24
     a9c:	20 83       	st	Z, r18
     a9e:	60 e0       	ldi	r22, 0x00	; 0
     aa0:	82 e0       	ldi	r24, 0x02	; 2
     aa2:	2a db       	rcall	.-2476   	; 0xf8 <_ZL17hd44780_outnibblehh>
     aa4:	80 e0       	ldi	r24, 0x00	; 0
     aa6:	a1 dd       	rcall	.-1214   	; 0x5ea <_Z18hd44780_wait_readyb>
     aa8:	60 e0       	ldi	r22, 0x00	; 0
     aaa:	88 e2       	ldi	r24, 0x28	; 40
     aac:	41 dc       	rcall	.-1918   	; 0x330 <_Z15hd44780_outbytehh>
     aae:	80 e0       	ldi	r24, 0x00	; 0
     ab0:	9c dd       	rcall	.-1224   	; 0x5ea <_Z18hd44780_wait_readyb>
     ab2:	60 e0       	ldi	r22, 0x00	; 0
     ab4:	88 e0       	ldi	r24, 0x08	; 8
     ab6:	3c dc       	rcall	.-1928   	; 0x330 <_Z15hd44780_outbytehh>
     ab8:	80 e0       	ldi	r24, 0x00	; 0
     aba:	97 dd       	rcall	.-1234   	; 0x5ea <_Z18hd44780_wait_readyb>
     abc:	ce 5b       	subi	r28, 0xBE	; 190
     abe:	df 4f       	sbci	r29, 0xFF	; 255
     ac0:	0f b6       	in	r0, 0x3f	; 63
     ac2:	f8 94       	cli
     ac4:	de bf       	out	0x3e, r29	; 62
     ac6:	0f be       	out	0x3f, r0	; 63
     ac8:	cd bf       	out	0x3d, r28	; 61
     aca:	df 91       	pop	r29
     acc:	cf 91       	pop	r28
     ace:	08 95       	ret

00000ad0 <_ZN3LCDC1Ev>:
 */

#include "LCD.h"
#include "hd44780/hd44780.c"

LCD::LCD() {
     ad0:	cf 93       	push	r28
     ad2:	df 93       	push	r29
     ad4:	00 d0       	rcall	.+0      	; 0xad6 <_ZN3LCDC1Ev+0x6>
     ad6:	cd b7       	in	r28, 0x3d	; 61
     ad8:	de b7       	in	r29, 0x3e	; 62
     ada:	9a 83       	std	Y+2, r25	; 0x02
     adc:	89 83       	std	Y+1, r24	; 0x01
	//defaults
	this->cursor.x = 0;
     ade:	89 81       	ldd	r24, Y+1	; 0x01
     ae0:	9a 81       	ldd	r25, Y+2	; 0x02
     ae2:	fc 01       	movw	r30, r24
     ae4:	10 82       	st	Z, r1
	this->cursor.y = 0;
     ae6:	89 81       	ldd	r24, Y+1	; 0x01
     ae8:	9a 81       	ldd	r25, Y+2	; 0x02
     aea:	fc 01       	movw	r30, r24
     aec:	11 82       	std	Z+1, r1	; 0x01
	this->cursor.visible = true;
     aee:	89 81       	ldd	r24, Y+1	; 0x01
     af0:	9a 81       	ldd	r25, Y+2	; 0x02
     af2:	21 e0       	ldi	r18, 0x01	; 1
     af4:	fc 01       	movw	r30, r24
     af6:	22 83       	std	Z+2, r18	; 0x02
	this->cursor.blinking = true;
     af8:	89 81       	ldd	r24, Y+1	; 0x01
     afa:	9a 81       	ldd	r25, Y+2	; 0x02
     afc:	21 e0       	ldi	r18, 0x01	; 1
     afe:	fc 01       	movw	r30, r24
     b00:	23 83       	std	Z+3, r18	; 0x03
	this->twoLines = true;
     b02:	89 81       	ldd	r24, Y+1	; 0x01
     b04:	9a 81       	ldd	r25, Y+2	; 0x02
     b06:	21 e0       	ldi	r18, 0x01	; 1
     b08:	fc 01       	movw	r30, r24
     b0a:	26 83       	std	Z+6, r18	; 0x06
	this->font5x10 = false;
     b0c:	89 81       	ldd	r24, Y+1	; 0x01
     b0e:	9a 81       	ldd	r25, Y+2	; 0x02
     b10:	fc 01       	movw	r30, r24
     b12:	15 82       	std	Z+5, r1	; 0x05
	this->eightBitPatch = false;
     b14:	89 81       	ldd	r24, Y+1	; 0x01
     b16:	9a 81       	ldd	r25, Y+2	; 0x02
     b18:	fc 01       	movw	r30, r24
     b1a:	14 82       	std	Z+4, r1	; 0x04
}
     b1c:	0f 90       	pop	r0
     b1e:	0f 90       	pop	r0
     b20:	df 91       	pop	r29
     b22:	cf 91       	pop	r28
     b24:	08 95       	ret

00000b26 <_ZN3LCD4initEv>:
LCD::~LCD() {
	// TODO Auto-generated destructor stub
}

void LCD::init()
{
     b26:	cf 93       	push	r28
     b28:	df 93       	push	r29
     b2a:	00 d0       	rcall	.+0      	; 0xb2c <_ZN3LCD4initEv+0x6>
     b2c:	cd b7       	in	r28, 0x3d	; 61
     b2e:	de b7       	in	r29, 0x3e	; 62
     b30:	9a 83       	std	Y+2, r25	; 0x02
     b32:	89 83       	std	Y+1, r24	; 0x01
	//todo
	hd44780_init();
     b34:	6c dd       	rcall	.-1320   	; 0x60e <_Z12hd44780_initv>
     b36:	60 e0       	ldi	r22, 0x00	; 0

	hd44780_outcmd(HD44780_CLR); //clear screen
     b38:	81 e0       	ldi	r24, 0x01	; 1
     b3a:	fa db       	rcall	.-2060   	; 0x330 <_Z15hd44780_outbytehh>
     b3c:	81 e0       	ldi	r24, 0x01	; 1
     b3e:	55 dd       	rcall	.-1366   	; 0x5ea <_Z18hd44780_wait_readyb>
	hd44780_wait_ready(true);
     b40:	60 e0       	ldi	r22, 0x00	; 0
     b42:	86 e0       	ldi	r24, 0x06	; 6
     b44:	f5 db       	rcall	.-2070   	; 0x330 <_Z15hd44780_outbytehh>

	hd44780_outcmd(HD44780_ENTMODE(1, 0)); //set address auto-inc, non-auto display shift
     b46:	80 e0       	ldi	r24, 0x00	; 0
     b48:	50 dd       	rcall	.-1376   	; 0x5ea <_Z18hd44780_wait_readyb>
     b4a:	89 81       	ldd	r24, Y+1	; 0x01
     b4c:	9a 81       	ldd	r25, Y+2	; 0x02
	hd44780_wait_ready(false);
     b4e:	fc 01       	movw	r30, r24
     b50:	82 81       	ldd	r24, Z+2	; 0x02
     b52:	88 23       	and	r24, r24

	hd44780_outcmd(HD44780_DISPCTL(1, this->cursor.visible, this->cursor.blinking)); //disp on, curs on, curs blink on
     b54:	11 f0       	breq	.+4      	; 0xb5a <_ZN3LCD4initEv+0x34>
     b56:	2e e0       	ldi	r18, 0x0E	; 14
     b58:	01 c0       	rjmp	.+2      	; 0xb5c <_ZN3LCD4initEv+0x36>
     b5a:	2c e0       	ldi	r18, 0x0C	; 12
     b5c:	89 81       	ldd	r24, Y+1	; 0x01
     b5e:	9a 81       	ldd	r25, Y+2	; 0x02
     b60:	fc 01       	movw	r30, r24
     b62:	83 81       	ldd	r24, Z+3	; 0x03
     b64:	88 23       	and	r24, r24
     b66:	11 f0       	breq	.+4      	; 0xb6c <_ZN3LCD4initEv+0x46>
     b68:	81 e0       	ldi	r24, 0x01	; 1
     b6a:	01 c0       	rjmp	.+2      	; 0xb6e <_ZN3LCD4initEv+0x48>
     b6c:	80 e0       	ldi	r24, 0x00	; 0
     b6e:	82 2b       	or	r24, r18
     b70:	60 e0       	ldi	r22, 0x00	; 0
     b72:	de db       	rcall	.-2116   	; 0x330 <_Z15hd44780_outbytehh>
     b74:	80 e0       	ldi	r24, 0x00	; 0
     b76:	39 dd       	rcall	.-1422   	; 0x5ea <_Z18hd44780_wait_readyb>
     b78:	89 81       	ldd	r24, Y+1	; 0x01
     b7a:	9a 81       	ldd	r25, Y+2	; 0x02
     b7c:	fc 01       	movw	r30, r24
     b7e:	84 81       	ldd	r24, Z+4	; 0x04
	hd44780_wait_ready(false);
     b80:	88 23       	and	r24, r24
     b82:	11 f0       	breq	.+4      	; 0xb88 <_ZN3LCD4initEv+0x62>
     b84:	20 e3       	ldi	r18, 0x30	; 48

	hd44780_outcmd(HD44780_FNSET(this->eightBitPatch, this->twoLines, this->font5x10));
     b86:	01 c0       	rjmp	.+2      	; 0xb8a <_ZN3LCD4initEv+0x64>
     b88:	20 e2       	ldi	r18, 0x20	; 32
     b8a:	89 81       	ldd	r24, Y+1	; 0x01
     b8c:	9a 81       	ldd	r25, Y+2	; 0x02
     b8e:	fc 01       	movw	r30, r24
     b90:	86 81       	ldd	r24, Z+6	; 0x06
     b92:	88 23       	and	r24, r24
     b94:	11 f0       	breq	.+4      	; 0xb9a <_ZN3LCD4initEv+0x74>
     b96:	88 e0       	ldi	r24, 0x08	; 8
     b98:	01 c0       	rjmp	.+2      	; 0xb9c <_ZN3LCD4initEv+0x76>
     b9a:	80 e0       	ldi	r24, 0x00	; 0
     b9c:	28 2b       	or	r18, r24
     b9e:	89 81       	ldd	r24, Y+1	; 0x01
     ba0:	9a 81       	ldd	r25, Y+2	; 0x02
     ba2:	fc 01       	movw	r30, r24
     ba4:	85 81       	ldd	r24, Z+5	; 0x05
     ba6:	88 23       	and	r24, r24
     ba8:	11 f0       	breq	.+4      	; 0xbae <_ZN3LCD4initEv+0x88>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	01 c0       	rjmp	.+2      	; 0xbb0 <_ZN3LCD4initEv+0x8a>
     bae:	80 e0       	ldi	r24, 0x00	; 0
     bb0:	82 2b       	or	r24, r18
     bb2:	60 e0       	ldi	r22, 0x00	; 0
     bb4:	bd db       	rcall	.-2182   	; 0x330 <_Z15hd44780_outbytehh>
     bb6:	80 e0       	ldi	r24, 0x00	; 0
     bb8:	18 dd       	rcall	.-1488   	; 0x5ea <_Z18hd44780_wait_readyb>
     bba:	89 81       	ldd	r24, Y+1	; 0x01
     bbc:	9a 81       	ldd	r25, Y+2	; 0x02
     bbe:	fc 01       	movw	r30, r24
     bc0:	10 82       	st	Z, r1
     bc2:	89 81       	ldd	r24, Y+1	; 0x01
     bc4:	9a 81       	ldd	r25, Y+2	; 0x02
	hd44780_wait_ready(false);
     bc6:	fc 01       	movw	r30, r24
     bc8:	11 82       	std	Z+1, r1	; 0x01
     bca:	0f 90       	pop	r0

	this->cursor.x = 0;
     bcc:	0f 90       	pop	r0
     bce:	df 91       	pop	r29
     bd0:	cf 91       	pop	r28
     bd2:	08 95       	ret

00000bd4 <_ZN3LCD8sendCharEh>:
	//todo
	hd44780_powerdown();
}

void LCD::sendChar(uint8_t c)
{
     bd4:	cf 93       	push	r28
     bd6:	df 93       	push	r29
     bd8:	00 d0       	rcall	.+0      	; 0xbda <_ZN3LCD8sendCharEh+0x6>
     bda:	1f 92       	push	r1
     bdc:	cd b7       	in	r28, 0x3d	; 61
     bde:	de b7       	in	r29, 0x3e	; 62
     be0:	9a 83       	std	Y+2, r25	; 0x02
     be2:	89 83       	std	Y+1, r24	; 0x01
     be4:	6b 83       	std	Y+3, r22	; 0x03
	/*
	 * every other \n char clears LCD.
	 */
	//todo

	if(c == '\n')
     be6:	8b 81       	ldd	r24, Y+3	; 0x03
     be8:	8a 30       	cpi	r24, 0x0A	; 10
     bea:	91 f4       	brne	.+36     	; 0xc10 <_ZN3LCD8sendCharEh+0x3c>
	{
		if(this->cursor.y == 1)
     bec:	89 81       	ldd	r24, Y+1	; 0x01
     bee:	9a 81       	ldd	r25, Y+2	; 0x02
     bf0:	fc 01       	movw	r30, r24
     bf2:	81 81       	ldd	r24, Z+1	; 0x01
     bf4:	81 30       	cpi	r24, 0x01	; 1
     bf6:	31 f4       	brne	.+12     	; 0xc04 <_ZN3LCD8sendCharEh+0x30>
		{
			//clear screen and go back to (0, 0)
			//this->clear();
			this->goToPos(0, 0);
     bf8:	89 81       	ldd	r24, Y+1	; 0x01
     bfa:	9a 81       	ldd	r25, Y+2	; 0x02
     bfc:	40 e0       	ldi	r20, 0x00	; 0
     bfe:	60 e0       	ldi	r22, 0x00	; 0
     c00:	b8 d1       	rcall	.+880    	; 0xf72 <_ZN3LCD7goToPosEhh>
     c02:	0e c0       	rjmp	.+28     	; 0xc20 <_ZN3LCD8sendCharEh+0x4c>
     c04:	89 81       	ldd	r24, Y+1	; 0x01
		}
		else
			this->goToPos(1, 0);
     c06:	9a 81       	ldd	r25, Y+2	; 0x02
     c08:	40 e0       	ldi	r20, 0x00	; 0
     c0a:	61 e0       	ldi	r22, 0x01	; 1
     c0c:	b2 d1       	rcall	.+868    	; 0xf72 <_ZN3LCD7goToPosEhh>
     c0e:	08 c0       	rjmp	.+16     	; 0xc20 <_ZN3LCD8sendCharEh+0x4c>
     c10:	61 e0       	ldi	r22, 0x01	; 1
     c12:	8b 81       	ldd	r24, Y+3	; 0x03
	}
	else
	{
		hd44780_outdata(c);
     c14:	8d db       	rcall	.-2278   	; 0x330 <_Z15hd44780_outbytehh>
     c16:	89 81       	ldd	r24, Y+1	; 0x01
     c18:	9a 81       	ldd	r25, Y+2	; 0x02
     c1a:	39 da       	rcall	.-2958   	; 0x8e <_ZN3LCD6Cursor4iterEv>
		this->cursor.iter();
     c1c:	80 e0       	ldi	r24, 0x00	; 0
     c1e:	e5 dc       	rcall	.-1590   	; 0x5ea <_Z18hd44780_wait_readyb>
     c20:	0f 90       	pop	r0
     c22:	0f 90       	pop	r0
		hd44780_wait_ready(false);
     c24:	0f 90       	pop	r0
     c26:	df 91       	pop	r29
     c28:	cf 91       	pop	r28
	}

}
     c2a:	08 95       	ret

00000c2c <_ZN3LCD8sendTextEPKch>:

void LCD::sendText(const char * txt, uint8_t delay)
{
     c2c:	cf 93       	push	r28
     c2e:	df 93       	push	r29
     c30:	cd b7       	in	r28, 0x3d	; 61
     c32:	de b7       	in	r29, 0x3e	; 62
     c34:	64 97       	sbiw	r28, 0x14	; 20
     c36:	0f b6       	in	r0, 0x3f	; 63
     c38:	f8 94       	cli
     c3a:	de bf       	out	0x3e, r29	; 62
     c3c:	0f be       	out	0x3f, r0	; 63
     c3e:	cd bf       	out	0x3d, r28	; 61
     c40:	99 8b       	std	Y+17, r25	; 0x11
     c42:	88 8b       	std	Y+16, r24	; 0x10
     c44:	7b 8b       	std	Y+19, r23	; 0x13
     c46:	6a 8b       	std	Y+18, r22	; 0x12
     c48:	4c 8b       	std	Y+20, r20	; 0x14
	while(*txt)
     c4a:	87 c0       	rjmp	.+270    	; 0xd5a <_ZN3LCD8sendTextEPKch+0x12e>
	{
		this->sendChar(*txt++);
     c4c:	8a 89       	ldd	r24, Y+18	; 0x12
     c4e:	9b 89       	ldd	r25, Y+19	; 0x13
     c50:	9c 01       	movw	r18, r24
     c52:	2f 5f       	subi	r18, 0xFF	; 255
     c54:	3f 4f       	sbci	r19, 0xFF	; 255
     c56:	3b 8b       	std	Y+19, r19	; 0x13
     c58:	2a 8b       	std	Y+18, r18	; 0x12
     c5a:	fc 01       	movw	r30, r24
     c5c:	20 81       	ld	r18, Z
     c5e:	88 89       	ldd	r24, Y+16	; 0x10
     c60:	99 89       	ldd	r25, Y+17	; 0x11
     c62:	62 2f       	mov	r22, r18
     c64:	b7 df       	rcall	.-146    	; 0xbd4 <_ZN3LCD8sendCharEh>
     c66:	8c 89       	ldd	r24, Y+20	; 0x14

		if(delay != 0)
     c68:	88 23       	and	r24, r24
     c6a:	09 f4       	brne	.+2      	; 0xc6e <_ZN3LCD8sendTextEPKch+0x42>
     c6c:	76 c0       	rjmp	.+236    	; 0xd5a <_ZN3LCD8sendTextEPKch+0x12e>
     c6e:	19 82       	std	Y+1, r1	; 0x01
		{
			for(uint8_t i = 0; i < delay; i++)
     c70:	6f c0       	rjmp	.+222    	; 0xd50 <_ZN3LCD8sendTextEPKch+0x124>
     c72:	80 e0       	ldi	r24, 0x00	; 0
     c74:	90 e0       	ldi	r25, 0x00	; 0
     c76:	a0 e8       	ldi	r26, 0x80	; 128
     c78:	bf e3       	ldi	r27, 0x3F	; 63
     c7a:	8a 83       	std	Y+2, r24	; 0x02
     c7c:	9b 83       	std	Y+3, r25	; 0x03
     c7e:	ac 83       	std	Y+4, r26	; 0x04
     c80:	bd 83       	std	Y+5, r27	; 0x05
     c82:	20 e0       	ldi	r18, 0x00	; 0
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     c84:	30 e0       	ldi	r19, 0x00	; 0
     c86:	4a ef       	ldi	r20, 0xFA	; 250
     c88:	54 e4       	ldi	r21, 0x44	; 68
     c8a:	6a 81       	ldd	r22, Y+2	; 0x02
     c8c:	7b 81       	ldd	r23, Y+3	; 0x03
     c8e:	8c 81       	ldd	r24, Y+4	; 0x04
     c90:	9d 81       	ldd	r25, Y+5	; 0x05
     c92:	e9 d4       	rcall	.+2514   	; 0x1666 <__mulsf3>
     c94:	dc 01       	movw	r26, r24
     c96:	cb 01       	movw	r24, r22
     c98:	8e 83       	std	Y+6, r24	; 0x06
     c9a:	9f 83       	std	Y+7, r25	; 0x07
     c9c:	a8 87       	std	Y+8, r26	; 0x08
     c9e:	b9 87       	std	Y+9, r27	; 0x09
     ca0:	20 e0       	ldi	r18, 0x00	; 0
     ca2:	30 e0       	ldi	r19, 0x00	; 0
	if (__tmp < 1.0)
     ca4:	40 e8       	ldi	r20, 0x80	; 128
     ca6:	5f e3       	ldi	r21, 0x3F	; 63
     ca8:	6e 81       	ldd	r22, Y+6	; 0x06
     caa:	7f 81       	ldd	r23, Y+7	; 0x07
     cac:	88 85       	ldd	r24, Y+8	; 0x08
     cae:	99 85       	ldd	r25, Y+9	; 0x09
     cb0:	c9 d3       	rcall	.+1938   	; 0x1444 <__cmpsf2>
     cb2:	88 23       	and	r24, r24
     cb4:	2c f4       	brge	.+10     	; 0xcc0 <_ZN3LCD8sendTextEPKch+0x94>
     cb6:	81 e0       	ldi	r24, 0x01	; 1
     cb8:	90 e0       	ldi	r25, 0x00	; 0
     cba:	9b 87       	std	Y+11, r25	; 0x0b
		__ticks = 1;
     cbc:	8a 87       	std	Y+10, r24	; 0x0a
     cbe:	3b c0       	rjmp	.+118    	; 0xd36 <_ZN3LCD8sendTextEPKch+0x10a>
     cc0:	20 e0       	ldi	r18, 0x00	; 0
     cc2:	3f ef       	ldi	r19, 0xFF	; 255
     cc4:	4f e7       	ldi	r20, 0x7F	; 127
	else if (__tmp > 65535)
     cc6:	57 e4       	ldi	r21, 0x47	; 71
     cc8:	6e 81       	ldd	r22, Y+6	; 0x06
     cca:	7f 81       	ldd	r23, Y+7	; 0x07
     ccc:	88 85       	ldd	r24, Y+8	; 0x08
     cce:	99 85       	ldd	r25, Y+9	; 0x09
     cd0:	c6 d4       	rcall	.+2444   	; 0x165e <__gesf2>
     cd2:	18 16       	cp	r1, r24
     cd4:	3c f5       	brge	.+78     	; 0xd24 <_ZN3LCD8sendTextEPKch+0xf8>
     cd6:	20 e0       	ldi	r18, 0x00	; 0
     cd8:	30 e0       	ldi	r19, 0x00	; 0
     cda:	40 e2       	ldi	r20, 0x20	; 32
     cdc:	51 e4       	ldi	r21, 0x41	; 65
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     cde:	6a 81       	ldd	r22, Y+2	; 0x02
     ce0:	7b 81       	ldd	r23, Y+3	; 0x03
     ce2:	8c 81       	ldd	r24, Y+4	; 0x04
     ce4:	9d 81       	ldd	r25, Y+5	; 0x05
     ce6:	bf d4       	rcall	.+2430   	; 0x1666 <__mulsf3>
     ce8:	dc 01       	movw	r26, r24
     cea:	cb 01       	movw	r24, r22
     cec:	bc 01       	movw	r22, r24
     cee:	cd 01       	movw	r24, r26
     cf0:	15 d4       	rcall	.+2090   	; 0x151c <__fixunssfsi>
     cf2:	dc 01       	movw	r26, r24
     cf4:	cb 01       	movw	r24, r22
     cf6:	9b 87       	std	Y+11, r25	; 0x0b
     cf8:	8a 87       	std	Y+10, r24	; 0x0a
     cfa:	0f c0       	rjmp	.+30     	; 0xd1a <_ZN3LCD8sendTextEPKch+0xee>
     cfc:	88 ec       	ldi	r24, 0xC8	; 200
     cfe:	90 e0       	ldi	r25, 0x00	; 0
     d00:	9d 87       	std	Y+13, r25	; 0x0d
     d02:	8c 87       	std	Y+12, r24	; 0x0c
     d04:	8c 85       	ldd	r24, Y+12	; 0x0c
     d06:	9d 85       	ldd	r25, Y+13	; 0x0d
     d08:	01 97       	sbiw	r24, 0x01	; 1
     d0a:	f1 f7       	brne	.-4      	; 0xd08 <_ZN3LCD8sendTextEPKch+0xdc>
     d0c:	9d 87       	std	Y+13, r25	; 0x0d
     d0e:	8c 87       	std	Y+12, r24	; 0x0c
     d10:	8a 85       	ldd	r24, Y+10	; 0x0a
     d12:	9b 85       	ldd	r25, Y+11	; 0x0b
     d14:	01 97       	sbiw	r24, 0x01	; 1
     d16:	9b 87       	std	Y+11, r25	; 0x0b
     d18:	8a 87       	std	Y+10, r24	; 0x0a
     d1a:	8a 85       	ldd	r24, Y+10	; 0x0a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d1c:	9b 85       	ldd	r25, Y+11	; 0x0b
     d1e:	00 97       	sbiw	r24, 0x00	; 0
     d20:	69 f7       	brne	.-38     	; 0xcfc <_ZN3LCD8sendTextEPKch+0xd0>
     d22:	13 c0       	rjmp	.+38     	; 0xd4a <_ZN3LCD8sendTextEPKch+0x11e>
     d24:	6e 81       	ldd	r22, Y+6	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d26:	7f 81       	ldd	r23, Y+7	; 0x07
     d28:	88 85       	ldd	r24, Y+8	; 0x08
     d2a:	99 85       	ldd	r25, Y+9	; 0x09
     d2c:	f7 d3       	rcall	.+2030   	; 0x151c <__fixunssfsi>
     d2e:	dc 01       	movw	r26, r24
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d30:	cb 01       	movw	r24, r22
     d32:	9b 87       	std	Y+11, r25	; 0x0b
     d34:	8a 87       	std	Y+10, r24	; 0x0a
     d36:	8a 85       	ldd	r24, Y+10	; 0x0a
     d38:	9b 85       	ldd	r25, Y+11	; 0x0b
     d3a:	9f 87       	std	Y+15, r25	; 0x0f
     d3c:	8e 87       	std	Y+14, r24	; 0x0e
     d3e:	8e 85       	ldd	r24, Y+14	; 0x0e
     d40:	9f 85       	ldd	r25, Y+15	; 0x0f
     d42:	01 97       	sbiw	r24, 0x01	; 1
     d44:	f1 f7       	brne	.-4      	; 0xd42 <_ZN3LCD8sendTextEPKch+0x116>
     d46:	9f 87       	std	Y+15, r25	; 0x0f
     d48:	8e 87       	std	Y+14, r24	; 0x0e
     d4a:	89 81       	ldd	r24, Y+1	; 0x01
     d4c:	8f 5f       	subi	r24, 0xFF	; 255
     d4e:	89 83       	std	Y+1, r24	; 0x01
     d50:	99 81       	ldd	r25, Y+1	; 0x01
     d52:	8c 89       	ldd	r24, Y+20	; 0x14
     d54:	98 17       	cp	r25, r24
     d56:	08 f4       	brcc	.+2      	; 0xd5a <_ZN3LCD8sendTextEPKch+0x12e>
     d58:	8c cf       	rjmp	.-232    	; 0xc72 <_ZN3LCD8sendTextEPKch+0x46>
     d5a:	8a 89       	ldd	r24, Y+18	; 0x12
     d5c:	9b 89       	ldd	r25, Y+19	; 0x13
     d5e:	fc 01       	movw	r30, r24
     d60:	80 81       	ld	r24, Z
     d62:	88 23       	and	r24, r24
     d64:	09 f0       	breq	.+2      	; 0xd68 <_ZN3LCD8sendTextEPKch+0x13c>
     d66:	72 cf       	rjmp	.-284    	; 0xc4c <_ZN3LCD8sendTextEPKch+0x20>

}

void LCD::sendText(const char * txt, uint8_t delay)
{
	while(*txt)
     d68:	64 96       	adiw	r28, 0x14	; 20
     d6a:	0f b6       	in	r0, 0x3f	; 63
     d6c:	f8 94       	cli
     d6e:	de bf       	out	0x3e, r29	; 62
     d70:	0f be       	out	0x3f, r0	; 63
     d72:	cd bf       	out	0x3d, r28	; 61
     d74:	df 91       	pop	r29
		{
			for(uint8_t i = 0; i < delay; i++)
				_delay_ms(1);
		}
	}
}
     d76:	cf 91       	pop	r28
     d78:	08 95       	ret

00000d7a <_ZN3LCD7sendIntElh>:

void LCD::sendInt(int32_t num, uint8_t msDelay)
{
     d7a:	cf 92       	push	r12
     d7c:	df 92       	push	r13
     d7e:	ef 92       	push	r14
     d80:	ff 92       	push	r15
     d82:	0f 93       	push	r16
     d84:	1f 93       	push	r17
     d86:	cf 93       	push	r28
     d88:	df 93       	push	r29
     d8a:	cd b7       	in	r28, 0x3d	; 61
     d8c:	de b7       	in	r29, 0x3e	; 62
     d8e:	6d 97       	sbiw	r28, 0x1d	; 29
     d90:	0f b6       	in	r0, 0x3f	; 63
     d92:	f8 94       	cli
     d94:	de bf       	out	0x3e, r29	; 62
     d96:	0f be       	out	0x3f, r0	; 63
     d98:	cd bf       	out	0x3d, r28	; 61
     d9a:	9c 87       	std	Y+12, r25	; 0x0c
     d9c:	8b 87       	std	Y+11, r24	; 0x0b
     d9e:	4d 87       	std	Y+13, r20	; 0x0d
     da0:	5e 87       	std	Y+14, r21	; 0x0e
     da2:	6f 87       	std	Y+15, r22	; 0x0f
     da4:	78 8b       	std	Y+16, r23	; 0x10
     da6:	29 8b       	std	Y+17, r18	; 0x11
		buffer[0] = '-';

	buffer[len] = 0;

	this->sendText(buffer,  msDelay);
}
     da8:	0d b7       	in	r16, 0x3d	; 61
     daa:	1e b7       	in	r17, 0x3e	; 62
     dac:	8d b7       	in	r24, 0x3d	; 61
     dae:	9e b7       	in	r25, 0x3e	; 62
     db0:	7c 01       	movw	r14, r24
	}
}

void LCD::sendInt(int32_t num, uint8_t msDelay)
{
	uint8_t len = 1;
     db2:	81 e0       	ldi	r24, 0x01	; 1
     db4:	89 83       	std	Y+1, r24	; 0x01
	int32_t temp;

	if(num < 0)
     db6:	8d 85       	ldd	r24, Y+13	; 0x0d
     db8:	9e 85       	ldd	r25, Y+14	; 0x0e
     dba:	af 85       	ldd	r26, Y+15	; 0x0f
     dbc:	b8 89       	ldd	r27, Y+16	; 0x10
     dbe:	bb 23       	and	r27, r27
     dc0:	9c f4       	brge	.+38     	; 0xde8 <_ZN3LCD7sendIntElh+0x6e>
	{
		temp = -num;
     dc2:	8d 85       	ldd	r24, Y+13	; 0x0d
     dc4:	9e 85       	ldd	r25, Y+14	; 0x0e
     dc6:	af 85       	ldd	r26, Y+15	; 0x0f
     dc8:	b8 89       	ldd	r27, Y+16	; 0x10
     dca:	b0 95       	com	r27
     dcc:	a0 95       	com	r26
     dce:	90 95       	com	r25
     dd0:	81 95       	neg	r24
     dd2:	9f 4f       	sbci	r25, 0xFF	; 255
     dd4:	af 4f       	sbci	r26, 0xFF	; 255
     dd6:	bf 4f       	sbci	r27, 0xFF	; 255
     dd8:	8a 83       	std	Y+2, r24	; 0x02
     dda:	9b 83       	std	Y+3, r25	; 0x03
     ddc:	ac 83       	std	Y+4, r26	; 0x04
     dde:	bd 83       	std	Y+5, r27	; 0x05
		len++;
     de0:	89 81       	ldd	r24, Y+1	; 0x01
     de2:	8f 5f       	subi	r24, 0xFF	; 255
     de4:	89 83       	std	Y+1, r24	; 0x01
     de6:	08 c0       	rjmp	.+16     	; 0xdf8 <_ZN3LCD7sendIntElh+0x7e>
	}
	else
		temp = num;
     de8:	8d 85       	ldd	r24, Y+13	; 0x0d
     dea:	9e 85       	ldd	r25, Y+14	; 0x0e
     dec:	af 85       	ldd	r26, Y+15	; 0x0f
     dee:	b8 89       	ldd	r27, Y+16	; 0x10
     df0:	8a 83       	std	Y+2, r24	; 0x02
     df2:	9b 83       	std	Y+3, r25	; 0x03
     df4:	ac 83       	std	Y+4, r26	; 0x04
     df6:	bd 83       	std	Y+5, r27	; 0x05

	while((temp /= 10) != 0)
     df8:	03 c0       	rjmp	.+6      	; 0xe00 <_ZN3LCD7sendIntElh+0x86>
		len++;
     dfa:	89 81       	ldd	r24, Y+1	; 0x01
     dfc:	8f 5f       	subi	r24, 0xFF	; 255
     dfe:	89 83       	std	Y+1, r24	; 0x01
		len++;
	}
	else
		temp = num;

	while((temp /= 10) != 0)
     e00:	8a 81       	ldd	r24, Y+2	; 0x02
     e02:	9b 81       	ldd	r25, Y+3	; 0x03
     e04:	ac 81       	ldd	r26, Y+4	; 0x04
     e06:	bd 81       	ldd	r27, Y+5	; 0x05
     e08:	2a e0       	ldi	r18, 0x0A	; 10
     e0a:	30 e0       	ldi	r19, 0x00	; 0
     e0c:	40 e0       	ldi	r20, 0x00	; 0
     e0e:	50 e0       	ldi	r21, 0x00	; 0
     e10:	bc 01       	movw	r22, r24
     e12:	cd 01       	movw	r24, r26
     e14:	ec d2       	rcall	.+1496   	; 0x13ee <__divmodsi4>
     e16:	da 01       	movw	r26, r20
     e18:	c9 01       	movw	r24, r18
     e1a:	8a 83       	std	Y+2, r24	; 0x02
     e1c:	9b 83       	std	Y+3, r25	; 0x03
     e1e:	ac 83       	std	Y+4, r26	; 0x04
     e20:	bd 83       	std	Y+5, r27	; 0x05
     e22:	21 e0       	ldi	r18, 0x01	; 1
     e24:	8a 81       	ldd	r24, Y+2	; 0x02
     e26:	9b 81       	ldd	r25, Y+3	; 0x03
     e28:	ac 81       	ldd	r26, Y+4	; 0x04
     e2a:	bd 81       	ldd	r27, Y+5	; 0x05
     e2c:	00 97       	sbiw	r24, 0x00	; 0
     e2e:	a1 05       	cpc	r26, r1
     e30:	b1 05       	cpc	r27, r1
     e32:	09 f4       	brne	.+2      	; 0xe36 <_ZN3LCD7sendIntElh+0xbc>
     e34:	20 e0       	ldi	r18, 0x00	; 0
     e36:	22 23       	and	r18, r18
     e38:	01 f7       	brne	.-64     	; 0xdfa <_ZN3LCD7sendIntElh+0x80>
     e3a:	89 81       	ldd	r24, Y+1	; 0x01
		len++;

	char buffer[len + 1];
     e3c:	88 2f       	mov	r24, r24
     e3e:	90 e0       	ldi	r25, 0x00	; 0
     e40:	98 87       	std	Y+8, r25	; 0x08
     e42:	8f 83       	std	Y+7, r24	; 0x07
     e44:	01 96       	adiw	r24, 0x01	; 1
     e46:	2d b7       	in	r18, 0x3d	; 61
     e48:	3e b7       	in	r19, 0x3e	; 62
     e4a:	28 1b       	sub	r18, r24
     e4c:	39 0b       	sbc	r19, r25
     e4e:	0f b6       	in	r0, 0x3f	; 63
     e50:	f8 94       	cli
     e52:	3e bf       	out	0x3e, r19	; 62
     e54:	0f be       	out	0x3f, r0	; 63
     e56:	2d bf       	out	0x3d, r18	; 61
     e58:	8d b7       	in	r24, 0x3d	; 61
     e5a:	9e b7       	in	r25, 0x3e	; 62
     e5c:	01 96       	adiw	r24, 0x01	; 1
     e5e:	9a 87       	std	Y+10, r25	; 0x0a
     e60:	89 87       	std	Y+9, r24	; 0x09
     e62:	8d 85       	ldd	r24, Y+13	; 0x0d

	if(num < 0)
     e64:	9e 85       	ldd	r25, Y+14	; 0x0e
     e66:	af 85       	ldd	r26, Y+15	; 0x0f
     e68:	b8 89       	ldd	r27, Y+16	; 0x10
     e6a:	bb 23       	and	r27, r27
     e6c:	84 f4       	brge	.+32     	; 0xe8e <_ZN3LCD7sendIntElh+0x114>
     e6e:	8d 85       	ldd	r24, Y+13	; 0x0d
		temp = -num;
     e70:	9e 85       	ldd	r25, Y+14	; 0x0e
     e72:	af 85       	ldd	r26, Y+15	; 0x0f
     e74:	b8 89       	ldd	r27, Y+16	; 0x10
     e76:	b0 95       	com	r27
     e78:	a0 95       	com	r26
     e7a:	90 95       	com	r25
     e7c:	81 95       	neg	r24
     e7e:	9f 4f       	sbci	r25, 0xFF	; 255
     e80:	af 4f       	sbci	r26, 0xFF	; 255
     e82:	bf 4f       	sbci	r27, 0xFF	; 255
     e84:	8a 83       	std	Y+2, r24	; 0x02
     e86:	9b 83       	std	Y+3, r25	; 0x03
     e88:	ac 83       	std	Y+4, r26	; 0x04
     e8a:	bd 83       	std	Y+5, r27	; 0x05
     e8c:	08 c0       	rjmp	.+16     	; 0xe9e <_ZN3LCD7sendIntElh+0x124>
     e8e:	8d 85       	ldd	r24, Y+13	; 0x0d
	else
		temp = num;
     e90:	9e 85       	ldd	r25, Y+14	; 0x0e
     e92:	af 85       	ldd	r26, Y+15	; 0x0f
     e94:	b8 89       	ldd	r27, Y+16	; 0x10
     e96:	8a 83       	std	Y+2, r24	; 0x02
     e98:	9b 83       	std	Y+3, r25	; 0x03
     e9a:	ac 83       	std	Y+4, r26	; 0x04
     e9c:	bd 83       	std	Y+5, r27	; 0x05
     e9e:	89 81       	ldd	r24, Y+1	; 0x01

	for(uint8_t i = len; i > 0; i--, temp /= 10)
     ea0:	8e 83       	std	Y+6, r24	; 0x06
     ea2:	30 c0       	rjmp	.+96     	; 0xf04 <_ZN3LCD7sendIntElh+0x18a>
     ea4:	8e 81       	ldd	r24, Y+6	; 0x06
		buffer[i - 1] = temp % 10 + 48;
     ea6:	88 2f       	mov	r24, r24
     ea8:	90 e0       	ldi	r25, 0x00	; 0
     eaa:	6c 01       	movw	r12, r24
     eac:	31 e0       	ldi	r19, 0x01	; 1
     eae:	c3 1a       	sub	r12, r19
     eb0:	d1 08       	sbc	r13, r1
     eb2:	8a 81       	ldd	r24, Y+2	; 0x02
     eb4:	9b 81       	ldd	r25, Y+3	; 0x03
     eb6:	ac 81       	ldd	r26, Y+4	; 0x04
     eb8:	bd 81       	ldd	r27, Y+5	; 0x05
     eba:	2a e0       	ldi	r18, 0x0A	; 10
     ebc:	30 e0       	ldi	r19, 0x00	; 0
     ebe:	40 e0       	ldi	r20, 0x00	; 0
     ec0:	50 e0       	ldi	r21, 0x00	; 0
     ec2:	bc 01       	movw	r22, r24
     ec4:	cd 01       	movw	r24, r26
     ec6:	93 d2       	rcall	.+1318   	; 0x13ee <__divmodsi4>
     ec8:	dc 01       	movw	r26, r24
     eca:	cb 01       	movw	r24, r22
     ecc:	20 e3       	ldi	r18, 0x30	; 48
     ece:	28 0f       	add	r18, r24
     ed0:	89 85       	ldd	r24, Y+9	; 0x09
     ed2:	9a 85       	ldd	r25, Y+10	; 0x0a
     ed4:	8c 0d       	add	r24, r12
     ed6:	9d 1d       	adc	r25, r13
     ed8:	fc 01       	movw	r30, r24
     eda:	20 83       	st	Z, r18
     edc:	8e 81       	ldd	r24, Y+6	; 0x06
     ede:	81 50       	subi	r24, 0x01	; 1
	if(num < 0)
		temp = -num;
	else
		temp = num;

	for(uint8_t i = len; i > 0; i--, temp /= 10)
     ee0:	8e 83       	std	Y+6, r24	; 0x06
     ee2:	8a 81       	ldd	r24, Y+2	; 0x02
     ee4:	9b 81       	ldd	r25, Y+3	; 0x03
     ee6:	ac 81       	ldd	r26, Y+4	; 0x04
     ee8:	bd 81       	ldd	r27, Y+5	; 0x05
     eea:	2a e0       	ldi	r18, 0x0A	; 10
     eec:	30 e0       	ldi	r19, 0x00	; 0
     eee:	40 e0       	ldi	r20, 0x00	; 0
     ef0:	50 e0       	ldi	r21, 0x00	; 0
     ef2:	bc 01       	movw	r22, r24
     ef4:	cd 01       	movw	r24, r26
     ef6:	7b d2       	rcall	.+1270   	; 0x13ee <__divmodsi4>
     ef8:	da 01       	movw	r26, r20
     efa:	c9 01       	movw	r24, r18
     efc:	8a 83       	std	Y+2, r24	; 0x02
     efe:	9b 83       	std	Y+3, r25	; 0x03
     f00:	ac 83       	std	Y+4, r26	; 0x04
     f02:	bd 83       	std	Y+5, r27	; 0x05
     f04:	8e 81       	ldd	r24, Y+6	; 0x06
     f06:	88 23       	and	r24, r24
     f08:	69 f6       	brne	.-102    	; 0xea4 <_ZN3LCD7sendIntElh+0x12a>
     f0a:	8d 85       	ldd	r24, Y+13	; 0x0d
     f0c:	9e 85       	ldd	r25, Y+14	; 0x0e
     f0e:	af 85       	ldd	r26, Y+15	; 0x0f
		buffer[i - 1] = temp % 10 + 48;

	if(num < 0)
     f10:	b8 89       	ldd	r27, Y+16	; 0x10
     f12:	bb 23       	and	r27, r27
     f14:	2c f4       	brge	.+10     	; 0xf20 <_ZN3LCD7sendIntElh+0x1a6>
     f16:	89 85       	ldd	r24, Y+9	; 0x09
     f18:	9a 85       	ldd	r25, Y+10	; 0x0a
     f1a:	2d e2       	ldi	r18, 0x2D	; 45
		buffer[0] = '-';
     f1c:	fc 01       	movw	r30, r24
     f1e:	20 83       	st	Z, r18
     f20:	89 81       	ldd	r24, Y+1	; 0x01
     f22:	88 2f       	mov	r24, r24
     f24:	90 e0       	ldi	r25, 0x00	; 0

	buffer[len] = 0;
     f26:	29 85       	ldd	r18, Y+9	; 0x09
     f28:	3a 85       	ldd	r19, Y+10	; 0x0a
     f2a:	82 0f       	add	r24, r18
     f2c:	93 1f       	adc	r25, r19
     f2e:	fc 01       	movw	r30, r24
     f30:	10 82       	st	Z, r1
     f32:	29 85       	ldd	r18, Y+9	; 0x09
     f34:	3a 85       	ldd	r19, Y+10	; 0x0a
     f36:	8b 85       	ldd	r24, Y+11	; 0x0b

	this->sendText(buffer,  msDelay);
     f38:	9c 85       	ldd	r25, Y+12	; 0x0c
     f3a:	49 89       	ldd	r20, Y+17	; 0x11
     f3c:	b9 01       	movw	r22, r18
     f3e:	76 de       	rcall	.-788    	; 0xc2c <_ZN3LCD8sendTextEPKch>
     f40:	0f b6       	in	r0, 0x3f	; 63
     f42:	f8 94       	cli
     f44:	fe be       	out	0x3e, r15	; 62
     f46:	0f be       	out	0x3f, r0	; 63
     f48:	ed be       	out	0x3d, r14	; 61
     f4a:	0f b6       	in	r0, 0x3f	; 63
     f4c:	f8 94       	cli
     f4e:	1e bf       	out	0x3e, r17	; 62
     f50:	0f be       	out	0x3f, r0	; 63
}
     f52:	0d bf       	out	0x3d, r16	; 61
     f54:	6d 96       	adiw	r28, 0x1d	; 29
     f56:	0f b6       	in	r0, 0x3f	; 63
     f58:	f8 94       	cli
     f5a:	de bf       	out	0x3e, r29	; 62
     f5c:	0f be       	out	0x3f, r0	; 63
     f5e:	cd bf       	out	0x3d, r28	; 61
     f60:	df 91       	pop	r29
     f62:	cf 91       	pop	r28
     f64:	1f 91       	pop	r17
     f66:	0f 91       	pop	r16
     f68:	ff 90       	pop	r15
     f6a:	ef 90       	pop	r14
     f6c:	df 90       	pop	r13
     f6e:	cf 90       	pop	r12
     f70:	08 95       	ret

00000f72 <_ZN3LCD7goToPosEhh>:
{
	this->sendChar(digit + 48);
}

void LCD::goToPos(uint8_t line, uint8_t pos)
{
     f72:	cf 93       	push	r28
     f74:	df 93       	push	r29
     f76:	00 d0       	rcall	.+0      	; 0xf78 <_ZN3LCD7goToPosEhh+0x6>
     f78:	00 d0       	rcall	.+0      	; 0xf7a <_ZN3LCD7goToPosEhh+0x8>
     f7a:	cd b7       	in	r28, 0x3d	; 61
     f7c:	de b7       	in	r29, 0x3e	; 62
     f7e:	9a 83       	std	Y+2, r25	; 0x02
     f80:	89 83       	std	Y+1, r24	; 0x01
     f82:	6b 83       	std	Y+3, r22	; 0x03
     f84:	4c 83       	std	Y+4, r20	; 0x04
	if(line < 2 && pos < 40 && !(this->cursor.x == pos && this->cursor.y == line))
     f86:	8b 81       	ldd	r24, Y+3	; 0x03
     f88:	82 30       	cpi	r24, 0x02	; 2
     f8a:	40 f5       	brcc	.+80     	; 0xfdc <_ZN3LCD7goToPosEhh+0x6a>
     f8c:	8c 81       	ldd	r24, Y+4	; 0x04
     f8e:	88 32       	cpi	r24, 0x28	; 40
     f90:	28 f5       	brcc	.+74     	; 0xfdc <_ZN3LCD7goToPosEhh+0x6a>
     f92:	89 81       	ldd	r24, Y+1	; 0x01
     f94:	9a 81       	ldd	r25, Y+2	; 0x02
     f96:	fc 01       	movw	r30, r24
     f98:	90 81       	ld	r25, Z
     f9a:	8c 81       	ldd	r24, Y+4	; 0x04
     f9c:	98 17       	cp	r25, r24
     f9e:	39 f4       	brne	.+14     	; 0xfae <_ZN3LCD7goToPosEhh+0x3c>
     fa0:	89 81       	ldd	r24, Y+1	; 0x01
     fa2:	9a 81       	ldd	r25, Y+2	; 0x02
     fa4:	fc 01       	movw	r30, r24
     fa6:	91 81       	ldd	r25, Z+1	; 0x01
     fa8:	8b 81       	ldd	r24, Y+3	; 0x03
     faa:	98 17       	cp	r25, r24
     fac:	b9 f0       	breq	.+46     	; 0xfdc <_ZN3LCD7goToPosEhh+0x6a>
	{
		hd44780_outcmd(0x80 | (pos + (0x40 * line)));
     fae:	8b 81       	ldd	r24, Y+3	; 0x03
     fb0:	98 2f       	mov	r25, r24
     fb2:	92 95       	swap	r25
     fb4:	99 0f       	add	r25, r25
     fb6:	99 0f       	add	r25, r25
     fb8:	90 7c       	andi	r25, 0xC0	; 192
     fba:	8c 81       	ldd	r24, Y+4	; 0x04
     fbc:	89 0f       	add	r24, r25
     fbe:	80 68       	ori	r24, 0x80	; 128
     fc0:	60 e0       	ldi	r22, 0x00	; 0
     fc2:	b6 d9       	rcall	.-3220   	; 0x330 <_Z15hd44780_outbytehh>
     fc4:	89 81       	ldd	r24, Y+1	; 0x01

		this->cursor.x = pos;
     fc6:	9a 81       	ldd	r25, Y+2	; 0x02
     fc8:	2c 81       	ldd	r18, Y+4	; 0x04
     fca:	fc 01       	movw	r30, r24
     fcc:	20 83       	st	Z, r18
     fce:	89 81       	ldd	r24, Y+1	; 0x01
		this->cursor.y = line;
     fd0:	9a 81       	ldd	r25, Y+2	; 0x02
     fd2:	2b 81       	ldd	r18, Y+3	; 0x03
     fd4:	fc 01       	movw	r30, r24
     fd6:	21 83       	std	Z+1, r18	; 0x01
     fd8:	80 e0       	ldi	r24, 0x00	; 0

		hd44780_wait_ready(false);
     fda:	07 db       	rcall	.-2546   	; 0x5ea <_Z18hd44780_wait_readyb>
     fdc:	0f 90       	pop	r0
     fde:	0f 90       	pop	r0
	}
}
     fe0:	0f 90       	pop	r0
     fe2:	0f 90       	pop	r0
     fe4:	df 91       	pop	r29
     fe6:	cf 91       	pop	r28
     fe8:	08 95       	ret

00000fea <_ZN3LCD19setCursorVisibilityEbb>:

	this->goToPos(0, 0);
}

void LCD::setCursorVisibility(bool visible, bool blinking)
{
     fea:	cf 93       	push	r28
     fec:	df 93       	push	r29
     fee:	00 d0       	rcall	.+0      	; 0xff0 <_ZN3LCD19setCursorVisibilityEbb+0x6>
     ff0:	00 d0       	rcall	.+0      	; 0xff2 <_ZN3LCD19setCursorVisibilityEbb+0x8>
     ff2:	cd b7       	in	r28, 0x3d	; 61
     ff4:	de b7       	in	r29, 0x3e	; 62
     ff6:	9a 83       	std	Y+2, r25	; 0x02
     ff8:	89 83       	std	Y+1, r24	; 0x01
     ffa:	6b 83       	std	Y+3, r22	; 0x03
     ffc:	4c 83       	std	Y+4, r20	; 0x04
	this->cursor.visible = visible;
     ffe:	89 81       	ldd	r24, Y+1	; 0x01
    1000:	9a 81       	ldd	r25, Y+2	; 0x02
    1002:	2b 81       	ldd	r18, Y+3	; 0x03
    1004:	fc 01       	movw	r30, r24
    1006:	22 83       	std	Z+2, r18	; 0x02
	this->cursor.blinking = blinking;
    1008:	89 81       	ldd	r24, Y+1	; 0x01
    100a:	9a 81       	ldd	r25, Y+2	; 0x02
    100c:	2c 81       	ldd	r18, Y+4	; 0x04
    100e:	fc 01       	movw	r30, r24
    1010:	23 83       	std	Z+3, r18	; 0x03
}
    1012:	0f 90       	pop	r0
    1014:	0f 90       	pop	r0
    1016:	0f 90       	pop	r0
    1018:	0f 90       	pop	r0
    101a:	df 91       	pop	r29
    101c:	cf 91       	pop	r28
    101e:	08 95       	ret

00001020 <_ZN3LCD11setFunctionEbbb>:

void LCD::setFunction(bool eightBitPatch, bool twoLines, bool font5x10)
{
    1020:	cf 93       	push	r28
    1022:	df 93       	push	r29
    1024:	00 d0       	rcall	.+0      	; 0x1026 <_ZN3LCD11setFunctionEbbb+0x6>
    1026:	00 d0       	rcall	.+0      	; 0x1028 <_ZN3LCD11setFunctionEbbb+0x8>
    1028:	1f 92       	push	r1
    102a:	cd b7       	in	r28, 0x3d	; 61
    102c:	de b7       	in	r29, 0x3e	; 62
    102e:	9a 83       	std	Y+2, r25	; 0x02
    1030:	89 83       	std	Y+1, r24	; 0x01
    1032:	6b 83       	std	Y+3, r22	; 0x03
    1034:	4c 83       	std	Y+4, r20	; 0x04
    1036:	2d 83       	std	Y+5, r18	; 0x05
	this->eightBitPatch = eightBitPatch;
    1038:	89 81       	ldd	r24, Y+1	; 0x01
    103a:	9a 81       	ldd	r25, Y+2	; 0x02
    103c:	2b 81       	ldd	r18, Y+3	; 0x03
    103e:	fc 01       	movw	r30, r24
    1040:	24 83       	std	Z+4, r18	; 0x04
	this->twoLines = twoLines;
    1042:	89 81       	ldd	r24, Y+1	; 0x01
    1044:	9a 81       	ldd	r25, Y+2	; 0x02
    1046:	2c 81       	ldd	r18, Y+4	; 0x04
    1048:	fc 01       	movw	r30, r24
    104a:	26 83       	std	Z+6, r18	; 0x06
	this->font5x10 = font5x10;
    104c:	89 81       	ldd	r24, Y+1	; 0x01
    104e:	9a 81       	ldd	r25, Y+2	; 0x02
    1050:	2d 81       	ldd	r18, Y+5	; 0x05
    1052:	fc 01       	movw	r30, r24
    1054:	25 83       	std	Z+5, r18	; 0x05
}
    1056:	0f 90       	pop	r0
    1058:	0f 90       	pop	r0
    105a:	0f 90       	pop	r0
    105c:	0f 90       	pop	r0
    105e:	0f 90       	pop	r0
    1060:	df 91       	pop	r29
    1062:	cf 91       	pop	r28
    1064:	08 95       	ret

00001066 <main>:
#include "LCD/LCD.h"



int main()
{
    1066:	cf 93       	push	r28
    1068:	df 93       	push	r29
    106a:	cd b7       	in	r28, 0x3d	; 61
    106c:	de b7       	in	r29, 0x3e	; 62
    106e:	e0 97       	sbiw	r28, 0x30	; 48
    1070:	0f b6       	in	r0, 0x3f	; 63
    1072:	f8 94       	cli
    1074:	de bf       	out	0x3e, r29	; 62
    1076:	0f be       	out	0x3f, r0	; 63
    1078:	cd bf       	out	0x3d, r28	; 61
	DDRD |= _BV(7);
    107a:	81 e3       	ldi	r24, 0x31	; 49
    107c:	90 e0       	ldi	r25, 0x00	; 0
    107e:	21 e3       	ldi	r18, 0x31	; 49
    1080:	30 e0       	ldi	r19, 0x00	; 0
    1082:	f9 01       	movw	r30, r18
    1084:	20 81       	ld	r18, Z
    1086:	20 68       	ori	r18, 0x80	; 128
    1088:	fc 01       	movw	r30, r24
    108a:	20 83       	st	Z, r18
	PORTD = 1 << 7;
    108c:	82 e3       	ldi	r24, 0x32	; 50
    108e:	90 e0       	ldi	r25, 0x00	; 0
    1090:	20 e8       	ldi	r18, 0x80	; 128
    1092:	fc 01       	movw	r30, r24
    1094:	20 83       	st	Z, r18
	uint32_t freq = 0;//Hz;
    1096:	19 82       	std	Y+1, r1	; 0x01
    1098:	1a 82       	std	Y+2, r1	; 0x02
    109a:	1b 82       	std	Y+3, r1	; 0x03
    109c:	1c 82       	std	Y+4, r1	; 0x04
	int8_t dir = 1;
    109e:	81 e0       	ldi	r24, 0x01	; 1
    10a0:	8d 83       	std	Y+5, r24	; 0x05
	uint32_t iter = 0;
    10a2:	1e 82       	std	Y+6, r1	; 0x06
    10a4:	1f 82       	std	Y+7, r1	; 0x07
    10a6:	18 86       	std	Y+8, r1	; 0x08
    10a8:	19 86       	std	Y+9, r1	; 0x09
	LCD lcd;
    10aa:	ce 01       	movw	r24, r28
    10ac:	86 96       	adiw	r24, 0x26	; 38
    10ae:	10 dd       	rcall	.-1504   	; 0xad0 <_ZN3LCDC1Ev>
    10b0:	ce 01       	movw	r24, r28
	lcd.setCursorVisibility(true, false);
    10b2:	86 96       	adiw	r24, 0x26	; 38
    10b4:	40 e0       	ldi	r20, 0x00	; 0
    10b6:	61 e0       	ldi	r22, 0x01	; 1
    10b8:	98 df       	rcall	.-208    	; 0xfea <_ZN3LCD19setCursorVisibilityEbb>
    10ba:	ce 01       	movw	r24, r28
    10bc:	86 96       	adiw	r24, 0x26	; 38
	lcd.setFunction(false, true, true);
    10be:	21 e0       	ldi	r18, 0x01	; 1
    10c0:	41 e0       	ldi	r20, 0x01	; 1
    10c2:	60 e0       	ldi	r22, 0x00	; 0
    10c4:	ad df       	rcall	.-166    	; 0x1020 <_ZN3LCD11setFunctionEbbb>
    10c6:	ce 01       	movw	r24, r28
    10c8:	86 96       	adiw	r24, 0x26	; 38
    10ca:	2d dd       	rcall	.-1446   	; 0xb26 <_ZN3LCD4initEv>
	lcd.init();
    10cc:	ce 01       	movw	r24, r28
    10ce:	86 96       	adiw	r24, 0x26	; 38
    10d0:	40 e0       	ldi	r20, 0x00	; 0
    10d2:	60 e6       	ldi	r22, 0x60	; 96
	lcd.sendText("Init...");
    10d4:	70 e0       	ldi	r23, 0x00	; 0
    10d6:	aa dd       	rcall	.-1196   	; 0xc2c <_ZN3LCD8sendTextEPKch>
    10d8:	2e 81       	ldd	r18, Y+6	; 0x06
    10da:	3f 81       	ldd	r19, Y+7	; 0x07
    10dc:	48 85       	ldd	r20, Y+8	; 0x08
    10de:	59 85       	ldd	r21, Y+9	; 0x09
    10e0:	82 e3       	ldi	r24, 0x32	; 50
	while(1)
	{
		if(iter * 50 == freq)
    10e2:	90 e0       	ldi	r25, 0x00	; 0
    10e4:	dc 01       	movw	r26, r24
    10e6:	57 d1       	rcall	.+686    	; 0x1396 <__muluhisi3>
    10e8:	9b 01       	movw	r18, r22
    10ea:	ac 01       	movw	r20, r24
    10ec:	89 81       	ldd	r24, Y+1	; 0x01
    10ee:	9a 81       	ldd	r25, Y+2	; 0x02
    10f0:	ab 81       	ldd	r26, Y+3	; 0x03
    10f2:	bc 81       	ldd	r27, Y+4	; 0x04
    10f4:	28 17       	cp	r18, r24
    10f6:	39 07       	cpc	r19, r25
    10f8:	4a 07       	cpc	r20, r26
    10fa:	5b 07       	cpc	r21, r27
    10fc:	09 f0       	breq	.+2      	; 0x1100 <main+0x9a>
    10fe:	54 c0       	rjmp	.+168    	; 0x11a8 <main+0x142>
    1100:	89 81       	ldd	r24, Y+1	; 0x01
    1102:	9a 81       	ldd	r25, Y+2	; 0x02
    1104:	ab 81       	ldd	r26, Y+3	; 0x03
    1106:	bc 81       	ldd	r27, Y+4	; 0x04
    1108:	80 32       	cpi	r24, 0x20	; 32
    110a:	fe e4       	ldi	r31, 0x4E	; 78
		{
			if(freq >= 20000)
    110c:	9f 07       	cpc	r25, r31
    110e:	a1 05       	cpc	r26, r1
    1110:	b1 05       	cpc	r27, r1
    1112:	18 f0       	brcs	.+6      	; 0x111a <main+0xb4>
    1114:	8f ef       	ldi	r24, 0xFF	; 255
    1116:	8d 83       	std	Y+5, r24	; 0x05
    1118:	0c c0       	rjmp	.+24     	; 0x1132 <main+0xcc>
    111a:	89 81       	ldd	r24, Y+1	; 0x01
    111c:	9a 81       	ldd	r25, Y+2	; 0x02
    111e:	ab 81       	ldd	r26, Y+3	; 0x03
				dir = -1;
    1120:	bc 81       	ldd	r27, Y+4	; 0x04
    1122:	89 3e       	cpi	r24, 0xE9	; 233
    1124:	23 e0       	ldi	r18, 0x03	; 3
			else if(freq <= 1000)
    1126:	92 07       	cpc	r25, r18
    1128:	a1 05       	cpc	r26, r1
    112a:	b1 05       	cpc	r27, r1
    112c:	10 f4       	brcc	.+4      	; 0x1132 <main+0xcc>
    112e:	81 e0       	ldi	r24, 0x01	; 1
    1130:	8d 83       	std	Y+5, r24	; 0x05
    1132:	8d 81       	ldd	r24, Y+5	; 0x05
    1134:	99 27       	eor	r25, r25
    1136:	87 fd       	sbrc	r24, 7
    1138:	90 95       	com	r25
				dir = 1;
    113a:	a9 2f       	mov	r26, r25
    113c:	b9 2f       	mov	r27, r25

			freq += dir * 1;
    113e:	29 81       	ldd	r18, Y+1	; 0x01
    1140:	3a 81       	ldd	r19, Y+2	; 0x02
    1142:	4b 81       	ldd	r20, Y+3	; 0x03
    1144:	5c 81       	ldd	r21, Y+4	; 0x04
    1146:	82 0f       	add	r24, r18
    1148:	93 1f       	adc	r25, r19
    114a:	a4 1f       	adc	r26, r20
    114c:	b5 1f       	adc	r27, r21
    114e:	89 83       	std	Y+1, r24	; 0x01
    1150:	9a 83       	std	Y+2, r25	; 0x02
    1152:	ab 83       	std	Y+3, r26	; 0x03
    1154:	bc 83       	std	Y+4, r27	; 0x04
    1156:	1e 82       	std	Y+6, r1	; 0x06
    1158:	1f 82       	std	Y+7, r1	; 0x07
    115a:	18 86       	std	Y+8, r1	; 0x08
    115c:	19 86       	std	Y+9, r1	; 0x09
    115e:	ce 01       	movw	r24, r28
    1160:	86 96       	adiw	r24, 0x26	; 38
			iter = 0;
    1162:	40 e0       	ldi	r20, 0x00	; 0
    1164:	68 e6       	ldi	r22, 0x68	; 104
    1166:	70 e0       	ldi	r23, 0x00	; 0
    1168:	61 dd       	rcall	.-1342   	; 0xc2c <_ZN3LCD8sendTextEPKch>
			//lcd.clear();
			lcd.sendText("\nCPU: ");
    116a:	ce 01       	movw	r24, r28
    116c:	86 96       	adiw	r24, 0x26	; 38
    116e:	20 e0       	ldi	r18, 0x00	; 0
    1170:	40 e0       	ldi	r20, 0x00	; 0
    1172:	52 e1       	ldi	r21, 0x12	; 18
    1174:	6a e7       	ldi	r22, 0x7A	; 122
    1176:	70 e0       	ldi	r23, 0x00	; 0
			lcd.sendInt(F_CPU);
    1178:	00 de       	rcall	.-1024   	; 0xd7a <_ZN3LCD7sendIntElh>
    117a:	ce 01       	movw	r24, r28
    117c:	86 96       	adiw	r24, 0x26	; 38
    117e:	40 e0       	ldi	r20, 0x00	; 0
    1180:	6f e6       	ldi	r22, 0x6F	; 111
    1182:	70 e0       	ldi	r23, 0x00	; 0
    1184:	53 dd       	rcall	.-1370   	; 0xc2c <_ZN3LCD8sendTextEPKch>
    1186:	89 81       	ldd	r24, Y+1	; 0x01
    1188:	9a 81       	ldd	r25, Y+2	; 0x02
			lcd.sendText("Hz\nFreq: ");
    118a:	ab 81       	ldd	r26, Y+3	; 0x03
    118c:	bc 81       	ldd	r27, Y+4	; 0x04
    118e:	fe 01       	movw	r30, r28
    1190:	b6 96       	adiw	r30, 0x26	; 38
    1192:	20 e0       	ldi	r18, 0x00	; 0
    1194:	ac 01       	movw	r20, r24
    1196:	bd 01       	movw	r22, r26
			lcd.sendInt(freq);
    1198:	cf 01       	movw	r24, r30
    119a:	ef dd       	rcall	.-1058   	; 0xd7a <_ZN3LCD7sendIntElh>
    119c:	ce 01       	movw	r24, r28
    119e:	86 96       	adiw	r24, 0x26	; 38
    11a0:	40 e0       	ldi	r20, 0x00	; 0
    11a2:	69 e7       	ldi	r22, 0x79	; 121
    11a4:	70 e0       	ldi	r23, 0x00	; 0
    11a6:	42 dd       	rcall	.-1404   	; 0xc2c <_ZN3LCD8sendTextEPKch>
    11a8:	82 e3       	ldi	r24, 0x32	; 50
    11aa:	90 e0       	ldi	r25, 0x00	; 0
    11ac:	22 e3       	ldi	r18, 0x32	; 50
    11ae:	30 e0       	ldi	r19, 0x00	; 0
			lcd.sendText("Hz ");
    11b0:	f9 01       	movw	r30, r18
    11b2:	20 81       	ld	r18, Z
    11b4:	20 95       	com	r18
    11b6:	fc 01       	movw	r30, r24
    11b8:	20 83       	st	Z, r18
    11ba:	1a 86       	std	Y+10, r1	; 0x0a
    11bc:	1b 86       	std	Y+11, r1	; 0x0b

		}

		PORTD = ~PORTD;
    11be:	1c 86       	std	Y+12, r1	; 0x0c
    11c0:	1d 86       	std	Y+13, r1	; 0x0d
    11c2:	be c0       	rjmp	.+380    	; 0x1340 <main+0x2da>
    11c4:	80 e0       	ldi	r24, 0x00	; 0
    11c6:	90 e0       	ldi	r25, 0x00	; 0
    11c8:	a0 e8       	ldi	r26, 0x80	; 128
    11ca:	bf e3       	ldi	r27, 0x3F	; 63
    11cc:	8e 87       	std	Y+14, r24	; 0x0e
    11ce:	9f 87       	std	Y+15, r25	; 0x0f
		for(uint32_t i = 0; i < 1000000 / (2UL * freq); i++)
    11d0:	a8 8b       	std	Y+16, r26	; 0x10
    11d2:	b9 8b       	std	Y+17, r27	; 0x11
    11d4:	2b ea       	ldi	r18, 0xAB	; 171
    11d6:	3a ea       	ldi	r19, 0xAA	; 170
    11d8:	4a e2       	ldi	r20, 0x2A	; 42
    11da:	50 e4       	ldi	r21, 0x40	; 64
    11dc:	6e 85       	ldd	r22, Y+14	; 0x0e
    11de:	7f 85       	ldd	r23, Y+15	; 0x0f
    11e0:	88 89       	ldd	r24, Y+16	; 0x10
    11e2:	99 89       	ldd	r25, Y+17	; 0x11
    11e4:	40 d2       	rcall	.+1152   	; 0x1666 <__mulsf3>
    11e6:	dc 01       	movw	r26, r24
    11e8:	cb 01       	movw	r24, r22
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 3e6) * __us;
    11ea:	8a 8b       	std	Y+18, r24	; 0x12
    11ec:	9b 8b       	std	Y+19, r25	; 0x13
    11ee:	ac 8b       	std	Y+20, r26	; 0x14
    11f0:	bd 8b       	std	Y+21, r27	; 0x15
    11f2:	20 e0       	ldi	r18, 0x00	; 0
    11f4:	30 e0       	ldi	r19, 0x00	; 0
    11f6:	40 e8       	ldi	r20, 0x80	; 128
    11f8:	5f e3       	ldi	r21, 0x3F	; 63
    11fa:	6a 89       	ldd	r22, Y+18	; 0x12
    11fc:	7b 89       	ldd	r23, Y+19	; 0x13
    11fe:	8c 89       	ldd	r24, Y+20	; 0x14
    1200:	9d 89       	ldd	r25, Y+21	; 0x15
    1202:	20 d1       	rcall	.+576    	; 0x1444 <__cmpsf2>
    1204:	88 23       	and	r24, r24
    1206:	1c f4       	brge	.+6      	; 0x120e <main+0x1a8>
    1208:	81 e0       	ldi	r24, 0x01	; 1
	if (__tmp < 1.0)
    120a:	8e 8b       	std	Y+22, r24	; 0x16
    120c:	88 c0       	rjmp	.+272    	; 0x131e <main+0x2b8>
    120e:	20 e0       	ldi	r18, 0x00	; 0
    1210:	30 e0       	ldi	r19, 0x00	; 0
    1212:	4f e7       	ldi	r20, 0x7F	; 127
    1214:	53 e4       	ldi	r21, 0x43	; 67
    1216:	6a 89       	ldd	r22, Y+18	; 0x12
    1218:	7b 89       	ldd	r23, Y+19	; 0x13
    121a:	8c 89       	ldd	r24, Y+20	; 0x14
    121c:	9d 89       	ldd	r25, Y+21	; 0x15
    121e:	1f d2       	rcall	.+1086   	; 0x165e <__gesf2>
    1220:	18 16       	cp	r1, r24
		__ticks = 1;
    1222:	0c f0       	brlt	.+2      	; 0x1226 <main+0x1c0>
    1224:	74 c0       	rjmp	.+232    	; 0x130e <main+0x2a8>
    1226:	20 e0       	ldi	r18, 0x00	; 0
	else if (__tmp > 255)
    1228:	30 e0       	ldi	r19, 0x00	; 0
    122a:	4a e7       	ldi	r20, 0x7A	; 122
    122c:	54 e4       	ldi	r21, 0x44	; 68
    122e:	6e 85       	ldd	r22, Y+14	; 0x0e
    1230:	7f 85       	ldd	r23, Y+15	; 0x0f
    1232:	88 89       	ldd	r24, Y+16	; 0x10
    1234:	99 89       	ldd	r25, Y+17	; 0x11
    1236:	0a d1       	rcall	.+532    	; 0x144c <__divsf3>
    1238:	dc 01       	movw	r26, r24
    123a:	cb 01       	movw	r24, r22
    123c:	8f 8b       	std	Y+23, r24	; 0x17
    123e:	98 8f       	std	Y+24, r25	; 0x18
    1240:	a9 8f       	std	Y+25, r26	; 0x19
	{
		_delay_ms(__us / 1000.0);
    1242:	ba 8f       	std	Y+26, r27	; 0x1a
    1244:	20 e0       	ldi	r18, 0x00	; 0
    1246:	30 e0       	ldi	r19, 0x00	; 0
    1248:	4a ef       	ldi	r20, 0xFA	; 250
    124a:	54 e4       	ldi	r21, 0x44	; 68
    124c:	6f 89       	ldd	r22, Y+23	; 0x17
    124e:	78 8d       	ldd	r23, Y+24	; 0x18
    1250:	89 8d       	ldd	r24, Y+25	; 0x19
    1252:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1254:	08 d2       	rcall	.+1040   	; 0x1666 <__mulsf3>
    1256:	dc 01       	movw	r26, r24
    1258:	cb 01       	movw	r24, r22
    125a:	8b 8f       	std	Y+27, r24	; 0x1b
    125c:	9c 8f       	std	Y+28, r25	; 0x1c
    125e:	ad 8f       	std	Y+29, r26	; 0x1d
    1260:	be 8f       	std	Y+30, r27	; 0x1e
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    1262:	20 e0       	ldi	r18, 0x00	; 0
    1264:	30 e0       	ldi	r19, 0x00	; 0
    1266:	40 e8       	ldi	r20, 0x80	; 128
    1268:	5f e3       	ldi	r21, 0x3F	; 63
    126a:	6b 8d       	ldd	r22, Y+27	; 0x1b
    126c:	7c 8d       	ldd	r23, Y+28	; 0x1c
    126e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1270:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1272:	e8 d0       	rcall	.+464    	; 0x1444 <__cmpsf2>
    1274:	88 23       	and	r24, r24
    1276:	2c f4       	brge	.+10     	; 0x1282 <main+0x21c>
    1278:	81 e0       	ldi	r24, 0x01	; 1
    127a:	90 e0       	ldi	r25, 0x00	; 0
    127c:	98 a3       	std	Y+32, r25	; 0x20
    127e:	8f 8f       	std	Y+31, r24	; 0x1f
    1280:	3b c0       	rjmp	.+118    	; 0x12f8 <main+0x292>
	if (__tmp < 1.0)
    1282:	20 e0       	ldi	r18, 0x00	; 0
    1284:	3f ef       	ldi	r19, 0xFF	; 255
    1286:	4f e7       	ldi	r20, 0x7F	; 127
    1288:	57 e4       	ldi	r21, 0x47	; 71
    128a:	6b 8d       	ldd	r22, Y+27	; 0x1b
    128c:	7c 8d       	ldd	r23, Y+28	; 0x1c
    128e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1290:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1292:	e5 d1       	rcall	.+970    	; 0x165e <__gesf2>
    1294:	18 16       	cp	r1, r24
    1296:	3c f5       	brge	.+78     	; 0x12e6 <main+0x280>
    1298:	20 e0       	ldi	r18, 0x00	; 0
		__ticks = 1;
    129a:	30 e0       	ldi	r19, 0x00	; 0
    129c:	40 e2       	ldi	r20, 0x20	; 32
    129e:	51 e4       	ldi	r21, 0x41	; 65
    12a0:	6f 89       	ldd	r22, Y+23	; 0x17
    12a2:	78 8d       	ldd	r23, Y+24	; 0x18
	else if (__tmp > 65535)
    12a4:	89 8d       	ldd	r24, Y+25	; 0x19
    12a6:	9a 8d       	ldd	r25, Y+26	; 0x1a
    12a8:	de d1       	rcall	.+956    	; 0x1666 <__mulsf3>
    12aa:	dc 01       	movw	r26, r24
    12ac:	cb 01       	movw	r24, r22
    12ae:	bc 01       	movw	r22, r24
    12b0:	cd 01       	movw	r24, r26
    12b2:	34 d1       	rcall	.+616    	; 0x151c <__fixunssfsi>
    12b4:	dc 01       	movw	r26, r24
    12b6:	cb 01       	movw	r24, r22
    12b8:	98 a3       	std	Y+32, r25	; 0x20
    12ba:	8f 8f       	std	Y+31, r24	; 0x1f
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12bc:	0f c0       	rjmp	.+30     	; 0x12dc <main+0x276>
    12be:	88 ec       	ldi	r24, 0xC8	; 200
    12c0:	90 e0       	ldi	r25, 0x00	; 0
    12c2:	9a a3       	std	Y+34, r25	; 0x22
    12c4:	89 a3       	std	Y+33, r24	; 0x21
    12c6:	89 a1       	ldd	r24, Y+33	; 0x21
    12c8:	9a a1       	ldd	r25, Y+34	; 0x22
    12ca:	01 97       	sbiw	r24, 0x01	; 1
    12cc:	f1 f7       	brne	.-4      	; 0x12ca <main+0x264>
    12ce:	9a a3       	std	Y+34, r25	; 0x22
    12d0:	89 a3       	std	Y+33, r24	; 0x21
    12d2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    12d4:	98 a1       	ldd	r25, Y+32	; 0x20
    12d6:	01 97       	sbiw	r24, 0x01	; 1
    12d8:	98 a3       	std	Y+32, r25	; 0x20
    12da:	8f 8f       	std	Y+31, r24	; 0x1f
    12dc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    12de:	98 a1       	ldd	r25, Y+32	; 0x20
    12e0:	00 97       	sbiw	r24, 0x00	; 0
    12e2:	69 f7       	brne	.-38     	; 0x12be <main+0x258>
    12e4:	22 c0       	rjmp	.+68     	; 0x132a <main+0x2c4>
    12e6:	6b 8d       	ldd	r22, Y+27	; 0x1b
    12e8:	7c 8d       	ldd	r23, Y+28	; 0x1c
    12ea:	8d 8d       	ldd	r24, Y+29	; 0x1d
    12ec:	9e 8d       	ldd	r25, Y+30	; 0x1e
    12ee:	16 d1       	rcall	.+556    	; 0x151c <__fixunssfsi>
    12f0:	dc 01       	movw	r26, r24
    12f2:	cb 01       	movw	r24, r22
    12f4:	98 a3       	std	Y+32, r25	; 0x20
    12f6:	8f 8f       	std	Y+31, r24	; 0x1f
    12f8:	8f 8d       	ldd	r24, Y+31	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12fa:	98 a1       	ldd	r25, Y+32	; 0x20
    12fc:	9c a3       	std	Y+36, r25	; 0x24
    12fe:	8b a3       	std	Y+35, r24	; 0x23
    1300:	8b a1       	ldd	r24, Y+35	; 0x23
    1302:	9c a1       	ldd	r25, Y+36	; 0x24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1304:	01 97       	sbiw	r24, 0x01	; 1
    1306:	f1 f7       	brne	.-4      	; 0x1304 <main+0x29e>
    1308:	9c a3       	std	Y+36, r25	; 0x24
    130a:	8b a3       	std	Y+35, r24	; 0x23
    130c:	0e c0       	rjmp	.+28     	; 0x132a <main+0x2c4>
    130e:	6a 89       	ldd	r22, Y+18	; 0x12
    1310:	7b 89       	ldd	r23, Y+19	; 0x13
    1312:	8c 89       	ldd	r24, Y+20	; 0x14
    1314:	9d 89       	ldd	r25, Y+21	; 0x15
    1316:	02 d1       	rcall	.+516    	; 0x151c <__fixunssfsi>
    1318:	dc 01       	movw	r26, r24
    131a:	cb 01       	movw	r24, r22
    131c:	8e 8b       	std	Y+22, r24	; 0x16
    131e:	8e 89       	ldd	r24, Y+22	; 0x16
    1320:	8d a3       	std	Y+37, r24	; 0x25
    1322:	8d a1       	ldd	r24, Y+37	; 0x25
    1324:	8a 95       	dec	r24
    1326:	f1 f7       	brne	.-4      	; 0x1324 <main+0x2be>
    1328:	8d a3       	std	Y+37, r24	; 0x25
    132a:	8a 85       	ldd	r24, Y+10	; 0x0a
    132c:	9b 85       	ldd	r25, Y+11	; 0x0b
    132e:	ac 85       	ldd	r26, Y+12	; 0x0c
    1330:	bd 85       	ldd	r27, Y+13	; 0x0d
    1332:	01 96       	adiw	r24, 0x01	; 1
    1334:	a1 1d       	adc	r26, r1
    1336:	b1 1d       	adc	r27, r1
    1338:	8a 87       	std	Y+10, r24	; 0x0a
    133a:	9b 87       	std	Y+11, r25	; 0x0b
    133c:	ac 87       	std	Y+12, r26	; 0x0c
    133e:	bd 87       	std	Y+13, r27	; 0x0d
    1340:	89 81       	ldd	r24, Y+1	; 0x01
    1342:	9a 81       	ldd	r25, Y+2	; 0x02
    1344:	ab 81       	ldd	r26, Y+3	; 0x03
    1346:	bc 81       	ldd	r27, Y+4	; 0x04
    1348:	9c 01       	movw	r18, r24
    134a:	ad 01       	movw	r20, r26
    134c:	22 0f       	add	r18, r18
    134e:	33 1f       	adc	r19, r19
    1350:	44 1f       	adc	r20, r20
    1352:	55 1f       	adc	r21, r21
    1354:	80 e4       	ldi	r24, 0x40	; 64
    1356:	92 e4       	ldi	r25, 0x42	; 66
    1358:	af e0       	ldi	r26, 0x0F	; 15
    135a:	b0 e0       	ldi	r27, 0x00	; 0
    135c:	bc 01       	movw	r22, r24
    135e:	cd 01       	movw	r24, r26
    1360:	24 d0       	rcall	.+72     	; 0x13aa <__udivmodsi4>
    1362:	da 01       	movw	r26, r20
    1364:	c9 01       	movw	r24, r18
    1366:	9c 01       	movw	r18, r24
    1368:	ad 01       	movw	r20, r26
    136a:	8a 85       	ldd	r24, Y+10	; 0x0a
    136c:	9b 85       	ldd	r25, Y+11	; 0x0b
    136e:	ac 85       	ldd	r26, Y+12	; 0x0c
    1370:	bd 85       	ldd	r27, Y+13	; 0x0d
    1372:	82 17       	cp	r24, r18
    1374:	93 07       	cpc	r25, r19
    1376:	a4 07       	cpc	r26, r20
    1378:	b5 07       	cpc	r27, r21
    137a:	08 f4       	brcc	.+2      	; 0x137e <main+0x318>
    137c:	23 cf       	rjmp	.-442    	; 0x11c4 <main+0x15e>
    137e:	8e 81       	ldd	r24, Y+6	; 0x06
    1380:	9f 81       	ldd	r25, Y+7	; 0x07
    1382:	a8 85       	ldd	r26, Y+8	; 0x08
    1384:	b9 85       	ldd	r27, Y+9	; 0x09
    1386:	01 96       	adiw	r24, 0x01	; 1
    1388:	a1 1d       	adc	r26, r1
    138a:	b1 1d       	adc	r27, r1
    138c:	8e 83       	std	Y+6, r24	; 0x06
    138e:	9f 83       	std	Y+7, r25	; 0x07
    1390:	a8 87       	std	Y+8, r26	; 0x08
    1392:	b9 87       	std	Y+9, r27	; 0x09
    1394:	a1 ce       	rjmp	.-702    	; 0x10d8 <main+0x72>

00001396 <__muluhisi3>:
    1396:	47 d0       	rcall	.+142    	; 0x1426 <__umulhisi3>
    1398:	a5 9f       	mul	r26, r21
    139a:	90 0d       	add	r25, r0
    139c:	b4 9f       	mul	r27, r20
    139e:	90 0d       	add	r25, r0
    13a0:	a4 9f       	mul	r26, r20
    13a2:	80 0d       	add	r24, r0
    13a4:	91 1d       	adc	r25, r1
    13a6:	11 24       	eor	r1, r1
    13a8:	08 95       	ret

000013aa <__udivmodsi4>:
    13aa:	a1 e2       	ldi	r26, 0x21	; 33
			_delay_us(1);

		iter++;
    13ac:	1a 2e       	mov	r1, r26
    13ae:	aa 1b       	sub	r26, r26
    13b0:	bb 1b       	sub	r27, r27
    13b2:	fd 01       	movw	r30, r26
    13b4:	0d c0       	rjmp	.+26     	; 0x13d0 <__udivmodsi4_ep>

000013b6 <__udivmodsi4_loop>:
    13b6:	aa 1f       	adc	r26, r26
    13b8:	bb 1f       	adc	r27, r27
    13ba:	ee 1f       	adc	r30, r30
    13bc:	ff 1f       	adc	r31, r31
    13be:	a2 17       	cp	r26, r18
    13c0:	b3 07       	cpc	r27, r19
    13c2:	e4 07       	cpc	r30, r20
    13c4:	f5 07       	cpc	r31, r21
    13c6:	20 f0       	brcs	.+8      	; 0x13d0 <__udivmodsi4_ep>
    13c8:	a2 1b       	sub	r26, r18
    13ca:	b3 0b       	sbc	r27, r19
    13cc:	e4 0b       	sbc	r30, r20
    13ce:	f5 0b       	sbc	r31, r21

000013d0 <__udivmodsi4_ep>:
    13d0:	66 1f       	adc	r22, r22
    13d2:	77 1f       	adc	r23, r23
    13d4:	88 1f       	adc	r24, r24
    13d6:	99 1f       	adc	r25, r25
    13d8:	1a 94       	dec	r1
    13da:	69 f7       	brne	.-38     	; 0x13b6 <__udivmodsi4_loop>
    13dc:	60 95       	com	r22
    13de:	70 95       	com	r23
    13e0:	80 95       	com	r24
    13e2:	90 95       	com	r25
    13e4:	9b 01       	movw	r18, r22
    13e6:	ac 01       	movw	r20, r24
    13e8:	bd 01       	movw	r22, r26
    13ea:	cf 01       	movw	r24, r30
    13ec:	08 95       	ret

000013ee <__divmodsi4>:
    13ee:	05 2e       	mov	r0, r21
    13f0:	97 fb       	bst	r25, 7
    13f2:	16 f4       	brtc	.+4      	; 0x13f8 <__divmodsi4+0xa>
    13f4:	00 94       	com	r0
    13f6:	0f d0       	rcall	.+30     	; 0x1416 <__negsi2>
    13f8:	57 fd       	sbrc	r21, 7
    13fa:	05 d0       	rcall	.+10     	; 0x1406 <__divmodsi4_neg2>
    13fc:	d6 df       	rcall	.-84     	; 0x13aa <__udivmodsi4>
    13fe:	07 fc       	sbrc	r0, 7
    1400:	02 d0       	rcall	.+4      	; 0x1406 <__divmodsi4_neg2>
    1402:	46 f4       	brtc	.+16     	; 0x1414 <__divmodsi4_exit>
    1404:	08 c0       	rjmp	.+16     	; 0x1416 <__negsi2>

00001406 <__divmodsi4_neg2>:
    1406:	50 95       	com	r21
    1408:	40 95       	com	r20
    140a:	30 95       	com	r19
    140c:	21 95       	neg	r18
    140e:	3f 4f       	sbci	r19, 0xFF	; 255
    1410:	4f 4f       	sbci	r20, 0xFF	; 255
    1412:	5f 4f       	sbci	r21, 0xFF	; 255

00001414 <__divmodsi4_exit>:
    1414:	08 95       	ret

00001416 <__negsi2>:
    1416:	90 95       	com	r25
    1418:	80 95       	com	r24
    141a:	70 95       	com	r23
    141c:	61 95       	neg	r22
    141e:	7f 4f       	sbci	r23, 0xFF	; 255
    1420:	8f 4f       	sbci	r24, 0xFF	; 255
    1422:	9f 4f       	sbci	r25, 0xFF	; 255
    1424:	08 95       	ret

00001426 <__umulhisi3>:
    1426:	a2 9f       	mul	r26, r18
    1428:	b0 01       	movw	r22, r0
    142a:	b3 9f       	mul	r27, r19
    142c:	c0 01       	movw	r24, r0
    142e:	a3 9f       	mul	r26, r19
    1430:	70 0d       	add	r23, r0
    1432:	81 1d       	adc	r24, r1
    1434:	11 24       	eor	r1, r1
    1436:	91 1d       	adc	r25, r1
    1438:	b2 9f       	mul	r27, r18
    143a:	70 0d       	add	r23, r0
    143c:	81 1d       	adc	r24, r1
    143e:	11 24       	eor	r1, r1
    1440:	91 1d       	adc	r25, r1
    1442:	08 95       	ret

00001444 <__cmpsf2>:
    1444:	97 d0       	rcall	.+302    	; 0x1574 <__fp_cmp>
    1446:	08 f4       	brcc	.+2      	; 0x144a <__cmpsf2+0x6>
    1448:	81 e0       	ldi	r24, 0x01	; 1
    144a:	08 95       	ret

0000144c <__divsf3>:
    144c:	0c d0       	rcall	.+24     	; 0x1466 <__divsf3x>
    144e:	cd c0       	rjmp	.+410    	; 0x15ea <__fp_round>
    1450:	c5 d0       	rcall	.+394    	; 0x15dc <__fp_pscB>
    1452:	40 f0       	brcs	.+16     	; 0x1464 <__divsf3+0x18>
    1454:	bc d0       	rcall	.+376    	; 0x15ce <__fp_pscA>
    1456:	30 f0       	brcs	.+12     	; 0x1464 <__divsf3+0x18>
    1458:	21 f4       	brne	.+8      	; 0x1462 <__divsf3+0x16>
    145a:	5f 3f       	cpi	r21, 0xFF	; 255
    145c:	19 f0       	breq	.+6      	; 0x1464 <__divsf3+0x18>
    145e:	ae c0       	rjmp	.+348    	; 0x15bc <__fp_inf>
    1460:	51 11       	cpse	r21, r1
    1462:	f7 c0       	rjmp	.+494    	; 0x1652 <__fp_szero>
    1464:	b1 c0       	rjmp	.+354    	; 0x15c8 <__fp_nan>

00001466 <__divsf3x>:
    1466:	d2 d0       	rcall	.+420    	; 0x160c <__fp_split3>
    1468:	98 f3       	brcs	.-26     	; 0x1450 <__divsf3+0x4>

0000146a <__divsf3_pse>:
    146a:	99 23       	and	r25, r25
    146c:	c9 f3       	breq	.-14     	; 0x1460 <__divsf3+0x14>
    146e:	55 23       	and	r21, r21
    1470:	b1 f3       	breq	.-20     	; 0x145e <__divsf3+0x12>
    1472:	95 1b       	sub	r25, r21
    1474:	55 0b       	sbc	r21, r21
    1476:	bb 27       	eor	r27, r27
    1478:	aa 27       	eor	r26, r26
    147a:	62 17       	cp	r22, r18
    147c:	73 07       	cpc	r23, r19
    147e:	84 07       	cpc	r24, r20
    1480:	38 f0       	brcs	.+14     	; 0x1490 <__divsf3_pse+0x26>
    1482:	9f 5f       	subi	r25, 0xFF	; 255
    1484:	5f 4f       	sbci	r21, 0xFF	; 255
    1486:	22 0f       	add	r18, r18
    1488:	33 1f       	adc	r19, r19
    148a:	44 1f       	adc	r20, r20
    148c:	aa 1f       	adc	r26, r26
    148e:	a9 f3       	breq	.-22     	; 0x147a <__divsf3_pse+0x10>
    1490:	33 d0       	rcall	.+102    	; 0x14f8 <__divsf3_pse+0x8e>
    1492:	0e 2e       	mov	r0, r30
    1494:	3a f0       	brmi	.+14     	; 0x14a4 <__divsf3_pse+0x3a>
    1496:	e0 e8       	ldi	r30, 0x80	; 128
    1498:	30 d0       	rcall	.+96     	; 0x14fa <__divsf3_pse+0x90>
    149a:	91 50       	subi	r25, 0x01	; 1
    149c:	50 40       	sbci	r21, 0x00	; 0
    149e:	e6 95       	lsr	r30
    14a0:	00 1c       	adc	r0, r0
    14a2:	ca f7       	brpl	.-14     	; 0x1496 <__divsf3_pse+0x2c>
    14a4:	29 d0       	rcall	.+82     	; 0x14f8 <__divsf3_pse+0x8e>
    14a6:	fe 2f       	mov	r31, r30
    14a8:	27 d0       	rcall	.+78     	; 0x14f8 <__divsf3_pse+0x8e>
    14aa:	66 0f       	add	r22, r22
    14ac:	77 1f       	adc	r23, r23
    14ae:	88 1f       	adc	r24, r24
    14b0:	bb 1f       	adc	r27, r27
    14b2:	26 17       	cp	r18, r22
    14b4:	37 07       	cpc	r19, r23
    14b6:	48 07       	cpc	r20, r24
    14b8:	ab 07       	cpc	r26, r27
    14ba:	b0 e8       	ldi	r27, 0x80	; 128
    14bc:	09 f0       	breq	.+2      	; 0x14c0 <__divsf3_pse+0x56>
    14be:	bb 0b       	sbc	r27, r27
    14c0:	80 2d       	mov	r24, r0
    14c2:	bf 01       	movw	r22, r30
    14c4:	ff 27       	eor	r31, r31
    14c6:	93 58       	subi	r25, 0x83	; 131
    14c8:	5f 4f       	sbci	r21, 0xFF	; 255
    14ca:	2a f0       	brmi	.+10     	; 0x14d6 <__divsf3_pse+0x6c>
    14cc:	9e 3f       	cpi	r25, 0xFE	; 254
    14ce:	51 05       	cpc	r21, r1
    14d0:	68 f0       	brcs	.+26     	; 0x14ec <__divsf3_pse+0x82>
    14d2:	74 c0       	rjmp	.+232    	; 0x15bc <__fp_inf>
    14d4:	be c0       	rjmp	.+380    	; 0x1652 <__fp_szero>
    14d6:	5f 3f       	cpi	r21, 0xFF	; 255
    14d8:	ec f3       	brlt	.-6      	; 0x14d4 <__divsf3_pse+0x6a>
    14da:	98 3e       	cpi	r25, 0xE8	; 232
    14dc:	dc f3       	brlt	.-10     	; 0x14d4 <__divsf3_pse+0x6a>
    14de:	86 95       	lsr	r24
    14e0:	77 95       	ror	r23
    14e2:	67 95       	ror	r22
    14e4:	b7 95       	ror	r27
    14e6:	f7 95       	ror	r31
    14e8:	9f 5f       	subi	r25, 0xFF	; 255
    14ea:	c9 f7       	brne	.-14     	; 0x14de <__divsf3_pse+0x74>
    14ec:	88 0f       	add	r24, r24
    14ee:	91 1d       	adc	r25, r1
    14f0:	96 95       	lsr	r25
    14f2:	87 95       	ror	r24
    14f4:	97 f9       	bld	r25, 7
    14f6:	08 95       	ret
    14f8:	e1 e0       	ldi	r30, 0x01	; 1
    14fa:	66 0f       	add	r22, r22
    14fc:	77 1f       	adc	r23, r23
    14fe:	88 1f       	adc	r24, r24
    1500:	bb 1f       	adc	r27, r27
    1502:	62 17       	cp	r22, r18
    1504:	73 07       	cpc	r23, r19
    1506:	84 07       	cpc	r24, r20
    1508:	ba 07       	cpc	r27, r26
    150a:	20 f0       	brcs	.+8      	; 0x1514 <__divsf3_pse+0xaa>
    150c:	62 1b       	sub	r22, r18
    150e:	73 0b       	sbc	r23, r19
    1510:	84 0b       	sbc	r24, r20
    1512:	ba 0b       	sbc	r27, r26
    1514:	ee 1f       	adc	r30, r30
    1516:	88 f7       	brcc	.-30     	; 0x14fa <__divsf3_pse+0x90>
    1518:	e0 95       	com	r30
    151a:	08 95       	ret

0000151c <__fixunssfsi>:
    151c:	7f d0       	rcall	.+254    	; 0x161c <__fp_splitA>
    151e:	88 f0       	brcs	.+34     	; 0x1542 <__fixunssfsi+0x26>
    1520:	9f 57       	subi	r25, 0x7F	; 127
    1522:	90 f0       	brcs	.+36     	; 0x1548 <__fixunssfsi+0x2c>
    1524:	b9 2f       	mov	r27, r25
    1526:	99 27       	eor	r25, r25
    1528:	b7 51       	subi	r27, 0x17	; 23
    152a:	a0 f0       	brcs	.+40     	; 0x1554 <__fixunssfsi+0x38>
    152c:	d1 f0       	breq	.+52     	; 0x1562 <__fixunssfsi+0x46>
    152e:	66 0f       	add	r22, r22
    1530:	77 1f       	adc	r23, r23
    1532:	88 1f       	adc	r24, r24
    1534:	99 1f       	adc	r25, r25
    1536:	1a f0       	brmi	.+6      	; 0x153e <__fixunssfsi+0x22>
    1538:	ba 95       	dec	r27
    153a:	c9 f7       	brne	.-14     	; 0x152e <__fixunssfsi+0x12>
    153c:	12 c0       	rjmp	.+36     	; 0x1562 <__fixunssfsi+0x46>
    153e:	b1 30       	cpi	r27, 0x01	; 1
    1540:	81 f0       	breq	.+32     	; 0x1562 <__fixunssfsi+0x46>
    1542:	86 d0       	rcall	.+268    	; 0x1650 <__fp_zero>
    1544:	b1 e0       	ldi	r27, 0x01	; 1
    1546:	08 95       	ret
    1548:	83 c0       	rjmp	.+262    	; 0x1650 <__fp_zero>
    154a:	67 2f       	mov	r22, r23
    154c:	78 2f       	mov	r23, r24
    154e:	88 27       	eor	r24, r24
    1550:	b8 5f       	subi	r27, 0xF8	; 248
    1552:	39 f0       	breq	.+14     	; 0x1562 <__fixunssfsi+0x46>
    1554:	b9 3f       	cpi	r27, 0xF9	; 249
    1556:	cc f3       	brlt	.-14     	; 0x154a <__fixunssfsi+0x2e>
    1558:	86 95       	lsr	r24
    155a:	77 95       	ror	r23
    155c:	67 95       	ror	r22
    155e:	b3 95       	inc	r27
    1560:	d9 f7       	brne	.-10     	; 0x1558 <__fixunssfsi+0x3c>
    1562:	3e f4       	brtc	.+14     	; 0x1572 <__fixunssfsi+0x56>
    1564:	90 95       	com	r25
    1566:	80 95       	com	r24
    1568:	70 95       	com	r23
    156a:	61 95       	neg	r22
    156c:	7f 4f       	sbci	r23, 0xFF	; 255
    156e:	8f 4f       	sbci	r24, 0xFF	; 255
    1570:	9f 4f       	sbci	r25, 0xFF	; 255
    1572:	08 95       	ret

00001574 <__fp_cmp>:
    1574:	99 0f       	add	r25, r25
    1576:	00 08       	sbc	r0, r0
    1578:	55 0f       	add	r21, r21
    157a:	aa 0b       	sbc	r26, r26
    157c:	e0 e8       	ldi	r30, 0x80	; 128
    157e:	fe ef       	ldi	r31, 0xFE	; 254
    1580:	16 16       	cp	r1, r22
    1582:	17 06       	cpc	r1, r23
    1584:	e8 07       	cpc	r30, r24
    1586:	f9 07       	cpc	r31, r25
    1588:	c0 f0       	brcs	.+48     	; 0x15ba <__fp_cmp+0x46>
    158a:	12 16       	cp	r1, r18
    158c:	13 06       	cpc	r1, r19
    158e:	e4 07       	cpc	r30, r20
    1590:	f5 07       	cpc	r31, r21
    1592:	98 f0       	brcs	.+38     	; 0x15ba <__fp_cmp+0x46>
    1594:	62 1b       	sub	r22, r18
    1596:	73 0b       	sbc	r23, r19
    1598:	84 0b       	sbc	r24, r20
    159a:	95 0b       	sbc	r25, r21
    159c:	39 f4       	brne	.+14     	; 0x15ac <__fp_cmp+0x38>
    159e:	0a 26       	eor	r0, r26
    15a0:	61 f0       	breq	.+24     	; 0x15ba <__fp_cmp+0x46>
    15a2:	23 2b       	or	r18, r19
    15a4:	24 2b       	or	r18, r20
    15a6:	25 2b       	or	r18, r21
    15a8:	21 f4       	brne	.+8      	; 0x15b2 <__fp_cmp+0x3e>
    15aa:	08 95       	ret
    15ac:	0a 26       	eor	r0, r26
    15ae:	09 f4       	brne	.+2      	; 0x15b2 <__fp_cmp+0x3e>
    15b0:	a1 40       	sbci	r26, 0x01	; 1
    15b2:	a6 95       	lsr	r26
    15b4:	8f ef       	ldi	r24, 0xFF	; 255
    15b6:	81 1d       	adc	r24, r1
    15b8:	81 1d       	adc	r24, r1
    15ba:	08 95       	ret

000015bc <__fp_inf>:
    15bc:	97 f9       	bld	r25, 7
    15be:	9f 67       	ori	r25, 0x7F	; 127
    15c0:	80 e8       	ldi	r24, 0x80	; 128
    15c2:	70 e0       	ldi	r23, 0x00	; 0
    15c4:	60 e0       	ldi	r22, 0x00	; 0
    15c6:	08 95       	ret

000015c8 <__fp_nan>:
    15c8:	9f ef       	ldi	r25, 0xFF	; 255
    15ca:	80 ec       	ldi	r24, 0xC0	; 192
    15cc:	08 95       	ret

000015ce <__fp_pscA>:
    15ce:	00 24       	eor	r0, r0
    15d0:	0a 94       	dec	r0
    15d2:	16 16       	cp	r1, r22
    15d4:	17 06       	cpc	r1, r23
    15d6:	18 06       	cpc	r1, r24
    15d8:	09 06       	cpc	r0, r25
    15da:	08 95       	ret

000015dc <__fp_pscB>:
    15dc:	00 24       	eor	r0, r0
    15de:	0a 94       	dec	r0
    15e0:	12 16       	cp	r1, r18
    15e2:	13 06       	cpc	r1, r19
    15e4:	14 06       	cpc	r1, r20
    15e6:	05 06       	cpc	r0, r21
    15e8:	08 95       	ret

000015ea <__fp_round>:
    15ea:	09 2e       	mov	r0, r25
    15ec:	03 94       	inc	r0
    15ee:	00 0c       	add	r0, r0
    15f0:	11 f4       	brne	.+4      	; 0x15f6 <__fp_round+0xc>
    15f2:	88 23       	and	r24, r24
    15f4:	52 f0       	brmi	.+20     	; 0x160a <__fp_round+0x20>
    15f6:	bb 0f       	add	r27, r27
    15f8:	40 f4       	brcc	.+16     	; 0x160a <__fp_round+0x20>
    15fa:	bf 2b       	or	r27, r31
    15fc:	11 f4       	brne	.+4      	; 0x1602 <__fp_round+0x18>
    15fe:	60 ff       	sbrs	r22, 0
    1600:	04 c0       	rjmp	.+8      	; 0x160a <__fp_round+0x20>
    1602:	6f 5f       	subi	r22, 0xFF	; 255
    1604:	7f 4f       	sbci	r23, 0xFF	; 255
    1606:	8f 4f       	sbci	r24, 0xFF	; 255
    1608:	9f 4f       	sbci	r25, 0xFF	; 255
    160a:	08 95       	ret

0000160c <__fp_split3>:
    160c:	57 fd       	sbrc	r21, 7
    160e:	90 58       	subi	r25, 0x80	; 128
    1610:	44 0f       	add	r20, r20
    1612:	55 1f       	adc	r21, r21
    1614:	59 f0       	breq	.+22     	; 0x162c <__fp_splitA+0x10>
    1616:	5f 3f       	cpi	r21, 0xFF	; 255
    1618:	71 f0       	breq	.+28     	; 0x1636 <__fp_splitA+0x1a>
    161a:	47 95       	ror	r20

0000161c <__fp_splitA>:
    161c:	88 0f       	add	r24, r24
    161e:	97 fb       	bst	r25, 7
    1620:	99 1f       	adc	r25, r25
    1622:	61 f0       	breq	.+24     	; 0x163c <__fp_splitA+0x20>
    1624:	9f 3f       	cpi	r25, 0xFF	; 255
    1626:	79 f0       	breq	.+30     	; 0x1646 <__fp_splitA+0x2a>
    1628:	87 95       	ror	r24
    162a:	08 95       	ret
    162c:	12 16       	cp	r1, r18
    162e:	13 06       	cpc	r1, r19
    1630:	14 06       	cpc	r1, r20
    1632:	55 1f       	adc	r21, r21
    1634:	f2 cf       	rjmp	.-28     	; 0x161a <__fp_split3+0xe>
    1636:	46 95       	lsr	r20
    1638:	f1 df       	rcall	.-30     	; 0x161c <__fp_splitA>
    163a:	08 c0       	rjmp	.+16     	; 0x164c <__fp_splitA+0x30>
    163c:	16 16       	cp	r1, r22
    163e:	17 06       	cpc	r1, r23
    1640:	18 06       	cpc	r1, r24
    1642:	99 1f       	adc	r25, r25
    1644:	f1 cf       	rjmp	.-30     	; 0x1628 <__fp_splitA+0xc>
    1646:	86 95       	lsr	r24
    1648:	71 05       	cpc	r23, r1
    164a:	61 05       	cpc	r22, r1
    164c:	08 94       	sec
    164e:	08 95       	ret

00001650 <__fp_zero>:
    1650:	e8 94       	clt

00001652 <__fp_szero>:
    1652:	bb 27       	eor	r27, r27
    1654:	66 27       	eor	r22, r22
    1656:	77 27       	eor	r23, r23
    1658:	cb 01       	movw	r24, r22
    165a:	97 f9       	bld	r25, 7
    165c:	08 95       	ret

0000165e <__gesf2>:
    165e:	8a df       	rcall	.-236    	; 0x1574 <__fp_cmp>
    1660:	08 f4       	brcc	.+2      	; 0x1664 <__gesf2+0x6>
    1662:	8f ef       	ldi	r24, 0xFF	; 255
    1664:	08 95       	ret

00001666 <__mulsf3>:
    1666:	0b d0       	rcall	.+22     	; 0x167e <__mulsf3x>
    1668:	c0 cf       	rjmp	.-128    	; 0x15ea <__fp_round>
    166a:	b1 df       	rcall	.-158    	; 0x15ce <__fp_pscA>
    166c:	28 f0       	brcs	.+10     	; 0x1678 <__mulsf3+0x12>
    166e:	b6 df       	rcall	.-148    	; 0x15dc <__fp_pscB>
    1670:	18 f0       	brcs	.+6      	; 0x1678 <__mulsf3+0x12>
    1672:	95 23       	and	r25, r21
    1674:	09 f0       	breq	.+2      	; 0x1678 <__mulsf3+0x12>
    1676:	a2 cf       	rjmp	.-188    	; 0x15bc <__fp_inf>
    1678:	a7 cf       	rjmp	.-178    	; 0x15c8 <__fp_nan>
    167a:	11 24       	eor	r1, r1
    167c:	ea cf       	rjmp	.-44     	; 0x1652 <__fp_szero>

0000167e <__mulsf3x>:
    167e:	c6 df       	rcall	.-116    	; 0x160c <__fp_split3>
    1680:	a0 f3       	brcs	.-24     	; 0x166a <__mulsf3+0x4>

00001682 <__mulsf3_pse>:
    1682:	95 9f       	mul	r25, r21
    1684:	d1 f3       	breq	.-12     	; 0x167a <__mulsf3+0x14>
    1686:	95 0f       	add	r25, r21
    1688:	50 e0       	ldi	r21, 0x00	; 0
    168a:	55 1f       	adc	r21, r21
    168c:	62 9f       	mul	r22, r18
    168e:	f0 01       	movw	r30, r0
    1690:	72 9f       	mul	r23, r18
    1692:	bb 27       	eor	r27, r27
    1694:	f0 0d       	add	r31, r0
    1696:	b1 1d       	adc	r27, r1
    1698:	63 9f       	mul	r22, r19
    169a:	aa 27       	eor	r26, r26
    169c:	f0 0d       	add	r31, r0
    169e:	b1 1d       	adc	r27, r1
    16a0:	aa 1f       	adc	r26, r26
    16a2:	64 9f       	mul	r22, r20
    16a4:	66 27       	eor	r22, r22
    16a6:	b0 0d       	add	r27, r0
    16a8:	a1 1d       	adc	r26, r1
    16aa:	66 1f       	adc	r22, r22
    16ac:	82 9f       	mul	r24, r18
    16ae:	22 27       	eor	r18, r18
    16b0:	b0 0d       	add	r27, r0
    16b2:	a1 1d       	adc	r26, r1
    16b4:	62 1f       	adc	r22, r18
    16b6:	73 9f       	mul	r23, r19
    16b8:	b0 0d       	add	r27, r0
    16ba:	a1 1d       	adc	r26, r1
    16bc:	62 1f       	adc	r22, r18
    16be:	83 9f       	mul	r24, r19
    16c0:	a0 0d       	add	r26, r0
    16c2:	61 1d       	adc	r22, r1
    16c4:	22 1f       	adc	r18, r18
    16c6:	74 9f       	mul	r23, r20
    16c8:	33 27       	eor	r19, r19
    16ca:	a0 0d       	add	r26, r0
    16cc:	61 1d       	adc	r22, r1
    16ce:	23 1f       	adc	r18, r19
    16d0:	84 9f       	mul	r24, r20
    16d2:	60 0d       	add	r22, r0
    16d4:	21 1d       	adc	r18, r1
    16d6:	82 2f       	mov	r24, r18
    16d8:	76 2f       	mov	r23, r22
    16da:	6a 2f       	mov	r22, r26
    16dc:	11 24       	eor	r1, r1
    16de:	9f 57       	subi	r25, 0x7F	; 127
    16e0:	50 40       	sbci	r21, 0x00	; 0
    16e2:	8a f0       	brmi	.+34     	; 0x1706 <__mulsf3_pse+0x84>
    16e4:	e1 f0       	breq	.+56     	; 0x171e <__mulsf3_pse+0x9c>
    16e6:	88 23       	and	r24, r24
    16e8:	4a f0       	brmi	.+18     	; 0x16fc <__mulsf3_pse+0x7a>
    16ea:	ee 0f       	add	r30, r30
    16ec:	ff 1f       	adc	r31, r31
    16ee:	bb 1f       	adc	r27, r27
    16f0:	66 1f       	adc	r22, r22
    16f2:	77 1f       	adc	r23, r23
    16f4:	88 1f       	adc	r24, r24
    16f6:	91 50       	subi	r25, 0x01	; 1
    16f8:	50 40       	sbci	r21, 0x00	; 0
    16fa:	a9 f7       	brne	.-22     	; 0x16e6 <__mulsf3_pse+0x64>
    16fc:	9e 3f       	cpi	r25, 0xFE	; 254
    16fe:	51 05       	cpc	r21, r1
    1700:	70 f0       	brcs	.+28     	; 0x171e <__mulsf3_pse+0x9c>
    1702:	5c cf       	rjmp	.-328    	; 0x15bc <__fp_inf>
    1704:	a6 cf       	rjmp	.-180    	; 0x1652 <__fp_szero>
    1706:	5f 3f       	cpi	r21, 0xFF	; 255
    1708:	ec f3       	brlt	.-6      	; 0x1704 <__mulsf3_pse+0x82>
    170a:	98 3e       	cpi	r25, 0xE8	; 232
    170c:	dc f3       	brlt	.-10     	; 0x1704 <__mulsf3_pse+0x82>
    170e:	86 95       	lsr	r24
    1710:	77 95       	ror	r23
    1712:	67 95       	ror	r22
    1714:	b7 95       	ror	r27
    1716:	f7 95       	ror	r31
    1718:	e7 95       	ror	r30
    171a:	9f 5f       	subi	r25, 0xFF	; 255
    171c:	c1 f7       	brne	.-16     	; 0x170e <__mulsf3_pse+0x8c>
    171e:	fe 2b       	or	r31, r30
    1720:	88 0f       	add	r24, r24
    1722:	91 1d       	adc	r25, r1
    1724:	96 95       	lsr	r25
    1726:	87 95       	ror	r24
    1728:	97 f9       	bld	r25, 7
    172a:	08 95       	ret

0000172c <_exit>:
    172c:	f8 94       	cli

0000172e <__stop_program>:
    172e:	ff cf       	rjmp	.-2      	; 0x172e <__stop_program>
