
LED_DISPLAY_CONTROL.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000096a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  0000096a  000009fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000010  00800074  00800074  00000a12  2**0
                  ALLOC
  3 .stab         000029c4  00000000  00000000  00000a14  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000010af  00000000  00000000  000033d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00004487  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e6       	ldi	r30, 0x6A	; 106
  68:	f9 e0       	ldi	r31, 0x09	; 9
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 37       	cpi	r26, 0x74	; 116
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a4 e7       	ldi	r26, 0x74	; 116
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 38       	cpi	r26, 0x84	; 132
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 0e 03 	call	0x61c	; 0x61c <main>
  8a:	0c 94 b3 04 	jmp	0x966	; 0x966 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <LEDInit>:
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62
  9a:	87 e3       	ldi	r24, 0x37	; 55
  9c:	90 e0       	ldi	r25, 0x00	; 0
  9e:	27 e3       	ldi	r18, 0x37	; 55
  a0:	30 e0       	ldi	r19, 0x00	; 0
  a2:	f9 01       	movw	r30, r18
  a4:	20 81       	ld	r18, Z
  a6:	2f 60       	ori	r18, 0x0F	; 15
  a8:	fc 01       	movw	r30, r24
  aa:	20 83       	st	Z, r18
  ac:	88 e3       	ldi	r24, 0x38	; 56
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	28 e3       	ldi	r18, 0x38	; 56
  b2:	30 e0       	ldi	r19, 0x00	; 0
  b4:	f9 01       	movw	r30, r18
  b6:	20 81       	ld	r18, Z
  b8:	20 6f       	ori	r18, 0xF0	; 240
  ba:	fc 01       	movw	r30, r24
  bc:	20 83       	st	Z, r18
  be:	84 e3       	ldi	r24, 0x34	; 52
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	fc 01       	movw	r30, r24
  c4:	80 81       	ld	r24, Z
  c6:	84 e3       	ldi	r24, 0x34	; 52
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	2f ef       	ldi	r18, 0xFF	; 255
  cc:	fc 01       	movw	r30, r24
  ce:	20 83       	st	Z, r18
  d0:	df 91       	pop	r29
  d2:	cf 91       	pop	r28
  d4:	08 95       	ret

000000d6 <LEDTest>:
	LEDDDR |= 	0b11111111;

}

void LEDTest()
{
  d6:	cf 93       	push	r28
  d8:	df 93       	push	r29
  da:	cd b7       	in	r28, 0x3d	; 61
  dc:	de b7       	in	r29, 0x3e	; 62
	/*
	 * set all segments to work
	 */

	_segments[0] =	(uint8_t) ~DOFF;
  de:	10 92 74 00 	sts	0x0074, r1
	_segments[1] =	(uint8_t) ~DOFF;
  e2:	10 92 75 00 	sts	0x0075, r1
	_segments[2] =	(uint8_t) ~DOFF;
  e6:	10 92 76 00 	sts	0x0076, r1
	_segments[3] =	(uint8_t) ~DOFF;
  ea:	10 92 77 00 	sts	0x0077, r1
}
  ee:	df 91       	pop	r29
  f0:	cf 91       	pop	r28
  f2:	08 95       	ret

000000f4 <LEDshowOnDisplay>:

void LEDshowOnDisplay()
{
  f4:	cf 93       	push	r28
  f6:	df 93       	push	r29
  f8:	cd b7       	in	r28, 0x3d	; 61
  fa:	de b7       	in	r29, 0x3e	; 62
  fc:	69 97       	sbiw	r28, 0x19	; 25
  fe:	0f b6       	in	r0, 0x3f	; 63
 100:	f8 94       	cli
 102:	de bf       	out	0x3e, r29	; 62
 104:	0f be       	out	0x3f, r0	; 63
 106:	cd bf       	out	0x3d, r28	; 61
	if(display.changed == 1)
 108:	80 91 82 00 	lds	r24, 0x0082
 10c:	81 30       	cpi	r24, 0x01	; 1
 10e:	21 f4       	brne	.+8      	; 0x118 <LEDshowOnDisplay+0x24>
	{
		_LEDupdateSegments();
 110:	0e 94 c5 01 	call	0x38a	; 0x38a <_LEDupdateSegments>
		display.changed = 0;
 114:	10 92 82 00 	sts	0x0082, r1
	}

	for(uint8_t seg = 1; seg <= 4; seg++)
 118:	81 e0       	ldi	r24, 0x01	; 1
 11a:	89 83       	std	Y+1, r24	; 0x01
 11c:	e5 c0       	rjmp	.+458    	; 0x2e8 <LEDshowOnDisplay+0x1f4>
	{

		CONTROLPORT = 	~(1 << (seg - 1));
 11e:	88 e3       	ldi	r24, 0x38	; 56
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	29 81       	ldd	r18, Y+1	; 0x01
 124:	22 2f       	mov	r18, r18
 126:	30 e0       	ldi	r19, 0x00	; 0
 128:	a9 01       	movw	r20, r18
 12a:	41 50       	subi	r20, 0x01	; 1
 12c:	51 09       	sbc	r21, r1
 12e:	21 e0       	ldi	r18, 0x01	; 1
 130:	30 e0       	ldi	r19, 0x00	; 0
 132:	02 c0       	rjmp	.+4      	; 0x138 <LEDshowOnDisplay+0x44>
 134:	22 0f       	add	r18, r18
 136:	33 1f       	adc	r19, r19
 138:	4a 95       	dec	r20
 13a:	e2 f7       	brpl	.-8      	; 0x134 <LEDshowOnDisplay+0x40>
 13c:	20 95       	com	r18
 13e:	fc 01       	movw	r30, r24
 140:	20 83       	st	Z, r18
		LEDPORT = 	_segments[seg - 1];
 142:	85 e3       	ldi	r24, 0x35	; 53
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	29 81       	ldd	r18, Y+1	; 0x01
 148:	22 2f       	mov	r18, r18
 14a:	30 e0       	ldi	r19, 0x00	; 0
 14c:	21 50       	subi	r18, 0x01	; 1
 14e:	31 09       	sbc	r19, r1
 150:	2c 58       	subi	r18, 0x8C	; 140
 152:	3f 4f       	sbci	r19, 0xFF	; 255
 154:	f9 01       	movw	r30, r18
 156:	20 81       	ld	r18, Z
 158:	fc 01       	movw	r30, r24
 15a:	20 83       	st	Z, r18
 15c:	80 e0       	ldi	r24, 0x00	; 0
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	a8 e4       	ldi	r26, 0x48	; 72
 162:	b3 e4       	ldi	r27, 0x43	; 67
 164:	8a 83       	std	Y+2, r24	; 0x02
 166:	9b 83       	std	Y+3, r25	; 0x03
 168:	ac 83       	std	Y+4, r26	; 0x04
 16a:	bd 83       	std	Y+5, r27	; 0x05
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 3e6) * __us;
 16c:	2b ea       	ldi	r18, 0xAB	; 171
 16e:	3a ea       	ldi	r19, 0xAA	; 170
 170:	4a ea       	ldi	r20, 0xAA	; 170
 172:	5e e3       	ldi	r21, 0x3E	; 62
 174:	6a 81       	ldd	r22, Y+2	; 0x02
 176:	7b 81       	ldd	r23, Y+3	; 0x03
 178:	8c 81       	ldd	r24, Y+4	; 0x04
 17a:	9d 81       	ldd	r25, Y+5	; 0x05
 17c:	0e 94 50 04 	call	0x8a0	; 0x8a0 <__mulsf3>
 180:	dc 01       	movw	r26, r24
 182:	cb 01       	movw	r24, r22
 184:	8e 83       	std	Y+6, r24	; 0x06
 186:	9f 83       	std	Y+7, r25	; 0x07
 188:	a8 87       	std	Y+8, r26	; 0x08
 18a:	b9 87       	std	Y+9, r27	; 0x09
	if (__tmp < 1.0)
 18c:	20 e0       	ldi	r18, 0x00	; 0
 18e:	30 e0       	ldi	r19, 0x00	; 0
 190:	40 e8       	ldi	r20, 0x80	; 128
 192:	5f e3       	ldi	r21, 0x3F	; 63
 194:	6e 81       	ldd	r22, Y+6	; 0x06
 196:	7f 81       	ldd	r23, Y+7	; 0x07
 198:	88 85       	ldd	r24, Y+8	; 0x08
 19a:	99 85       	ldd	r25, Y+9	; 0x09
 19c:	0e 94 3f 03 	call	0x67e	; 0x67e <__cmpsf2>
 1a0:	88 23       	and	r24, r24
 1a2:	1c f4       	brge	.+6      	; 0x1aa <LEDshowOnDisplay+0xb6>
		__ticks = 1;
 1a4:	81 e0       	ldi	r24, 0x01	; 1
 1a6:	8a 87       	std	Y+10, r24	; 0x0a
 1a8:	91 c0       	rjmp	.+290    	; 0x2cc <LEDshowOnDisplay+0x1d8>
	else if (__tmp > 255)
 1aa:	20 e0       	ldi	r18, 0x00	; 0
 1ac:	30 e0       	ldi	r19, 0x00	; 0
 1ae:	4f e7       	ldi	r20, 0x7F	; 127
 1b0:	53 e4       	ldi	r21, 0x43	; 67
 1b2:	6e 81       	ldd	r22, Y+6	; 0x06
 1b4:	7f 81       	ldd	r23, Y+7	; 0x07
 1b6:	88 85       	ldd	r24, Y+8	; 0x08
 1b8:	99 85       	ldd	r25, Y+9	; 0x09
 1ba:	0e 94 4c 04 	call	0x898	; 0x898 <__gesf2>
 1be:	18 16       	cp	r1, r24
 1c0:	0c f0       	brlt	.+2      	; 0x1c4 <LEDshowOnDisplay+0xd0>
 1c2:	7b c0       	rjmp	.+246    	; 0x2ba <LEDshowOnDisplay+0x1c6>
	{
		_delay_ms(__us / 1000.0);
 1c4:	20 e0       	ldi	r18, 0x00	; 0
 1c6:	30 e0       	ldi	r19, 0x00	; 0
 1c8:	4a e7       	ldi	r20, 0x7A	; 122
 1ca:	54 e4       	ldi	r21, 0x44	; 68
 1cc:	6a 81       	ldd	r22, Y+2	; 0x02
 1ce:	7b 81       	ldd	r23, Y+3	; 0x03
 1d0:	8c 81       	ldd	r24, Y+4	; 0x04
 1d2:	9d 81       	ldd	r25, Y+5	; 0x05
 1d4:	0e 94 43 03 	call	0x686	; 0x686 <__divsf3>
 1d8:	dc 01       	movw	r26, r24
 1da:	cb 01       	movw	r24, r22
 1dc:	8b 87       	std	Y+11, r24	; 0x0b
 1de:	9c 87       	std	Y+12, r25	; 0x0c
 1e0:	ad 87       	std	Y+13, r26	; 0x0d
 1e2:	be 87       	std	Y+14, r27	; 0x0e
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
 1e4:	20 e0       	ldi	r18, 0x00	; 0
 1e6:	30 e0       	ldi	r19, 0x00	; 0
 1e8:	4a e7       	ldi	r20, 0x7A	; 122
 1ea:	53 e4       	ldi	r21, 0x43	; 67
 1ec:	6b 85       	ldd	r22, Y+11	; 0x0b
 1ee:	7c 85       	ldd	r23, Y+12	; 0x0c
 1f0:	8d 85       	ldd	r24, Y+13	; 0x0d
 1f2:	9e 85       	ldd	r25, Y+14	; 0x0e
 1f4:	0e 94 50 04 	call	0x8a0	; 0x8a0 <__mulsf3>
 1f8:	dc 01       	movw	r26, r24
 1fa:	cb 01       	movw	r24, r22
 1fc:	8f 87       	std	Y+15, r24	; 0x0f
 1fe:	98 8b       	std	Y+16, r25	; 0x10
 200:	a9 8b       	std	Y+17, r26	; 0x11
 202:	ba 8b       	std	Y+18, r27	; 0x12
	if (__tmp < 1.0)
 204:	20 e0       	ldi	r18, 0x00	; 0
 206:	30 e0       	ldi	r19, 0x00	; 0
 208:	40 e8       	ldi	r20, 0x80	; 128
 20a:	5f e3       	ldi	r21, 0x3F	; 63
 20c:	6f 85       	ldd	r22, Y+15	; 0x0f
 20e:	78 89       	ldd	r23, Y+16	; 0x10
 210:	89 89       	ldd	r24, Y+17	; 0x11
 212:	9a 89       	ldd	r25, Y+18	; 0x12
 214:	0e 94 3f 03 	call	0x67e	; 0x67e <__cmpsf2>
 218:	88 23       	and	r24, r24
 21a:	2c f4       	brge	.+10     	; 0x226 <LEDshowOnDisplay+0x132>
		__ticks = 1;
 21c:	81 e0       	ldi	r24, 0x01	; 1
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	9c 8b       	std	Y+20, r25	; 0x14
 222:	8b 8b       	std	Y+19, r24	; 0x13
 224:	3f c0       	rjmp	.+126    	; 0x2a4 <LEDshowOnDisplay+0x1b0>
	else if (__tmp > 65535)
 226:	20 e0       	ldi	r18, 0x00	; 0
 228:	3f ef       	ldi	r19, 0xFF	; 255
 22a:	4f e7       	ldi	r20, 0x7F	; 127
 22c:	57 e4       	ldi	r21, 0x47	; 71
 22e:	6f 85       	ldd	r22, Y+15	; 0x0f
 230:	78 89       	ldd	r23, Y+16	; 0x10
 232:	89 89       	ldd	r24, Y+17	; 0x11
 234:	9a 89       	ldd	r25, Y+18	; 0x12
 236:	0e 94 4c 04 	call	0x898	; 0x898 <__gesf2>
 23a:	18 16       	cp	r1, r24
 23c:	4c f5       	brge	.+82     	; 0x290 <LEDshowOnDisplay+0x19c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 23e:	20 e0       	ldi	r18, 0x00	; 0
 240:	30 e0       	ldi	r19, 0x00	; 0
 242:	40 e2       	ldi	r20, 0x20	; 32
 244:	51 e4       	ldi	r21, 0x41	; 65
 246:	6b 85       	ldd	r22, Y+11	; 0x0b
 248:	7c 85       	ldd	r23, Y+12	; 0x0c
 24a:	8d 85       	ldd	r24, Y+13	; 0x0d
 24c:	9e 85       	ldd	r25, Y+14	; 0x0e
 24e:	0e 94 50 04 	call	0x8a0	; 0x8a0 <__mulsf3>
 252:	dc 01       	movw	r26, r24
 254:	cb 01       	movw	r24, r22
 256:	bc 01       	movw	r22, r24
 258:	cd 01       	movw	r24, r26
 25a:	0e 94 ab 03 	call	0x756	; 0x756 <__fixunssfsi>
 25e:	dc 01       	movw	r26, r24
 260:	cb 01       	movw	r24, r22
 262:	9c 8b       	std	Y+20, r25	; 0x14
 264:	8b 8b       	std	Y+19, r24	; 0x13
 266:	0f c0       	rjmp	.+30     	; 0x286 <LEDshowOnDisplay+0x192>
 268:	89 e1       	ldi	r24, 0x19	; 25
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	9e 8b       	std	Y+22, r25	; 0x16
 26e:	8d 8b       	std	Y+21, r24	; 0x15
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 270:	8d 89       	ldd	r24, Y+21	; 0x15
 272:	9e 89       	ldd	r25, Y+22	; 0x16
 274:	01 97       	sbiw	r24, 0x01	; 1
 276:	f1 f7       	brne	.-4      	; 0x274 <LEDshowOnDisplay+0x180>
 278:	9e 8b       	std	Y+22, r25	; 0x16
 27a:	8d 8b       	std	Y+21, r24	; 0x15
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 27c:	8b 89       	ldd	r24, Y+19	; 0x13
 27e:	9c 89       	ldd	r25, Y+20	; 0x14
 280:	01 97       	sbiw	r24, 0x01	; 1
 282:	9c 8b       	std	Y+20, r25	; 0x14
 284:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 286:	8b 89       	ldd	r24, Y+19	; 0x13
 288:	9c 89       	ldd	r25, Y+20	; 0x14
 28a:	00 97       	sbiw	r24, 0x00	; 0
 28c:	69 f7       	brne	.-38     	; 0x268 <LEDshowOnDisplay+0x174>
 28e:	24 c0       	rjmp	.+72     	; 0x2d8 <LEDshowOnDisplay+0x1e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 290:	6f 85       	ldd	r22, Y+15	; 0x0f
 292:	78 89       	ldd	r23, Y+16	; 0x10
 294:	89 89       	ldd	r24, Y+17	; 0x11
 296:	9a 89       	ldd	r25, Y+18	; 0x12
 298:	0e 94 ab 03 	call	0x756	; 0x756 <__fixunssfsi>
 29c:	dc 01       	movw	r26, r24
 29e:	cb 01       	movw	r24, r22
 2a0:	9c 8b       	std	Y+20, r25	; 0x14
 2a2:	8b 8b       	std	Y+19, r24	; 0x13
 2a4:	8b 89       	ldd	r24, Y+19	; 0x13
 2a6:	9c 89       	ldd	r25, Y+20	; 0x14
 2a8:	98 8f       	std	Y+24, r25	; 0x18
 2aa:	8f 8b       	std	Y+23, r24	; 0x17
 2ac:	8f 89       	ldd	r24, Y+23	; 0x17
 2ae:	98 8d       	ldd	r25, Y+24	; 0x18
 2b0:	01 97       	sbiw	r24, 0x01	; 1
 2b2:	f1 f7       	brne	.-4      	; 0x2b0 <LEDshowOnDisplay+0x1bc>
 2b4:	98 8f       	std	Y+24, r25	; 0x18
 2b6:	8f 8b       	std	Y+23, r24	; 0x17
 2b8:	0f c0       	rjmp	.+30     	; 0x2d8 <LEDshowOnDisplay+0x1e4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
 2ba:	6e 81       	ldd	r22, Y+6	; 0x06
 2bc:	7f 81       	ldd	r23, Y+7	; 0x07
 2be:	88 85       	ldd	r24, Y+8	; 0x08
 2c0:	99 85       	ldd	r25, Y+9	; 0x09
 2c2:	0e 94 ab 03 	call	0x756	; 0x756 <__fixunssfsi>
 2c6:	dc 01       	movw	r26, r24
 2c8:	cb 01       	movw	r24, r22
 2ca:	8a 87       	std	Y+10, r24	; 0x0a
 2cc:	8a 85       	ldd	r24, Y+10	; 0x0a
 2ce:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 2d0:	89 8d       	ldd	r24, Y+25	; 0x19
 2d2:	8a 95       	dec	r24
 2d4:	f1 f7       	brne	.-4      	; 0x2d2 <LEDshowOnDisplay+0x1de>
 2d6:	89 8f       	std	Y+25, r24	; 0x19

		_delay_us(200); //todo what do to?
		LEDPORT =	DOFF;
 2d8:	85 e3       	ldi	r24, 0x35	; 53
 2da:	90 e0       	ldi	r25, 0x00	; 0
 2dc:	2f ef       	ldi	r18, 0xFF	; 255
 2de:	fc 01       	movw	r30, r24
 2e0:	20 83       	st	Z, r18
	{
		_LEDupdateSegments();
		display.changed = 0;
	}

	for(uint8_t seg = 1; seg <= 4; seg++)
 2e2:	89 81       	ldd	r24, Y+1	; 0x01
 2e4:	8f 5f       	subi	r24, 0xFF	; 255
 2e6:	89 83       	std	Y+1, r24	; 0x01
 2e8:	89 81       	ldd	r24, Y+1	; 0x01
 2ea:	85 30       	cpi	r24, 0x05	; 5
 2ec:	08 f4       	brcc	.+2      	; 0x2f0 <LEDshowOnDisplay+0x1fc>
 2ee:	17 cf       	rjmp	.-466    	; 0x11e <LEDshowOnDisplay+0x2a>
		LEDPORT = 	_segments[seg - 1];

		_delay_us(200); //todo what do to?
		LEDPORT =	DOFF;
	}
}
 2f0:	69 96       	adiw	r28, 0x19	; 25
 2f2:	0f b6       	in	r0, 0x3f	; 63
 2f4:	f8 94       	cli
 2f6:	de bf       	out	0x3e, r29	; 62
 2f8:	0f be       	out	0x3f, r0	; 63
 2fa:	cd bf       	out	0x3d, r28	; 61
 2fc:	df 91       	pop	r29
 2fe:	cf 91       	pop	r28
 300:	08 95       	ret

00000302 <_LEDsetValueOnSegment>:

static void _LEDsetValueOnSegment(uint8_t value, uint8_t seg)
{
 302:	cf 93       	push	r28
 304:	df 93       	push	r29
 306:	00 d0       	rcall	.+0      	; 0x308 <_LEDsetValueOnSegment+0x6>
 308:	cd b7       	in	r28, 0x3d	; 61
 30a:	de b7       	in	r29, 0x3e	; 62
 30c:	89 83       	std	Y+1, r24	; 0x01
 30e:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * set value arg1 on segment arg2
	 */
	if(seg > 0 && seg <= 4)
 310:	8a 81       	ldd	r24, Y+2	; 0x02
 312:	88 23       	and	r24, r24
 314:	61 f0       	breq	.+24     	; 0x32e <_LEDsetValueOnSegment+0x2c>
 316:	8a 81       	ldd	r24, Y+2	; 0x02
 318:	85 30       	cpi	r24, 0x05	; 5
 31a:	48 f4       	brcc	.+18     	; 0x32e <_LEDsetValueOnSegment+0x2c>
		_segments[seg - 1] = value;
 31c:	8a 81       	ldd	r24, Y+2	; 0x02
 31e:	88 2f       	mov	r24, r24
 320:	90 e0       	ldi	r25, 0x00	; 0
 322:	01 97       	sbiw	r24, 0x01	; 1
 324:	8c 58       	subi	r24, 0x8C	; 140
 326:	9f 4f       	sbci	r25, 0xFF	; 255
 328:	29 81       	ldd	r18, Y+1	; 0x01
 32a:	fc 01       	movw	r30, r24
 32c:	20 83       	st	Z, r18
}
 32e:	0f 90       	pop	r0
 330:	0f 90       	pop	r0
 332:	df 91       	pop	r29
 334:	cf 91       	pop	r28
 336:	08 95       	ret

00000338 <_LEDsetErrorMessage>:

static void _LEDsetErrorMessage(uint8_t err)
{
 338:	cf 93       	push	r28
 33a:	df 93       	push	r29
 33c:	00 d0       	rcall	.+0      	; 0x33e <_LEDsetErrorMessage+0x6>
 33e:	cd b7       	in	r28, 0x3d	; 61
 340:	de b7       	in	r29, 0x3e	; 62
 342:	8a 83       	std	Y+2, r24	; 0x02
	 * ERR9:	error code out of range
	 */

	uint8_t errDigit;

	if(err > 9)
 344:	8a 81       	ldd	r24, Y+2	; 0x02
 346:	8a 30       	cpi	r24, 0x0A	; 10
 348:	18 f0       	brcs	.+6      	; 0x350 <_LEDsetErrorMessage+0x18>
		errDigit = DIGITS[9];
 34a:	80 e9       	ldi	r24, 0x90	; 144
 34c:	89 83       	std	Y+1, r24	; 0x01
 34e:	08 c0       	rjmp	.+16     	; 0x360 <_LEDsetErrorMessage+0x28>
	else
		errDigit = DIGITS[err];
 350:	8a 81       	ldd	r24, Y+2	; 0x02
 352:	88 2f       	mov	r24, r24
 354:	90 e0       	ldi	r25, 0x00	; 0
 356:	80 5a       	subi	r24, 0xA0	; 160
 358:	9f 4f       	sbci	r25, 0xFF	; 255
 35a:	fc 01       	movw	r30, r24
 35c:	80 81       	ld	r24, Z
 35e:	89 83       	std	Y+1, r24	; 0x01

	_LEDsetValueOnSegment(LETE, 1);
 360:	61 e0       	ldi	r22, 0x01	; 1
 362:	86 e8       	ldi	r24, 0x86	; 134
 364:	0e 94 81 01 	call	0x302	; 0x302 <_LEDsetValueOnSegment>
	_LEDsetValueOnSegment(LETR, 2);
 368:	62 e0       	ldi	r22, 0x02	; 2
 36a:	8f ea       	ldi	r24, 0xAF	; 175
 36c:	0e 94 81 01 	call	0x302	; 0x302 <_LEDsetValueOnSegment>
	_LEDsetValueOnSegment(LETR & DPOINT, 3);
 370:	63 e0       	ldi	r22, 0x03	; 3
 372:	8f e2       	ldi	r24, 0x2F	; 47
 374:	0e 94 81 01 	call	0x302	; 0x302 <_LEDsetValueOnSegment>
	_LEDsetValueOnSegment(errDigit, 4);
 378:	64 e0       	ldi	r22, 0x04	; 4
 37a:	89 81       	ldd	r24, Y+1	; 0x01
 37c:	0e 94 81 01 	call	0x302	; 0x302 <_LEDsetValueOnSegment>
}
 380:	0f 90       	pop	r0
 382:	0f 90       	pop	r0
 384:	df 91       	pop	r29
 386:	cf 91       	pop	r28
 388:	08 95       	ret

0000038a <_LEDupdateSegments>:

static void _LEDupdateSegments()
{
 38a:	cf 93       	push	r28
 38c:	df 93       	push	r29
 38e:	cd b7       	in	r28, 0x3d	; 61
 390:	de b7       	in	r29, 0x3e	; 62
 392:	28 97       	sbiw	r28, 0x08	; 8
 394:	0f b6       	in	r0, 0x3f	; 63
 396:	f8 94       	cli
 398:	de bf       	out	0x3e, r29	; 62
 39a:	0f be       	out	0x3f, r0	; 63
 39c:	cd bf       	out	0x3d, r28	; 61
	/*
	 * converts display variable into struct segments variable
	 * should be called every time a display structure changes
	 */
	if((display.isNegative == 1 && display.number > 999)
 39e:	80 91 80 00 	lds	r24, 0x0080
 3a2:	81 30       	cpi	r24, 0x01	; 1
 3a4:	41 f4       	brne	.+16     	; 0x3b6 <_LEDupdateSegments+0x2c>
 3a6:	80 91 7c 00 	lds	r24, 0x007C
 3aa:	90 91 7d 00 	lds	r25, 0x007D
 3ae:	88 3e       	cpi	r24, 0xE8	; 232
 3b0:	23 e0       	ldi	r18, 0x03	; 3
 3b2:	92 07       	cpc	r25, r18
 3b4:	40 f4       	brcc	.+16     	; 0x3c6 <_LEDupdateSegments+0x3c>
			|| (display.number > 9999))
 3b6:	80 91 7c 00 	lds	r24, 0x007C
 3ba:	90 91 7d 00 	lds	r25, 0x007D
 3be:	80 31       	cpi	r24, 0x10	; 16
 3c0:	37 e2       	ldi	r19, 0x27	; 39
 3c2:	93 07       	cpc	r25, r19
 3c4:	20 f0       	brcs	.+8      	; 0x3ce <_LEDupdateSegments+0x44>
	{
		_LEDsetErrorMessage(0);
 3c6:	80 e0       	ldi	r24, 0x00	; 0
 3c8:	0e 94 9c 01 	call	0x338	; 0x338 <_LEDsetErrorMessage>
 3cc:	1e c1       	rjmp	.+572    	; 0x60a <__stack+0x1ab>
	}
		else
		{
			uint8_t values[4];

			for(uint8_t i = 0; i < 4; i++)
 3ce:	19 82       	std	Y+1, r1	; 0x01
 3d0:	b8 c0       	rjmp	.+368    	; 0x542 <__stack+0xe3>
			{
				values[3 - i] = DIGITS[display.number % 10];
 3d2:	89 81       	ldd	r24, Y+1	; 0x01
 3d4:	88 2f       	mov	r24, r24
 3d6:	90 e0       	ldi	r25, 0x00	; 0
 3d8:	23 e0       	ldi	r18, 0x03	; 3
 3da:	30 e0       	ldi	r19, 0x00	; 0
 3dc:	f9 01       	movw	r30, r18
 3de:	e8 1b       	sub	r30, r24
 3e0:	f9 0b       	sbc	r31, r25
 3e2:	40 91 7c 00 	lds	r20, 0x007C
 3e6:	50 91 7d 00 	lds	r21, 0x007D
 3ea:	9a 01       	movw	r18, r20
 3ec:	ad ec       	ldi	r26, 0xCD	; 205
 3ee:	bc ec       	ldi	r27, 0xCC	; 204
 3f0:	0e 94 30 03 	call	0x660	; 0x660 <__umulhisi3>
 3f4:	96 95       	lsr	r25
 3f6:	87 95       	ror	r24
 3f8:	96 95       	lsr	r25
 3fa:	87 95       	ror	r24
 3fc:	96 95       	lsr	r25
 3fe:	87 95       	ror	r24
 400:	88 0f       	add	r24, r24
 402:	99 1f       	adc	r25, r25
 404:	9c 01       	movw	r18, r24
 406:	22 0f       	add	r18, r18
 408:	33 1f       	adc	r19, r19
 40a:	22 0f       	add	r18, r18
 40c:	33 1f       	adc	r19, r19
 40e:	82 0f       	add	r24, r18
 410:	93 1f       	adc	r25, r19
 412:	ba 01       	movw	r22, r20
 414:	68 1b       	sub	r22, r24
 416:	79 0b       	sbc	r23, r25
 418:	cb 01       	movw	r24, r22
 41a:	80 5a       	subi	r24, 0xA0	; 160
 41c:	9f 4f       	sbci	r25, 0xFF	; 255
 41e:	dc 01       	movw	r26, r24
 420:	2c 91       	ld	r18, X
 422:	ce 01       	movw	r24, r28
 424:	05 96       	adiw	r24, 0x05	; 5
 426:	8e 0f       	add	r24, r30
 428:	9f 1f       	adc	r25, r31
 42a:	fc 01       	movw	r30, r24
 42c:	20 83       	st	Z, r18
				display.number /= 10;
 42e:	80 91 7c 00 	lds	r24, 0x007C
 432:	90 91 7d 00 	lds	r25, 0x007D
 436:	9c 01       	movw	r18, r24
 438:	ad ec       	ldi	r26, 0xCD	; 205
 43a:	bc ec       	ldi	r27, 0xCC	; 204
 43c:	0e 94 30 03 	call	0x660	; 0x660 <__umulhisi3>
 440:	96 95       	lsr	r25
 442:	87 95       	ror	r24
 444:	96 95       	lsr	r25
 446:	87 95       	ror	r24
 448:	96 95       	lsr	r25
 44a:	87 95       	ror	r24
 44c:	90 93 7d 00 	sts	0x007D, r25
 450:	80 93 7c 00 	sts	0x007C, r24

				if(display.number == 0)
 454:	80 91 7c 00 	lds	r24, 0x007C
 458:	90 91 7d 00 	lds	r25, 0x007D
 45c:	00 97       	sbiw	r24, 0x00	; 0
 45e:	09 f0       	breq	.+2      	; 0x462 <__stack+0x3>
 460:	6d c0       	rjmp	.+218    	; 0x53c <__stack+0xdd>
				{
					if(display.skipZeros == 0)
 462:	80 91 81 00 	lds	r24, 0x0081
 466:	88 23       	and	r24, r24
 468:	19 f5       	brne	.+70     	; 0x4b0 <__stack+0x51>
					{
						for(uint8_t j = i + 1; j < 4; j++)
 46a:	89 81       	ldd	r24, Y+1	; 0x01
 46c:	8f 5f       	subi	r24, 0xFF	; 255
 46e:	8a 83       	std	Y+2, r24	; 0x02
 470:	14 c0       	rjmp	.+40     	; 0x49a <__stack+0x3b>
						{
							values[3 - j] = DIGITS[0];
 472:	8a 81       	ldd	r24, Y+2	; 0x02
 474:	88 2f       	mov	r24, r24
 476:	90 e0       	ldi	r25, 0x00	; 0
 478:	23 e0       	ldi	r18, 0x03	; 3
 47a:	30 e0       	ldi	r19, 0x00	; 0
 47c:	a9 01       	movw	r20, r18
 47e:	48 1b       	sub	r20, r24
 480:	59 0b       	sbc	r21, r25
 482:	ca 01       	movw	r24, r20
 484:	40 ec       	ldi	r20, 0xC0	; 192
 486:	9e 01       	movw	r18, r28
 488:	2b 5f       	subi	r18, 0xFB	; 251
 48a:	3f 4f       	sbci	r19, 0xFF	; 255
 48c:	82 0f       	add	r24, r18
 48e:	93 1f       	adc	r25, r19
 490:	dc 01       	movw	r26, r24
 492:	4c 93       	st	X, r20

				if(display.number == 0)
				{
					if(display.skipZeros == 0)
					{
						for(uint8_t j = i + 1; j < 4; j++)
 494:	8a 81       	ldd	r24, Y+2	; 0x02
 496:	8f 5f       	subi	r24, 0xFF	; 255
 498:	8a 83       	std	Y+2, r24	; 0x02
 49a:	8a 81       	ldd	r24, Y+2	; 0x02
 49c:	84 30       	cpi	r24, 0x04	; 4
 49e:	48 f3       	brcs	.-46     	; 0x472 <__stack+0x13>
						{
							values[3 - j] = DIGITS[0];
						}

						if(display.isNegative == 1)
 4a0:	80 91 80 00 	lds	r24, 0x0080
 4a4:	81 30       	cpi	r24, 0x01	; 1
 4a6:	09 f0       	breq	.+2      	; 0x4aa <__stack+0x4b>
 4a8:	48 c0       	rjmp	.+144    	; 0x53a <__stack+0xdb>
							values[0] = DMINUS;
 4aa:	8f eb       	ldi	r24, 0xBF	; 191
 4ac:	8d 83       	std	Y+5, r24	; 0x05

						if(display.isNegative == 1)
							values[2 - i] = DMINUS;
					}

					break;
 4ae:	4d c0       	rjmp	.+154    	; 0x54a <__stack+0xeb>
						if(display.isNegative == 1)
							values[0] = DMINUS;
					}
					else
					{
						for(uint8_t j = i + 1; j < 4; j++)
 4b0:	89 81       	ldd	r24, Y+1	; 0x01
 4b2:	8f 5f       	subi	r24, 0xFF	; 255
 4b4:	8b 83       	std	Y+3, r24	; 0x03
 4b6:	28 c0       	rjmp	.+80     	; 0x508 <__stack+0xa9>
						{
							if(!((display.pointPos >> j) == 1) && (display.forceFractZero == 1))
 4b8:	80 91 7e 00 	lds	r24, 0x007E
 4bc:	88 2f       	mov	r24, r24
 4be:	90 e0       	ldi	r25, 0x00	; 0
 4c0:	2b 81       	ldd	r18, Y+3	; 0x03
 4c2:	22 2f       	mov	r18, r18
 4c4:	30 e0       	ldi	r19, 0x00	; 0
 4c6:	02 2e       	mov	r0, r18
 4c8:	02 c0       	rjmp	.+4      	; 0x4ce <__stack+0x6f>
 4ca:	95 95       	asr	r25
 4cc:	87 95       	ror	r24
 4ce:	0a 94       	dec	r0
 4d0:	e2 f7       	brpl	.-8      	; 0x4ca <__stack+0x6b>
 4d2:	81 30       	cpi	r24, 0x01	; 1
 4d4:	91 05       	cpc	r25, r1
 4d6:	a9 f0       	breq	.+42     	; 0x502 <__stack+0xa3>
 4d8:	80 91 83 00 	lds	r24, 0x0083
 4dc:	81 30       	cpi	r24, 0x01	; 1
 4de:	89 f4       	brne	.+34     	; 0x502 <__stack+0xa3>
								values[3 - j] = DOFF;
 4e0:	8b 81       	ldd	r24, Y+3	; 0x03
 4e2:	88 2f       	mov	r24, r24
 4e4:	90 e0       	ldi	r25, 0x00	; 0
 4e6:	23 e0       	ldi	r18, 0x03	; 3
 4e8:	30 e0       	ldi	r19, 0x00	; 0
 4ea:	f9 01       	movw	r30, r18
 4ec:	e8 1b       	sub	r30, r24
 4ee:	f9 0b       	sbc	r31, r25
 4f0:	cf 01       	movw	r24, r30
 4f2:	9e 01       	movw	r18, r28
 4f4:	2b 5f       	subi	r18, 0xFB	; 251
 4f6:	3f 4f       	sbci	r19, 0xFF	; 255
 4f8:	82 0f       	add	r24, r18
 4fa:	93 1f       	adc	r25, r19
 4fc:	2f ef       	ldi	r18, 0xFF	; 255
 4fe:	dc 01       	movw	r26, r24
 500:	2c 93       	st	X, r18
						if(display.isNegative == 1)
							values[0] = DMINUS;
					}
					else
					{
						for(uint8_t j = i + 1; j < 4; j++)
 502:	8b 81       	ldd	r24, Y+3	; 0x03
 504:	8f 5f       	subi	r24, 0xFF	; 255
 506:	8b 83       	std	Y+3, r24	; 0x03
 508:	8b 81       	ldd	r24, Y+3	; 0x03
 50a:	84 30       	cpi	r24, 0x04	; 4
 50c:	a8 f2       	brcs	.-86     	; 0x4b8 <__stack+0x59>
						{
							if(!((display.pointPos >> j) == 1) && (display.forceFractZero == 1))
								values[3 - j] = DOFF;
						}

						if(display.isNegative == 1)
 50e:	80 91 80 00 	lds	r24, 0x0080
 512:	81 30       	cpi	r24, 0x01	; 1
 514:	91 f4       	brne	.+36     	; 0x53a <__stack+0xdb>
							values[2 - i] = DMINUS;
 516:	89 81       	ldd	r24, Y+1	; 0x01
 518:	88 2f       	mov	r24, r24
 51a:	90 e0       	ldi	r25, 0x00	; 0
 51c:	22 e0       	ldi	r18, 0x02	; 2
 51e:	30 e0       	ldi	r19, 0x00	; 0
 520:	f9 01       	movw	r30, r18
 522:	e8 1b       	sub	r30, r24
 524:	f9 0b       	sbc	r31, r25
 526:	cf 01       	movw	r24, r30
 528:	9e 01       	movw	r18, r28
 52a:	2b 5f       	subi	r18, 0xFB	; 251
 52c:	3f 4f       	sbci	r19, 0xFF	; 255
 52e:	82 0f       	add	r24, r18
 530:	93 1f       	adc	r25, r19
 532:	2f eb       	ldi	r18, 0xBF	; 191
 534:	dc 01       	movw	r26, r24
 536:	2c 93       	st	X, r18
					}

					break;
 538:	08 c0       	rjmp	.+16     	; 0x54a <__stack+0xeb>
 53a:	07 c0       	rjmp	.+14     	; 0x54a <__stack+0xeb>
	}
		else
		{
			uint8_t values[4];

			for(uint8_t i = 0; i < 4; i++)
 53c:	89 81       	ldd	r24, Y+1	; 0x01
 53e:	8f 5f       	subi	r24, 0xFF	; 255
 540:	89 83       	std	Y+1, r24	; 0x01
 542:	89 81       	ldd	r24, Y+1	; 0x01
 544:	84 30       	cpi	r24, 0x04	; 4
 546:	08 f4       	brcc	.+2      	; 0x54a <__stack+0xeb>
 548:	44 cf       	rjmp	.-376    	; 0x3d2 <_LEDupdateSegments+0x48>

					break;
				}
			}

			for(uint8_t i = 0; i < 4; i++)
 54a:	1c 82       	std	Y+4, r1	; 0x04
 54c:	5a c0       	rjmp	.+180    	; 0x602 <__stack+0x1a3>
			{
				if((display.blinkPos & (1 <<(3 - i))) != 0)
 54e:	80 91 7f 00 	lds	r24, 0x007F
 552:	88 2f       	mov	r24, r24
 554:	90 e0       	ldi	r25, 0x00	; 0
 556:	2c 81       	ldd	r18, Y+4	; 0x04
 558:	22 2f       	mov	r18, r18
 55a:	30 e0       	ldi	r19, 0x00	; 0
 55c:	43 e0       	ldi	r20, 0x03	; 3
 55e:	50 e0       	ldi	r21, 0x00	; 0
 560:	fa 01       	movw	r30, r20
 562:	e2 1b       	sub	r30, r18
 564:	f3 0b       	sbc	r31, r19
 566:	9f 01       	movw	r18, r30
 568:	02 2e       	mov	r0, r18
 56a:	02 c0       	rjmp	.+4      	; 0x570 <__stack+0x111>
 56c:	95 95       	asr	r25
 56e:	87 95       	ror	r24
 570:	0a 94       	dec	r0
 572:	e2 f7       	brpl	.-8      	; 0x56c <__stack+0x10d>
 574:	81 70       	andi	r24, 0x01	; 1
 576:	99 27       	eor	r25, r25
 578:	00 97       	sbiw	r24, 0x00	; 0
 57a:	49 f0       	breq	.+18     	; 0x58e <__stack+0x12f>
					_segments[i] = DOFF;
 57c:	8c 81       	ldd	r24, Y+4	; 0x04
 57e:	88 2f       	mov	r24, r24
 580:	90 e0       	ldi	r25, 0x00	; 0
 582:	8c 58       	subi	r24, 0x8C	; 140
 584:	9f 4f       	sbci	r25, 0xFF	; 255
 586:	2f ef       	ldi	r18, 0xFF	; 255
 588:	dc 01       	movw	r26, r24
 58a:	2c 93       	st	X, r18
 58c:	37 c0       	rjmp	.+110    	; 0x5fc <__stack+0x19d>
				else
				{
					_segments[i] = values[i];
 58e:	8c 81       	ldd	r24, Y+4	; 0x04
 590:	88 2f       	mov	r24, r24
 592:	90 e0       	ldi	r25, 0x00	; 0
 594:	2c 81       	ldd	r18, Y+4	; 0x04
 596:	22 2f       	mov	r18, r18
 598:	30 e0       	ldi	r19, 0x00	; 0
 59a:	ae 01       	movw	r20, r28
 59c:	4b 5f       	subi	r20, 0xFB	; 251
 59e:	5f 4f       	sbci	r21, 0xFF	; 255
 5a0:	24 0f       	add	r18, r20
 5a2:	35 1f       	adc	r19, r21
 5a4:	f9 01       	movw	r30, r18
 5a6:	20 81       	ld	r18, Z
 5a8:	8c 58       	subi	r24, 0x8C	; 140
 5aa:	9f 4f       	sbci	r25, 0xFF	; 255
 5ac:	dc 01       	movw	r26, r24
 5ae:	2c 93       	st	X, r18

					if((display.pointPos & (1 << (3 - i))) != 0)
 5b0:	80 91 7e 00 	lds	r24, 0x007E
 5b4:	88 2f       	mov	r24, r24
 5b6:	90 e0       	ldi	r25, 0x00	; 0
 5b8:	2c 81       	ldd	r18, Y+4	; 0x04
 5ba:	22 2f       	mov	r18, r18
 5bc:	30 e0       	ldi	r19, 0x00	; 0
 5be:	43 e0       	ldi	r20, 0x03	; 3
 5c0:	50 e0       	ldi	r21, 0x00	; 0
 5c2:	fa 01       	movw	r30, r20
 5c4:	e2 1b       	sub	r30, r18
 5c6:	f3 0b       	sbc	r31, r19
 5c8:	9f 01       	movw	r18, r30
 5ca:	02 2e       	mov	r0, r18
 5cc:	02 c0       	rjmp	.+4      	; 0x5d2 <__stack+0x173>
 5ce:	95 95       	asr	r25
 5d0:	87 95       	ror	r24
 5d2:	0a 94       	dec	r0
 5d4:	e2 f7       	brpl	.-8      	; 0x5ce <__stack+0x16f>
 5d6:	81 70       	andi	r24, 0x01	; 1
 5d8:	99 27       	eor	r25, r25
 5da:	00 97       	sbiw	r24, 0x00	; 0
 5dc:	79 f0       	breq	.+30     	; 0x5fc <__stack+0x19d>
						_segments[i] &= DPOINT;
 5de:	8c 81       	ldd	r24, Y+4	; 0x04
 5e0:	88 2f       	mov	r24, r24
 5e2:	90 e0       	ldi	r25, 0x00	; 0
 5e4:	2c 81       	ldd	r18, Y+4	; 0x04
 5e6:	22 2f       	mov	r18, r18
 5e8:	30 e0       	ldi	r19, 0x00	; 0
 5ea:	2c 58       	subi	r18, 0x8C	; 140
 5ec:	3f 4f       	sbci	r19, 0xFF	; 255
 5ee:	d9 01       	movw	r26, r18
 5f0:	2c 91       	ld	r18, X
 5f2:	2f 77       	andi	r18, 0x7F	; 127
 5f4:	8c 58       	subi	r24, 0x8C	; 140
 5f6:	9f 4f       	sbci	r25, 0xFF	; 255
 5f8:	fc 01       	movw	r30, r24
 5fa:	20 83       	st	Z, r18

					break;
				}
			}

			for(uint8_t i = 0; i < 4; i++)
 5fc:	8c 81       	ldd	r24, Y+4	; 0x04
 5fe:	8f 5f       	subi	r24, 0xFF	; 255
 600:	8c 83       	std	Y+4, r24	; 0x04
 602:	8c 81       	ldd	r24, Y+4	; 0x04
 604:	84 30       	cpi	r24, 0x04	; 4
 606:	08 f4       	brcc	.+2      	; 0x60a <__stack+0x1ab>
 608:	a2 cf       	rjmp	.-188    	; 0x54e <__stack+0xef>
					if((display.pointPos & (1 << (3 - i))) != 0)
						_segments[i] &= DPOINT;
				}
			}
		}
}
 60a:	28 96       	adiw	r28, 0x08	; 8
 60c:	0f b6       	in	r0, 0x3f	; 63
 60e:	f8 94       	cli
 610:	de bf       	out	0x3e, r29	; 62
 612:	0f be       	out	0x3f, r0	; 63
 614:	cd bf       	out	0x3d, r28	; 61
 616:	df 91       	pop	r29
 618:	cf 91       	pop	r28
 61a:	08 95       	ret

0000061c <main>:
 */

#include "leddisplay.h"

int main()
{
 61c:	cf 93       	push	r28
 61e:	df 93       	push	r29
 620:	cd b7       	in	r28, 0x3d	; 61
 622:	de b7       	in	r29, 0x3e	; 62
	LEDInit();
 624:	0e 94 49 00 	call	0x92	; 0x92 <LEDInit>

	display.changed = 1;
 628:	81 e0       	ldi	r24, 0x01	; 1
 62a:	80 93 82 00 	sts	0x0082, r24
	display.number = 233;
 62e:	89 ee       	ldi	r24, 0xE9	; 233
 630:	90 e0       	ldi	r25, 0x00	; 0
 632:	90 93 7d 00 	sts	0x007D, r25
 636:	80 93 7c 00 	sts	0x007C, r24
	display.blinkPos = 0b0000;
 63a:	10 92 7f 00 	sts	0x007F, r1
	display.pointPos = 0b1000;
 63e:	88 e0       	ldi	r24, 0x08	; 8
 640:	80 93 7e 00 	sts	0x007E, r24
	display.isNegative = 1;
 644:	81 e0       	ldi	r24, 0x01	; 1
 646:	80 93 80 00 	sts	0x0080, r24
	display.skipZeros = 1;
 64a:	81 e0       	ldi	r24, 0x01	; 1
 64c:	80 93 81 00 	sts	0x0081, r24
	display.forceFractZero = 1;
 650:	81 e0       	ldi	r24, 0x01	; 1
 652:	80 93 83 00 	sts	0x0083, r24
	while(1)
	{
		LEDTest();
 656:	0e 94 6b 00 	call	0xd6	; 0xd6 <LEDTest>
		LEDshowOnDisplay();
 65a:	0e 94 7a 00 	call	0xf4	; 0xf4 <LEDshowOnDisplay>
	}
 65e:	fb cf       	rjmp	.-10     	; 0x656 <main+0x3a>

00000660 <__umulhisi3>:
 660:	a2 9f       	mul	r26, r18
 662:	b0 01       	movw	r22, r0
 664:	b3 9f       	mul	r27, r19
 666:	c0 01       	movw	r24, r0
 668:	a3 9f       	mul	r26, r19
 66a:	70 0d       	add	r23, r0
 66c:	81 1d       	adc	r24, r1
 66e:	11 24       	eor	r1, r1
 670:	91 1d       	adc	r25, r1
 672:	b2 9f       	mul	r27, r18
 674:	70 0d       	add	r23, r0
 676:	81 1d       	adc	r24, r1
 678:	11 24       	eor	r1, r1
 67a:	91 1d       	adc	r25, r1
 67c:	08 95       	ret

0000067e <__cmpsf2>:
 67e:	97 d0       	rcall	.+302    	; 0x7ae <__fp_cmp>
 680:	08 f4       	brcc	.+2      	; 0x684 <__cmpsf2+0x6>
 682:	81 e0       	ldi	r24, 0x01	; 1
 684:	08 95       	ret

00000686 <__divsf3>:
 686:	0c d0       	rcall	.+24     	; 0x6a0 <__divsf3x>
 688:	cd c0       	rjmp	.+410    	; 0x824 <__fp_round>
 68a:	c5 d0       	rcall	.+394    	; 0x816 <__fp_pscB>
 68c:	40 f0       	brcs	.+16     	; 0x69e <__divsf3+0x18>
 68e:	bc d0       	rcall	.+376    	; 0x808 <__fp_pscA>
 690:	30 f0       	brcs	.+12     	; 0x69e <__divsf3+0x18>
 692:	21 f4       	brne	.+8      	; 0x69c <__divsf3+0x16>
 694:	5f 3f       	cpi	r21, 0xFF	; 255
 696:	19 f0       	breq	.+6      	; 0x69e <__divsf3+0x18>
 698:	ae c0       	rjmp	.+348    	; 0x7f6 <__fp_inf>
 69a:	51 11       	cpse	r21, r1
 69c:	f7 c0       	rjmp	.+494    	; 0x88c <__fp_szero>
 69e:	b1 c0       	rjmp	.+354    	; 0x802 <__fp_nan>

000006a0 <__divsf3x>:
 6a0:	d2 d0       	rcall	.+420    	; 0x846 <__fp_split3>
 6a2:	98 f3       	brcs	.-26     	; 0x68a <__divsf3+0x4>

000006a4 <__divsf3_pse>:
 6a4:	99 23       	and	r25, r25
 6a6:	c9 f3       	breq	.-14     	; 0x69a <__divsf3+0x14>
 6a8:	55 23       	and	r21, r21
 6aa:	b1 f3       	breq	.-20     	; 0x698 <__divsf3+0x12>
 6ac:	95 1b       	sub	r25, r21
 6ae:	55 0b       	sbc	r21, r21
 6b0:	bb 27       	eor	r27, r27
 6b2:	aa 27       	eor	r26, r26
 6b4:	62 17       	cp	r22, r18
 6b6:	73 07       	cpc	r23, r19
 6b8:	84 07       	cpc	r24, r20
 6ba:	38 f0       	brcs	.+14     	; 0x6ca <__divsf3_pse+0x26>
 6bc:	9f 5f       	subi	r25, 0xFF	; 255
 6be:	5f 4f       	sbci	r21, 0xFF	; 255
 6c0:	22 0f       	add	r18, r18
 6c2:	33 1f       	adc	r19, r19
 6c4:	44 1f       	adc	r20, r20
 6c6:	aa 1f       	adc	r26, r26
 6c8:	a9 f3       	breq	.-22     	; 0x6b4 <__divsf3_pse+0x10>
 6ca:	33 d0       	rcall	.+102    	; 0x732 <__divsf3_pse+0x8e>
 6cc:	0e 2e       	mov	r0, r30
 6ce:	3a f0       	brmi	.+14     	; 0x6de <__divsf3_pse+0x3a>
 6d0:	e0 e8       	ldi	r30, 0x80	; 128
 6d2:	30 d0       	rcall	.+96     	; 0x734 <__divsf3_pse+0x90>
 6d4:	91 50       	subi	r25, 0x01	; 1
 6d6:	50 40       	sbci	r21, 0x00	; 0
 6d8:	e6 95       	lsr	r30
 6da:	00 1c       	adc	r0, r0
 6dc:	ca f7       	brpl	.-14     	; 0x6d0 <__divsf3_pse+0x2c>
 6de:	29 d0       	rcall	.+82     	; 0x732 <__divsf3_pse+0x8e>
 6e0:	fe 2f       	mov	r31, r30
 6e2:	27 d0       	rcall	.+78     	; 0x732 <__divsf3_pse+0x8e>
 6e4:	66 0f       	add	r22, r22
 6e6:	77 1f       	adc	r23, r23
 6e8:	88 1f       	adc	r24, r24
 6ea:	bb 1f       	adc	r27, r27
 6ec:	26 17       	cp	r18, r22
 6ee:	37 07       	cpc	r19, r23
 6f0:	48 07       	cpc	r20, r24
 6f2:	ab 07       	cpc	r26, r27
 6f4:	b0 e8       	ldi	r27, 0x80	; 128
 6f6:	09 f0       	breq	.+2      	; 0x6fa <__divsf3_pse+0x56>
 6f8:	bb 0b       	sbc	r27, r27
 6fa:	80 2d       	mov	r24, r0
 6fc:	bf 01       	movw	r22, r30
 6fe:	ff 27       	eor	r31, r31
 700:	93 58       	subi	r25, 0x83	; 131
 702:	5f 4f       	sbci	r21, 0xFF	; 255
 704:	2a f0       	brmi	.+10     	; 0x710 <__divsf3_pse+0x6c>
 706:	9e 3f       	cpi	r25, 0xFE	; 254
 708:	51 05       	cpc	r21, r1
 70a:	68 f0       	brcs	.+26     	; 0x726 <__divsf3_pse+0x82>
 70c:	74 c0       	rjmp	.+232    	; 0x7f6 <__fp_inf>
 70e:	be c0       	rjmp	.+380    	; 0x88c <__fp_szero>
 710:	5f 3f       	cpi	r21, 0xFF	; 255
 712:	ec f3       	brlt	.-6      	; 0x70e <__divsf3_pse+0x6a>
 714:	98 3e       	cpi	r25, 0xE8	; 232
 716:	dc f3       	brlt	.-10     	; 0x70e <__divsf3_pse+0x6a>
 718:	86 95       	lsr	r24
 71a:	77 95       	ror	r23
 71c:	67 95       	ror	r22
 71e:	b7 95       	ror	r27
 720:	f7 95       	ror	r31
 722:	9f 5f       	subi	r25, 0xFF	; 255
 724:	c9 f7       	brne	.-14     	; 0x718 <__divsf3_pse+0x74>
 726:	88 0f       	add	r24, r24
 728:	91 1d       	adc	r25, r1
 72a:	96 95       	lsr	r25
 72c:	87 95       	ror	r24
 72e:	97 f9       	bld	r25, 7
 730:	08 95       	ret
 732:	e1 e0       	ldi	r30, 0x01	; 1
 734:	66 0f       	add	r22, r22
 736:	77 1f       	adc	r23, r23
 738:	88 1f       	adc	r24, r24
 73a:	bb 1f       	adc	r27, r27
 73c:	62 17       	cp	r22, r18
 73e:	73 07       	cpc	r23, r19
 740:	84 07       	cpc	r24, r20
 742:	ba 07       	cpc	r27, r26
 744:	20 f0       	brcs	.+8      	; 0x74e <__divsf3_pse+0xaa>
 746:	62 1b       	sub	r22, r18
 748:	73 0b       	sbc	r23, r19
 74a:	84 0b       	sbc	r24, r20
 74c:	ba 0b       	sbc	r27, r26
 74e:	ee 1f       	adc	r30, r30
 750:	88 f7       	brcc	.-30     	; 0x734 <__divsf3_pse+0x90>
 752:	e0 95       	com	r30
 754:	08 95       	ret

00000756 <__fixunssfsi>:
 756:	7f d0       	rcall	.+254    	; 0x856 <__fp_splitA>
 758:	88 f0       	brcs	.+34     	; 0x77c <__fixunssfsi+0x26>
 75a:	9f 57       	subi	r25, 0x7F	; 127
 75c:	90 f0       	brcs	.+36     	; 0x782 <__fixunssfsi+0x2c>
 75e:	b9 2f       	mov	r27, r25
 760:	99 27       	eor	r25, r25
 762:	b7 51       	subi	r27, 0x17	; 23
 764:	a0 f0       	brcs	.+40     	; 0x78e <__fixunssfsi+0x38>
 766:	d1 f0       	breq	.+52     	; 0x79c <__fixunssfsi+0x46>
 768:	66 0f       	add	r22, r22
 76a:	77 1f       	adc	r23, r23
 76c:	88 1f       	adc	r24, r24
 76e:	99 1f       	adc	r25, r25
 770:	1a f0       	brmi	.+6      	; 0x778 <__fixunssfsi+0x22>
 772:	ba 95       	dec	r27
 774:	c9 f7       	brne	.-14     	; 0x768 <__fixunssfsi+0x12>
 776:	12 c0       	rjmp	.+36     	; 0x79c <__fixunssfsi+0x46>
 778:	b1 30       	cpi	r27, 0x01	; 1
 77a:	81 f0       	breq	.+32     	; 0x79c <__fixunssfsi+0x46>
 77c:	86 d0       	rcall	.+268    	; 0x88a <__fp_zero>
 77e:	b1 e0       	ldi	r27, 0x01	; 1
 780:	08 95       	ret
 782:	83 c0       	rjmp	.+262    	; 0x88a <__fp_zero>
 784:	67 2f       	mov	r22, r23
 786:	78 2f       	mov	r23, r24
 788:	88 27       	eor	r24, r24
 78a:	b8 5f       	subi	r27, 0xF8	; 248
 78c:	39 f0       	breq	.+14     	; 0x79c <__fixunssfsi+0x46>
 78e:	b9 3f       	cpi	r27, 0xF9	; 249
 790:	cc f3       	brlt	.-14     	; 0x784 <__fixunssfsi+0x2e>
 792:	86 95       	lsr	r24
 794:	77 95       	ror	r23
 796:	67 95       	ror	r22
 798:	b3 95       	inc	r27
 79a:	d9 f7       	brne	.-10     	; 0x792 <__fixunssfsi+0x3c>
 79c:	3e f4       	brtc	.+14     	; 0x7ac <__fixunssfsi+0x56>
 79e:	90 95       	com	r25
 7a0:	80 95       	com	r24
 7a2:	70 95       	com	r23
 7a4:	61 95       	neg	r22
 7a6:	7f 4f       	sbci	r23, 0xFF	; 255
 7a8:	8f 4f       	sbci	r24, 0xFF	; 255
 7aa:	9f 4f       	sbci	r25, 0xFF	; 255
 7ac:	08 95       	ret

000007ae <__fp_cmp>:
 7ae:	99 0f       	add	r25, r25
 7b0:	00 08       	sbc	r0, r0
 7b2:	55 0f       	add	r21, r21
 7b4:	aa 0b       	sbc	r26, r26
 7b6:	e0 e8       	ldi	r30, 0x80	; 128
 7b8:	fe ef       	ldi	r31, 0xFE	; 254
 7ba:	16 16       	cp	r1, r22
 7bc:	17 06       	cpc	r1, r23
 7be:	e8 07       	cpc	r30, r24
 7c0:	f9 07       	cpc	r31, r25
 7c2:	c0 f0       	brcs	.+48     	; 0x7f4 <__fp_cmp+0x46>
 7c4:	12 16       	cp	r1, r18
 7c6:	13 06       	cpc	r1, r19
 7c8:	e4 07       	cpc	r30, r20
 7ca:	f5 07       	cpc	r31, r21
 7cc:	98 f0       	brcs	.+38     	; 0x7f4 <__fp_cmp+0x46>
 7ce:	62 1b       	sub	r22, r18
 7d0:	73 0b       	sbc	r23, r19
 7d2:	84 0b       	sbc	r24, r20
 7d4:	95 0b       	sbc	r25, r21
 7d6:	39 f4       	brne	.+14     	; 0x7e6 <__fp_cmp+0x38>
 7d8:	0a 26       	eor	r0, r26
 7da:	61 f0       	breq	.+24     	; 0x7f4 <__fp_cmp+0x46>
 7dc:	23 2b       	or	r18, r19
 7de:	24 2b       	or	r18, r20
 7e0:	25 2b       	or	r18, r21
 7e2:	21 f4       	brne	.+8      	; 0x7ec <__fp_cmp+0x3e>
 7e4:	08 95       	ret
 7e6:	0a 26       	eor	r0, r26
 7e8:	09 f4       	brne	.+2      	; 0x7ec <__fp_cmp+0x3e>
 7ea:	a1 40       	sbci	r26, 0x01	; 1
 7ec:	a6 95       	lsr	r26
 7ee:	8f ef       	ldi	r24, 0xFF	; 255
 7f0:	81 1d       	adc	r24, r1
 7f2:	81 1d       	adc	r24, r1
 7f4:	08 95       	ret

000007f6 <__fp_inf>:
 7f6:	97 f9       	bld	r25, 7
 7f8:	9f 67       	ori	r25, 0x7F	; 127
 7fa:	80 e8       	ldi	r24, 0x80	; 128
 7fc:	70 e0       	ldi	r23, 0x00	; 0
 7fe:	60 e0       	ldi	r22, 0x00	; 0
 800:	08 95       	ret

00000802 <__fp_nan>:
 802:	9f ef       	ldi	r25, 0xFF	; 255
 804:	80 ec       	ldi	r24, 0xC0	; 192
 806:	08 95       	ret

00000808 <__fp_pscA>:
 808:	00 24       	eor	r0, r0
 80a:	0a 94       	dec	r0
 80c:	16 16       	cp	r1, r22
 80e:	17 06       	cpc	r1, r23
 810:	18 06       	cpc	r1, r24
 812:	09 06       	cpc	r0, r25
 814:	08 95       	ret

00000816 <__fp_pscB>:
 816:	00 24       	eor	r0, r0
 818:	0a 94       	dec	r0
 81a:	12 16       	cp	r1, r18
 81c:	13 06       	cpc	r1, r19
 81e:	14 06       	cpc	r1, r20
 820:	05 06       	cpc	r0, r21
 822:	08 95       	ret

00000824 <__fp_round>:
 824:	09 2e       	mov	r0, r25
 826:	03 94       	inc	r0
 828:	00 0c       	add	r0, r0
 82a:	11 f4       	brne	.+4      	; 0x830 <__fp_round+0xc>
 82c:	88 23       	and	r24, r24
 82e:	52 f0       	brmi	.+20     	; 0x844 <__fp_round+0x20>
 830:	bb 0f       	add	r27, r27
 832:	40 f4       	brcc	.+16     	; 0x844 <__fp_round+0x20>
 834:	bf 2b       	or	r27, r31
 836:	11 f4       	brne	.+4      	; 0x83c <__fp_round+0x18>
 838:	60 ff       	sbrs	r22, 0
 83a:	04 c0       	rjmp	.+8      	; 0x844 <__fp_round+0x20>
 83c:	6f 5f       	subi	r22, 0xFF	; 255
 83e:	7f 4f       	sbci	r23, 0xFF	; 255
 840:	8f 4f       	sbci	r24, 0xFF	; 255
 842:	9f 4f       	sbci	r25, 0xFF	; 255
 844:	08 95       	ret

00000846 <__fp_split3>:
 846:	57 fd       	sbrc	r21, 7
 848:	90 58       	subi	r25, 0x80	; 128
 84a:	44 0f       	add	r20, r20
 84c:	55 1f       	adc	r21, r21
 84e:	59 f0       	breq	.+22     	; 0x866 <__fp_splitA+0x10>
 850:	5f 3f       	cpi	r21, 0xFF	; 255
 852:	71 f0       	breq	.+28     	; 0x870 <__fp_splitA+0x1a>
 854:	47 95       	ror	r20

00000856 <__fp_splitA>:
 856:	88 0f       	add	r24, r24
 858:	97 fb       	bst	r25, 7
 85a:	99 1f       	adc	r25, r25
 85c:	61 f0       	breq	.+24     	; 0x876 <__fp_splitA+0x20>
 85e:	9f 3f       	cpi	r25, 0xFF	; 255
 860:	79 f0       	breq	.+30     	; 0x880 <__fp_splitA+0x2a>
 862:	87 95       	ror	r24
 864:	08 95       	ret
 866:	12 16       	cp	r1, r18
 868:	13 06       	cpc	r1, r19
 86a:	14 06       	cpc	r1, r20
 86c:	55 1f       	adc	r21, r21
 86e:	f2 cf       	rjmp	.-28     	; 0x854 <__fp_split3+0xe>
 870:	46 95       	lsr	r20
 872:	f1 df       	rcall	.-30     	; 0x856 <__fp_splitA>
 874:	08 c0       	rjmp	.+16     	; 0x886 <__fp_splitA+0x30>
 876:	16 16       	cp	r1, r22
 878:	17 06       	cpc	r1, r23
 87a:	18 06       	cpc	r1, r24
 87c:	99 1f       	adc	r25, r25
 87e:	f1 cf       	rjmp	.-30     	; 0x862 <__fp_splitA+0xc>
 880:	86 95       	lsr	r24
 882:	71 05       	cpc	r23, r1
 884:	61 05       	cpc	r22, r1
 886:	08 94       	sec
 888:	08 95       	ret

0000088a <__fp_zero>:
 88a:	e8 94       	clt

0000088c <__fp_szero>:
 88c:	bb 27       	eor	r27, r27
 88e:	66 27       	eor	r22, r22
 890:	77 27       	eor	r23, r23
 892:	cb 01       	movw	r24, r22
 894:	97 f9       	bld	r25, 7
 896:	08 95       	ret

00000898 <__gesf2>:
 898:	8a df       	rcall	.-236    	; 0x7ae <__fp_cmp>
 89a:	08 f4       	brcc	.+2      	; 0x89e <__gesf2+0x6>
 89c:	8f ef       	ldi	r24, 0xFF	; 255
 89e:	08 95       	ret

000008a0 <__mulsf3>:
 8a0:	0b d0       	rcall	.+22     	; 0x8b8 <__mulsf3x>
 8a2:	c0 cf       	rjmp	.-128    	; 0x824 <__fp_round>
 8a4:	b1 df       	rcall	.-158    	; 0x808 <__fp_pscA>
 8a6:	28 f0       	brcs	.+10     	; 0x8b2 <__mulsf3+0x12>
 8a8:	b6 df       	rcall	.-148    	; 0x816 <__fp_pscB>
 8aa:	18 f0       	brcs	.+6      	; 0x8b2 <__mulsf3+0x12>
 8ac:	95 23       	and	r25, r21
 8ae:	09 f0       	breq	.+2      	; 0x8b2 <__mulsf3+0x12>
 8b0:	a2 cf       	rjmp	.-188    	; 0x7f6 <__fp_inf>
 8b2:	a7 cf       	rjmp	.-178    	; 0x802 <__fp_nan>
 8b4:	11 24       	eor	r1, r1
 8b6:	ea cf       	rjmp	.-44     	; 0x88c <__fp_szero>

000008b8 <__mulsf3x>:
 8b8:	c6 df       	rcall	.-116    	; 0x846 <__fp_split3>
 8ba:	a0 f3       	brcs	.-24     	; 0x8a4 <__mulsf3+0x4>

000008bc <__mulsf3_pse>:
 8bc:	95 9f       	mul	r25, r21
 8be:	d1 f3       	breq	.-12     	; 0x8b4 <__mulsf3+0x14>
 8c0:	95 0f       	add	r25, r21
 8c2:	50 e0       	ldi	r21, 0x00	; 0
 8c4:	55 1f       	adc	r21, r21
 8c6:	62 9f       	mul	r22, r18
 8c8:	f0 01       	movw	r30, r0
 8ca:	72 9f       	mul	r23, r18
 8cc:	bb 27       	eor	r27, r27
 8ce:	f0 0d       	add	r31, r0
 8d0:	b1 1d       	adc	r27, r1
 8d2:	63 9f       	mul	r22, r19
 8d4:	aa 27       	eor	r26, r26
 8d6:	f0 0d       	add	r31, r0
 8d8:	b1 1d       	adc	r27, r1
 8da:	aa 1f       	adc	r26, r26
 8dc:	64 9f       	mul	r22, r20
 8de:	66 27       	eor	r22, r22
 8e0:	b0 0d       	add	r27, r0
 8e2:	a1 1d       	adc	r26, r1
 8e4:	66 1f       	adc	r22, r22
 8e6:	82 9f       	mul	r24, r18
 8e8:	22 27       	eor	r18, r18
 8ea:	b0 0d       	add	r27, r0
 8ec:	a1 1d       	adc	r26, r1
 8ee:	62 1f       	adc	r22, r18
 8f0:	73 9f       	mul	r23, r19
 8f2:	b0 0d       	add	r27, r0
 8f4:	a1 1d       	adc	r26, r1
 8f6:	62 1f       	adc	r22, r18
 8f8:	83 9f       	mul	r24, r19
 8fa:	a0 0d       	add	r26, r0
 8fc:	61 1d       	adc	r22, r1
 8fe:	22 1f       	adc	r18, r18
 900:	74 9f       	mul	r23, r20
 902:	33 27       	eor	r19, r19
 904:	a0 0d       	add	r26, r0
 906:	61 1d       	adc	r22, r1
 908:	23 1f       	adc	r18, r19
 90a:	84 9f       	mul	r24, r20
 90c:	60 0d       	add	r22, r0
 90e:	21 1d       	adc	r18, r1
 910:	82 2f       	mov	r24, r18
 912:	76 2f       	mov	r23, r22
 914:	6a 2f       	mov	r22, r26
 916:	11 24       	eor	r1, r1
 918:	9f 57       	subi	r25, 0x7F	; 127
 91a:	50 40       	sbci	r21, 0x00	; 0
 91c:	8a f0       	brmi	.+34     	; 0x940 <__mulsf3_pse+0x84>
 91e:	e1 f0       	breq	.+56     	; 0x958 <__mulsf3_pse+0x9c>
 920:	88 23       	and	r24, r24
 922:	4a f0       	brmi	.+18     	; 0x936 <__mulsf3_pse+0x7a>
 924:	ee 0f       	add	r30, r30
 926:	ff 1f       	adc	r31, r31
 928:	bb 1f       	adc	r27, r27
 92a:	66 1f       	adc	r22, r22
 92c:	77 1f       	adc	r23, r23
 92e:	88 1f       	adc	r24, r24
 930:	91 50       	subi	r25, 0x01	; 1
 932:	50 40       	sbci	r21, 0x00	; 0
 934:	a9 f7       	brne	.-22     	; 0x920 <__mulsf3_pse+0x64>
 936:	9e 3f       	cpi	r25, 0xFE	; 254
 938:	51 05       	cpc	r21, r1
 93a:	70 f0       	brcs	.+28     	; 0x958 <__mulsf3_pse+0x9c>
 93c:	5c cf       	rjmp	.-328    	; 0x7f6 <__fp_inf>
 93e:	a6 cf       	rjmp	.-180    	; 0x88c <__fp_szero>
 940:	5f 3f       	cpi	r21, 0xFF	; 255
 942:	ec f3       	brlt	.-6      	; 0x93e <__mulsf3_pse+0x82>
 944:	98 3e       	cpi	r25, 0xE8	; 232
 946:	dc f3       	brlt	.-10     	; 0x93e <__mulsf3_pse+0x82>
 948:	86 95       	lsr	r24
 94a:	77 95       	ror	r23
 94c:	67 95       	ror	r22
 94e:	b7 95       	ror	r27
 950:	f7 95       	ror	r31
 952:	e7 95       	ror	r30
 954:	9f 5f       	subi	r25, 0xFF	; 255
 956:	c1 f7       	brne	.-16     	; 0x948 <__mulsf3_pse+0x8c>
 958:	fe 2b       	or	r31, r30
 95a:	88 0f       	add	r24, r24
 95c:	91 1d       	adc	r25, r1
 95e:	96 95       	lsr	r25
 960:	87 95       	ror	r24
 962:	97 f9       	bld	r25, 7
 964:	08 95       	ret

00000966 <_exit>:
 966:	f8 94       	cli

00000968 <__stop_program>:
 968:	ff cf       	rjmp	.-2      	; 0x968 <__stop_program>
