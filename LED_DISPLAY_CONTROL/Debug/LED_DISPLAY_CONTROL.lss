
LED_DISPLAY_CONTROL.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000049c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  0000049c  00000530  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000f  00800074  00800074  00000544  2**0
                  ALLOC
  3 .stab         00001398  00000000  00000000  00000544  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000d9f  00000000  00000000  000018dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  0000267b  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e9       	ldi	r30, 0x9C	; 156
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 37       	cpi	r26, 0x74	; 116
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a4 e7       	ldi	r26, 0x74	; 116
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a3 38       	cpi	r26, 0x83	; 131
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 34 02 	call	0x468	; 0x468 <main>
  8a:	0c 94 4c 02 	jmp	0x498	; 0x498 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <LEDInit>:

#include "leddisplay.h"


void LEDInit()
{
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62
	/*
	 * call this function on start
	 */

	CONTROLDDR |= 	0b1111;
  9a:	81 e3       	ldi	r24, 0x31	; 49
  9c:	90 e0       	ldi	r25, 0x00	; 0
  9e:	21 e3       	ldi	r18, 0x31	; 49
  a0:	30 e0       	ldi	r19, 0x00	; 0
  a2:	f9 01       	movw	r30, r18
  a4:	20 81       	ld	r18, Z
  a6:	2f 60       	ori	r18, 0x0F	; 15
  a8:	fc 01       	movw	r30, r24
  aa:	20 83       	st	Z, r18
	LEDDDR |= 	0b11111111;
  ac:	8a e3       	ldi	r24, 0x3A	; 58
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	fc 01       	movw	r30, r24
  b2:	80 81       	ld	r24, Z
  b4:	8a e3       	ldi	r24, 0x3A	; 58
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	2f ef       	ldi	r18, 0xFF	; 255
  ba:	fc 01       	movw	r30, r24
  bc:	20 83       	st	Z, r18

	display.number = 123;
  be:	8b e7       	ldi	r24, 0x7B	; 123
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	90 93 7d 00 	sts	0x007D, r25
  c6:	80 93 7c 00 	sts	0x007C, r24
	display.blinkPos = 0b0000;
  ca:	10 92 7f 00 	sts	0x007F, r1
	display.changed = 1;
  ce:	81 e0       	ldi	r24, 0x01	; 1
  d0:	80 93 82 00 	sts	0x0082, r24
	display.isNegative = 0;
  d4:	10 92 80 00 	sts	0x0080, r1
	display.pointPos = 0b0000;
  d8:	10 92 7e 00 	sts	0x007E, r1
	display.skipZeros = 0;
  dc:	10 92 81 00 	sts	0x0081, r1

}
  e0:	df 91       	pop	r29
  e2:	cf 91       	pop	r28
  e4:	08 95       	ret

000000e6 <LEDTest>:

void LEDTest()
{
  e6:	cf 93       	push	r28
  e8:	df 93       	push	r29
  ea:	cd b7       	in	r28, 0x3d	; 61
  ec:	de b7       	in	r29, 0x3e	; 62
	/*
	 * set all segments to work
	 */

	_segments[0] =	~DOFF;
  ee:	10 92 74 00 	sts	0x0074, r1
	_segments[1] =	~DOFF;
  f2:	10 92 75 00 	sts	0x0075, r1
	_segments[2] =	~DOFF;
  f6:	10 92 76 00 	sts	0x0076, r1
	_segments[3] =	~DOFF;
  fa:	10 92 77 00 	sts	0x0077, r1
}
  fe:	df 91       	pop	r29
 100:	cf 91       	pop	r28
 102:	08 95       	ret

00000104 <LEDshowOnDisplay>:

void LEDshowOnDisplay()
{
 104:	cf 93       	push	r28
 106:	df 93       	push	r29
 108:	1f 92       	push	r1
 10a:	cd b7       	in	r28, 0x3d	; 61
 10c:	de b7       	in	r29, 0x3e	; 62
	if(display.changed == 1)
 10e:	80 91 82 00 	lds	r24, 0x0082
 112:	81 30       	cpi	r24, 0x01	; 1
 114:	21 f4       	brne	.+8      	; 0x11e <LEDshowOnDisplay+0x1a>
	{
		_LEDupdateSegments();
 116:	0e 94 00 01 	call	0x200	; 0x200 <_LEDupdateSegments>
		display.changed = 0;
 11a:	10 92 82 00 	sts	0x0082, r1
	}

	for(uint8_t seg = 1; seg <= 4; seg++)
 11e:	81 e0       	ldi	r24, 0x01	; 1
 120:	89 83       	std	Y+1, r24	; 0x01
 122:	23 c0       	rjmp	.+70     	; 0x16a <LEDshowOnDisplay+0x66>
	{
		CONTROLPORT = 	~(1 << (seg - 1));
 124:	82 e3       	ldi	r24, 0x32	; 50
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	29 81       	ldd	r18, Y+1	; 0x01
 12a:	22 2f       	mov	r18, r18
 12c:	30 e0       	ldi	r19, 0x00	; 0
 12e:	a9 01       	movw	r20, r18
 130:	41 50       	subi	r20, 0x01	; 1
 132:	51 09       	sbc	r21, r1
 134:	21 e0       	ldi	r18, 0x01	; 1
 136:	30 e0       	ldi	r19, 0x00	; 0
 138:	04 2e       	mov	r0, r20
 13a:	02 c0       	rjmp	.+4      	; 0x140 <LEDshowOnDisplay+0x3c>
 13c:	22 0f       	add	r18, r18
 13e:	33 1f       	adc	r19, r19
 140:	0a 94       	dec	r0
 142:	e2 f7       	brpl	.-8      	; 0x13c <LEDshowOnDisplay+0x38>
 144:	20 95       	com	r18
 146:	fc 01       	movw	r30, r24
 148:	20 83       	st	Z, r18
		LEDPORT = 	_segments[seg - 1];
 14a:	8b e3       	ldi	r24, 0x3B	; 59
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	29 81       	ldd	r18, Y+1	; 0x01
 150:	22 2f       	mov	r18, r18
 152:	30 e0       	ldi	r19, 0x00	; 0
 154:	21 50       	subi	r18, 0x01	; 1
 156:	31 09       	sbc	r19, r1
 158:	2c 58       	subi	r18, 0x8C	; 140
 15a:	3f 4f       	sbci	r19, 0xFF	; 255
 15c:	f9 01       	movw	r30, r18
 15e:	20 81       	ld	r18, Z
 160:	fc 01       	movw	r30, r24
 162:	20 83       	st	Z, r18
	{
		_LEDupdateSegments();
		display.changed = 0;
	}

	for(uint8_t seg = 1; seg <= 4; seg++)
 164:	89 81       	ldd	r24, Y+1	; 0x01
 166:	8f 5f       	subi	r24, 0xFF	; 255
 168:	89 83       	std	Y+1, r24	; 0x01
 16a:	89 81       	ldd	r24, Y+1	; 0x01
 16c:	85 30       	cpi	r24, 0x05	; 5
 16e:	d0 f2       	brcs	.-76     	; 0x124 <LEDshowOnDisplay+0x20>
	{
		CONTROLPORT = 	~(1 << (seg - 1));
		LEDPORT = 	_segments[seg - 1];
	}
}
 170:	0f 90       	pop	r0
 172:	df 91       	pop	r29
 174:	cf 91       	pop	r28
 176:	08 95       	ret

00000178 <_LEDsetValueOnSegment>:

static void _LEDsetValueOnSegment(uint8_t value, uint8_t seg)
{
 178:	cf 93       	push	r28
 17a:	df 93       	push	r29
 17c:	00 d0       	rcall	.+0      	; 0x17e <_LEDsetValueOnSegment+0x6>
 17e:	cd b7       	in	r28, 0x3d	; 61
 180:	de b7       	in	r29, 0x3e	; 62
 182:	89 83       	std	Y+1, r24	; 0x01
 184:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * set value arg1 on segment arg2
	 */
	if(seg > 0 && seg <= 4)
 186:	8a 81       	ldd	r24, Y+2	; 0x02
 188:	88 23       	and	r24, r24
 18a:	61 f0       	breq	.+24     	; 0x1a4 <_LEDsetValueOnSegment+0x2c>
 18c:	8a 81       	ldd	r24, Y+2	; 0x02
 18e:	85 30       	cpi	r24, 0x05	; 5
 190:	48 f4       	brcc	.+18     	; 0x1a4 <_LEDsetValueOnSegment+0x2c>
		_segments[seg - 1] = value;
 192:	8a 81       	ldd	r24, Y+2	; 0x02
 194:	88 2f       	mov	r24, r24
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	01 97       	sbiw	r24, 0x01	; 1
 19a:	8c 58       	subi	r24, 0x8C	; 140
 19c:	9f 4f       	sbci	r25, 0xFF	; 255
 19e:	29 81       	ldd	r18, Y+1	; 0x01
 1a0:	fc 01       	movw	r30, r24
 1a2:	20 83       	st	Z, r18
}
 1a4:	0f 90       	pop	r0
 1a6:	0f 90       	pop	r0
 1a8:	df 91       	pop	r29
 1aa:	cf 91       	pop	r28
 1ac:	08 95       	ret

000001ae <_LEDsetErrorMessage>:

static void _LEDsetErrorMessage(uint8_t err)
{
 1ae:	cf 93       	push	r28
 1b0:	df 93       	push	r29
 1b2:	00 d0       	rcall	.+0      	; 0x1b4 <_LEDsetErrorMessage+0x6>
 1b4:	cd b7       	in	r28, 0x3d	; 61
 1b6:	de b7       	in	r29, 0x3e	; 62
 1b8:	8a 83       	std	Y+2, r24	; 0x02
	 * ERR9:	error code out of range
	 */

	uint8_t errDigit;

	if(err > 9)
 1ba:	8a 81       	ldd	r24, Y+2	; 0x02
 1bc:	8a 30       	cpi	r24, 0x0A	; 10
 1be:	18 f0       	brcs	.+6      	; 0x1c6 <_LEDsetErrorMessage+0x18>
		errDigit = DIGITS[9];
 1c0:	80 e9       	ldi	r24, 0x90	; 144
 1c2:	89 83       	std	Y+1, r24	; 0x01
 1c4:	08 c0       	rjmp	.+16     	; 0x1d6 <_LEDsetErrorMessage+0x28>
	else
		errDigit = DIGITS[err];
 1c6:	8a 81       	ldd	r24, Y+2	; 0x02
 1c8:	88 2f       	mov	r24, r24
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	80 5a       	subi	r24, 0xA0	; 160
 1ce:	9f 4f       	sbci	r25, 0xFF	; 255
 1d0:	fc 01       	movw	r30, r24
 1d2:	80 81       	ld	r24, Z
 1d4:	89 83       	std	Y+1, r24	; 0x01

	_LEDsetValueOnSegment(LETE, 1);
 1d6:	61 e0       	ldi	r22, 0x01	; 1
 1d8:	86 e8       	ldi	r24, 0x86	; 134
 1da:	0e 94 bc 00 	call	0x178	; 0x178 <_LEDsetValueOnSegment>
	_LEDsetValueOnSegment(LETR, 2);
 1de:	62 e0       	ldi	r22, 0x02	; 2
 1e0:	88 e8       	ldi	r24, 0x88	; 136
 1e2:	0e 94 bc 00 	call	0x178	; 0x178 <_LEDsetValueOnSegment>
	_LEDsetValueOnSegment(LETR & DPOINT, 3);
 1e6:	63 e0       	ldi	r22, 0x03	; 3
 1e8:	88 e0       	ldi	r24, 0x08	; 8
 1ea:	0e 94 bc 00 	call	0x178	; 0x178 <_LEDsetValueOnSegment>
	_LEDsetValueOnSegment(errDigit, 4);
 1ee:	64 e0       	ldi	r22, 0x04	; 4
 1f0:	89 81       	ldd	r24, Y+1	; 0x01
 1f2:	0e 94 bc 00 	call	0x178	; 0x178 <_LEDsetValueOnSegment>
}
 1f6:	0f 90       	pop	r0
 1f8:	0f 90       	pop	r0
 1fa:	df 91       	pop	r29
 1fc:	cf 91       	pop	r28
 1fe:	08 95       	ret

00000200 <_LEDupdateSegments>:

static void _LEDupdateSegments()
{
 200:	cf 93       	push	r28
 202:	df 93       	push	r29
 204:	cd b7       	in	r28, 0x3d	; 61
 206:	de b7       	in	r29, 0x3e	; 62
 208:	28 97       	sbiw	r28, 0x08	; 8
 20a:	0f b6       	in	r0, 0x3f	; 63
 20c:	f8 94       	cli
 20e:	de bf       	out	0x3e, r29	; 62
 210:	0f be       	out	0x3f, r0	; 63
 212:	cd bf       	out	0x3d, r28	; 61
	/*
	 * converts display variable into struct segments variable
	 * should be called every time a display structure changes
	 */
	if((display.isNegative == 1 && display.number > 999)
 214:	80 91 80 00 	lds	r24, 0x0080
 218:	81 30       	cpi	r24, 0x01	; 1
 21a:	41 f4       	brne	.+16     	; 0x22c <_LEDupdateSegments+0x2c>
 21c:	80 91 7c 00 	lds	r24, 0x007C
 220:	90 91 7d 00 	lds	r25, 0x007D
 224:	88 3e       	cpi	r24, 0xE8	; 232
 226:	23 e0       	ldi	r18, 0x03	; 3
 228:	92 07       	cpc	r25, r18
 22a:	40 f4       	brcc	.+16     	; 0x23c <_LEDupdateSegments+0x3c>
			|| (display.number > 9999))
 22c:	80 91 7c 00 	lds	r24, 0x007C
 230:	90 91 7d 00 	lds	r25, 0x007D
 234:	80 31       	cpi	r24, 0x10	; 16
 236:	37 e2       	ldi	r19, 0x27	; 39
 238:	93 07       	cpc	r25, r19
 23a:	20 f0       	brcs	.+8      	; 0x244 <_LEDupdateSegments+0x44>
	{
		_LEDsetErrorMessage(0);
 23c:	80 e0       	ldi	r24, 0x00	; 0
 23e:	0e 94 d7 00 	call	0x1ae	; 0x1ae <_LEDsetErrorMessage>
 242:	09 c1       	rjmp	.+530    	; 0x456 <_LEDupdateSegments+0x256>
	}
		else
		{
			uint8_t values[4];

			for(uint8_t i = 0; i < 4; i++)
 244:	19 82       	std	Y+1, r1	; 0x01
 246:	a3 c0       	rjmp	.+326    	; 0x38e <_LEDupdateSegments+0x18e>
			{
				values[3 - i] = DIGITS[display.number % 10];
 248:	89 81       	ldd	r24, Y+1	; 0x01
 24a:	88 2f       	mov	r24, r24
 24c:	90 e0       	ldi	r25, 0x00	; 0
 24e:	23 e0       	ldi	r18, 0x03	; 3
 250:	30 e0       	ldi	r19, 0x00	; 0
 252:	f9 01       	movw	r30, r18
 254:	e8 1b       	sub	r30, r24
 256:	f9 0b       	sbc	r31, r25
 258:	40 91 7c 00 	lds	r20, 0x007C
 25c:	50 91 7d 00 	lds	r21, 0x007D
 260:	9a 01       	movw	r18, r20
 262:	ad ec       	ldi	r26, 0xCD	; 205
 264:	bc ec       	ldi	r27, 0xCC	; 204
 266:	0e 94 3d 02 	call	0x47a	; 0x47a <__umulhisi3>
 26a:	96 95       	lsr	r25
 26c:	87 95       	ror	r24
 26e:	96 95       	lsr	r25
 270:	87 95       	ror	r24
 272:	96 95       	lsr	r25
 274:	87 95       	ror	r24
 276:	88 0f       	add	r24, r24
 278:	99 1f       	adc	r25, r25
 27a:	9c 01       	movw	r18, r24
 27c:	22 0f       	add	r18, r18
 27e:	33 1f       	adc	r19, r19
 280:	22 0f       	add	r18, r18
 282:	33 1f       	adc	r19, r19
 284:	82 0f       	add	r24, r18
 286:	93 1f       	adc	r25, r19
 288:	ba 01       	movw	r22, r20
 28a:	68 1b       	sub	r22, r24
 28c:	79 0b       	sbc	r23, r25
 28e:	cb 01       	movw	r24, r22
 290:	80 5a       	subi	r24, 0xA0	; 160
 292:	9f 4f       	sbci	r25, 0xFF	; 255
 294:	dc 01       	movw	r26, r24
 296:	2c 91       	ld	r18, X
 298:	ce 01       	movw	r24, r28
 29a:	05 96       	adiw	r24, 0x05	; 5
 29c:	8e 0f       	add	r24, r30
 29e:	9f 1f       	adc	r25, r31
 2a0:	fc 01       	movw	r30, r24
 2a2:	20 83       	st	Z, r18
				display.number /= 10;
 2a4:	80 91 7c 00 	lds	r24, 0x007C
 2a8:	90 91 7d 00 	lds	r25, 0x007D
 2ac:	9c 01       	movw	r18, r24
 2ae:	ad ec       	ldi	r26, 0xCD	; 205
 2b0:	bc ec       	ldi	r27, 0xCC	; 204
 2b2:	0e 94 3d 02 	call	0x47a	; 0x47a <__umulhisi3>
 2b6:	96 95       	lsr	r25
 2b8:	87 95       	ror	r24
 2ba:	96 95       	lsr	r25
 2bc:	87 95       	ror	r24
 2be:	96 95       	lsr	r25
 2c0:	87 95       	ror	r24
 2c2:	90 93 7d 00 	sts	0x007D, r25
 2c6:	80 93 7c 00 	sts	0x007C, r24

				if(display.number == 0)
 2ca:	80 91 7c 00 	lds	r24, 0x007C
 2ce:	90 91 7d 00 	lds	r25, 0x007D
 2d2:	00 97       	sbiw	r24, 0x00	; 0
 2d4:	09 f0       	breq	.+2      	; 0x2d8 <_LEDupdateSegments+0xd8>
 2d6:	58 c0       	rjmp	.+176    	; 0x388 <_LEDupdateSegments+0x188>
				{
					if(display.skipZeros == 0)
 2d8:	80 91 81 00 	lds	r24, 0x0081
 2dc:	88 23       	and	r24, r24
 2de:	11 f5       	brne	.+68     	; 0x324 <_LEDupdateSegments+0x124>
					{
						for(uint8_t j = i + 1; j < 4; j++)
 2e0:	89 81       	ldd	r24, Y+1	; 0x01
 2e2:	8f 5f       	subi	r24, 0xFF	; 255
 2e4:	8a 83       	std	Y+2, r24	; 0x02
 2e6:	14 c0       	rjmp	.+40     	; 0x310 <_LEDupdateSegments+0x110>
						{
							values[3 - j] = DIGITS[0];
 2e8:	8a 81       	ldd	r24, Y+2	; 0x02
 2ea:	88 2f       	mov	r24, r24
 2ec:	90 e0       	ldi	r25, 0x00	; 0
 2ee:	23 e0       	ldi	r18, 0x03	; 3
 2f0:	30 e0       	ldi	r19, 0x00	; 0
 2f2:	a9 01       	movw	r20, r18
 2f4:	48 1b       	sub	r20, r24
 2f6:	59 0b       	sbc	r21, r25
 2f8:	ca 01       	movw	r24, r20
 2fa:	40 ec       	ldi	r20, 0xC0	; 192
 2fc:	9e 01       	movw	r18, r28
 2fe:	2b 5f       	subi	r18, 0xFB	; 251
 300:	3f 4f       	sbci	r19, 0xFF	; 255
 302:	82 0f       	add	r24, r18
 304:	93 1f       	adc	r25, r19
 306:	dc 01       	movw	r26, r24
 308:	4c 93       	st	X, r20

				if(display.number == 0)
				{
					if(display.skipZeros == 0)
					{
						for(uint8_t j = i + 1; j < 4; j++)
 30a:	8a 81       	ldd	r24, Y+2	; 0x02
 30c:	8f 5f       	subi	r24, 0xFF	; 255
 30e:	8a 83       	std	Y+2, r24	; 0x02
 310:	8a 81       	ldd	r24, Y+2	; 0x02
 312:	84 30       	cpi	r24, 0x04	; 4
 314:	48 f3       	brcs	.-46     	; 0x2e8 <_LEDupdateSegments+0xe8>
						{
							values[3 - j] = DIGITS[0];
						}

						if(display.isNegative == 1)
 316:	80 91 80 00 	lds	r24, 0x0080
 31a:	81 30       	cpi	r24, 0x01	; 1
 31c:	a1 f5       	brne	.+104    	; 0x386 <_LEDupdateSegments+0x186>
							values[0] = DMINUS;
 31e:	8f eb       	ldi	r24, 0xBF	; 191
 320:	8d 83       	std	Y+5, r24	; 0x05

						if(display.isNegative == 1)
							values[2 - i] = DMINUS;
					}

					break;
 322:	39 c0       	rjmp	.+114    	; 0x396 <_LEDupdateSegments+0x196>
						if(display.isNegative == 1)
							values[0] = DMINUS;
					}
					else
					{
						for(uint8_t j = i + 1; j < 4; j++)
 324:	89 81       	ldd	r24, Y+1	; 0x01
 326:	8f 5f       	subi	r24, 0xFF	; 255
 328:	8b 83       	std	Y+3, r24	; 0x03
 32a:	14 c0       	rjmp	.+40     	; 0x354 <_LEDupdateSegments+0x154>
						{
							values[3 - j] = DOFF;
 32c:	8b 81       	ldd	r24, Y+3	; 0x03
 32e:	88 2f       	mov	r24, r24
 330:	90 e0       	ldi	r25, 0x00	; 0
 332:	23 e0       	ldi	r18, 0x03	; 3
 334:	30 e0       	ldi	r19, 0x00	; 0
 336:	f9 01       	movw	r30, r18
 338:	e8 1b       	sub	r30, r24
 33a:	f9 0b       	sbc	r31, r25
 33c:	cf 01       	movw	r24, r30
 33e:	9e 01       	movw	r18, r28
 340:	2b 5f       	subi	r18, 0xFB	; 251
 342:	3f 4f       	sbci	r19, 0xFF	; 255
 344:	82 0f       	add	r24, r18
 346:	93 1f       	adc	r25, r19
 348:	2f ef       	ldi	r18, 0xFF	; 255
 34a:	dc 01       	movw	r26, r24
 34c:	2c 93       	st	X, r18
						if(display.isNegative == 1)
							values[0] = DMINUS;
					}
					else
					{
						for(uint8_t j = i + 1; j < 4; j++)
 34e:	8b 81       	ldd	r24, Y+3	; 0x03
 350:	8f 5f       	subi	r24, 0xFF	; 255
 352:	8b 83       	std	Y+3, r24	; 0x03
 354:	8b 81       	ldd	r24, Y+3	; 0x03
 356:	84 30       	cpi	r24, 0x04	; 4
 358:	48 f3       	brcs	.-46     	; 0x32c <_LEDupdateSegments+0x12c>
						{
							values[3 - j] = DOFF;
						}

						if(display.isNegative == 1)
 35a:	80 91 80 00 	lds	r24, 0x0080
 35e:	81 30       	cpi	r24, 0x01	; 1
 360:	91 f4       	brne	.+36     	; 0x386 <_LEDupdateSegments+0x186>
							values[2 - i] = DMINUS;
 362:	89 81       	ldd	r24, Y+1	; 0x01
 364:	88 2f       	mov	r24, r24
 366:	90 e0       	ldi	r25, 0x00	; 0
 368:	22 e0       	ldi	r18, 0x02	; 2
 36a:	30 e0       	ldi	r19, 0x00	; 0
 36c:	f9 01       	movw	r30, r18
 36e:	e8 1b       	sub	r30, r24
 370:	f9 0b       	sbc	r31, r25
 372:	cf 01       	movw	r24, r30
 374:	9e 01       	movw	r18, r28
 376:	2b 5f       	subi	r18, 0xFB	; 251
 378:	3f 4f       	sbci	r19, 0xFF	; 255
 37a:	82 0f       	add	r24, r18
 37c:	93 1f       	adc	r25, r19
 37e:	2f eb       	ldi	r18, 0xBF	; 191
 380:	dc 01       	movw	r26, r24
 382:	2c 93       	st	X, r18
					}

					break;
 384:	08 c0       	rjmp	.+16     	; 0x396 <_LEDupdateSegments+0x196>
 386:	07 c0       	rjmp	.+14     	; 0x396 <_LEDupdateSegments+0x196>
	}
		else
		{
			uint8_t values[4];

			for(uint8_t i = 0; i < 4; i++)
 388:	89 81       	ldd	r24, Y+1	; 0x01
 38a:	8f 5f       	subi	r24, 0xFF	; 255
 38c:	89 83       	std	Y+1, r24	; 0x01
 38e:	89 81       	ldd	r24, Y+1	; 0x01
 390:	84 30       	cpi	r24, 0x04	; 4
 392:	08 f4       	brcc	.+2      	; 0x396 <_LEDupdateSegments+0x196>
 394:	59 cf       	rjmp	.-334    	; 0x248 <_LEDupdateSegments+0x48>

					break;
				}
			}

			for(uint8_t i = 0; i < 4; i++)
 396:	1c 82       	std	Y+4, r1	; 0x04
 398:	5a c0       	rjmp	.+180    	; 0x44e <_LEDupdateSegments+0x24e>
			{
				if((display.blinkPos & (1 <<(3 - i))) != 0)
 39a:	80 91 7f 00 	lds	r24, 0x007F
 39e:	88 2f       	mov	r24, r24
 3a0:	90 e0       	ldi	r25, 0x00	; 0
 3a2:	2c 81       	ldd	r18, Y+4	; 0x04
 3a4:	22 2f       	mov	r18, r18
 3a6:	30 e0       	ldi	r19, 0x00	; 0
 3a8:	43 e0       	ldi	r20, 0x03	; 3
 3aa:	50 e0       	ldi	r21, 0x00	; 0
 3ac:	fa 01       	movw	r30, r20
 3ae:	e2 1b       	sub	r30, r18
 3b0:	f3 0b       	sbc	r31, r19
 3b2:	9f 01       	movw	r18, r30
 3b4:	02 2e       	mov	r0, r18
 3b6:	02 c0       	rjmp	.+4      	; 0x3bc <_LEDupdateSegments+0x1bc>
 3b8:	95 95       	asr	r25
 3ba:	87 95       	ror	r24
 3bc:	0a 94       	dec	r0
 3be:	e2 f7       	brpl	.-8      	; 0x3b8 <_LEDupdateSegments+0x1b8>
 3c0:	81 70       	andi	r24, 0x01	; 1
 3c2:	99 27       	eor	r25, r25
 3c4:	00 97       	sbiw	r24, 0x00	; 0
 3c6:	49 f0       	breq	.+18     	; 0x3da <_LEDupdateSegments+0x1da>
					_segments[i] = DOFF;
 3c8:	8c 81       	ldd	r24, Y+4	; 0x04
 3ca:	88 2f       	mov	r24, r24
 3cc:	90 e0       	ldi	r25, 0x00	; 0
 3ce:	8c 58       	subi	r24, 0x8C	; 140
 3d0:	9f 4f       	sbci	r25, 0xFF	; 255
 3d2:	2f ef       	ldi	r18, 0xFF	; 255
 3d4:	dc 01       	movw	r26, r24
 3d6:	2c 93       	st	X, r18
 3d8:	37 c0       	rjmp	.+110    	; 0x448 <_LEDupdateSegments+0x248>
				else
				{
					_segments[i] = values[i];
 3da:	8c 81       	ldd	r24, Y+4	; 0x04
 3dc:	88 2f       	mov	r24, r24
 3de:	90 e0       	ldi	r25, 0x00	; 0
 3e0:	2c 81       	ldd	r18, Y+4	; 0x04
 3e2:	22 2f       	mov	r18, r18
 3e4:	30 e0       	ldi	r19, 0x00	; 0
 3e6:	ae 01       	movw	r20, r28
 3e8:	4b 5f       	subi	r20, 0xFB	; 251
 3ea:	5f 4f       	sbci	r21, 0xFF	; 255
 3ec:	24 0f       	add	r18, r20
 3ee:	35 1f       	adc	r19, r21
 3f0:	f9 01       	movw	r30, r18
 3f2:	20 81       	ld	r18, Z
 3f4:	8c 58       	subi	r24, 0x8C	; 140
 3f6:	9f 4f       	sbci	r25, 0xFF	; 255
 3f8:	dc 01       	movw	r26, r24
 3fa:	2c 93       	st	X, r18

					if((display.pointPos & (1 << (3 - i))) != 0)
 3fc:	80 91 7e 00 	lds	r24, 0x007E
 400:	88 2f       	mov	r24, r24
 402:	90 e0       	ldi	r25, 0x00	; 0
 404:	2c 81       	ldd	r18, Y+4	; 0x04
 406:	22 2f       	mov	r18, r18
 408:	30 e0       	ldi	r19, 0x00	; 0
 40a:	43 e0       	ldi	r20, 0x03	; 3
 40c:	50 e0       	ldi	r21, 0x00	; 0
 40e:	fa 01       	movw	r30, r20
 410:	e2 1b       	sub	r30, r18
 412:	f3 0b       	sbc	r31, r19
 414:	9f 01       	movw	r18, r30
 416:	02 2e       	mov	r0, r18
 418:	02 c0       	rjmp	.+4      	; 0x41e <_LEDupdateSegments+0x21e>
 41a:	95 95       	asr	r25
 41c:	87 95       	ror	r24
 41e:	0a 94       	dec	r0
 420:	e2 f7       	brpl	.-8      	; 0x41a <_LEDupdateSegments+0x21a>
 422:	81 70       	andi	r24, 0x01	; 1
 424:	99 27       	eor	r25, r25
 426:	00 97       	sbiw	r24, 0x00	; 0
 428:	79 f0       	breq	.+30     	; 0x448 <_LEDupdateSegments+0x248>
						_segments[i] &= DPOINT;
 42a:	8c 81       	ldd	r24, Y+4	; 0x04
 42c:	88 2f       	mov	r24, r24
 42e:	90 e0       	ldi	r25, 0x00	; 0
 430:	2c 81       	ldd	r18, Y+4	; 0x04
 432:	22 2f       	mov	r18, r18
 434:	30 e0       	ldi	r19, 0x00	; 0
 436:	2c 58       	subi	r18, 0x8C	; 140
 438:	3f 4f       	sbci	r19, 0xFF	; 255
 43a:	d9 01       	movw	r26, r18
 43c:	2c 91       	ld	r18, X
 43e:	2f 77       	andi	r18, 0x7F	; 127
 440:	8c 58       	subi	r24, 0x8C	; 140
 442:	9f 4f       	sbci	r25, 0xFF	; 255
 444:	fc 01       	movw	r30, r24
 446:	20 83       	st	Z, r18

					break;
				}
			}

			for(uint8_t i = 0; i < 4; i++)
 448:	8c 81       	ldd	r24, Y+4	; 0x04
 44a:	8f 5f       	subi	r24, 0xFF	; 255
 44c:	8c 83       	std	Y+4, r24	; 0x04
 44e:	8c 81       	ldd	r24, Y+4	; 0x04
 450:	84 30       	cpi	r24, 0x04	; 4
 452:	08 f4       	brcc	.+2      	; 0x456 <_LEDupdateSegments+0x256>
 454:	a2 cf       	rjmp	.-188    	; 0x39a <_LEDupdateSegments+0x19a>
					if((display.pointPos & (1 << (3 - i))) != 0)
						_segments[i] &= DPOINT;
				}
			}
		}
}
 456:	28 96       	adiw	r28, 0x08	; 8
 458:	0f b6       	in	r0, 0x3f	; 63
 45a:	f8 94       	cli
 45c:	de bf       	out	0x3e, r29	; 62
 45e:	0f be       	out	0x3f, r0	; 63
 460:	cd bf       	out	0x3d, r28	; 61
 462:	df 91       	pop	r29
 464:	cf 91       	pop	r28
 466:	08 95       	ret

00000468 <main>:

#include "leddisplay.h"
#include <util/delay.h>

int main()
{
 468:	cf 93       	push	r28
 46a:	df 93       	push	r29
 46c:	cd b7       	in	r28, 0x3d	; 61
 46e:	de b7       	in	r29, 0x3e	; 62
	LEDInit();
 470:	0e 94 49 00 	call	0x92	; 0x92 <LEDInit>

	while(1)
	{
		LEDshowOnDisplay();
 474:	0e 94 82 00 	call	0x104	; 0x104 <LEDshowOnDisplay>
	}
 478:	fd cf       	rjmp	.-6      	; 0x474 <main+0xc>

0000047a <__umulhisi3>:
 47a:	a2 9f       	mul	r26, r18
 47c:	b0 01       	movw	r22, r0
 47e:	b3 9f       	mul	r27, r19
 480:	c0 01       	movw	r24, r0
 482:	a3 9f       	mul	r26, r19
 484:	70 0d       	add	r23, r0
 486:	81 1d       	adc	r24, r1
 488:	11 24       	eor	r1, r1
 48a:	91 1d       	adc	r25, r1
 48c:	b2 9f       	mul	r27, r18
 48e:	70 0d       	add	r23, r0
 490:	81 1d       	adc	r24, r1
 492:	11 24       	eor	r1, r1
 494:	91 1d       	adc	r25, r1
 496:	08 95       	ret

00000498 <_exit>:
 498:	f8 94       	cli

0000049a <__stop_program>:
 49a:	ff cf       	rjmp	.-2      	; 0x49a <__stop_program>
